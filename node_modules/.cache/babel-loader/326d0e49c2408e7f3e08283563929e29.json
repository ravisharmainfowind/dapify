{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get state() {\n    return this._delegate.state;\n  }\n\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n\n}\n\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  get name() {\n    return this._delegate.name;\n  }\n\n  get bucket() {\n    return this._delegate.bucket;\n  }\n\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n\n\n  get parent() {\n    const reference = this._delegate.parent;\n\n    if (reference == null) {\n      return null;\n    }\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  put(data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  putString(value) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n    let metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    this._throwIfRoot('putString');\n\n    const data = _dataFromString(format, value);\n\n    const metadataClone = Object.assign({}, metadata);\n\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n\n\n  delete() {\n    this._throwIfRoot('delete');\n\n    return deleteObject(this._delegate);\n  }\n\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host, port) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n\n}\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.15\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"sources":["../../src/tasksnapshot.ts","../../src/task.ts","../../src/list.ts","../../src/reference.ts","../../src/service.ts","../../src/index.ts"],"names":["TaskState","TaskEvent"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}