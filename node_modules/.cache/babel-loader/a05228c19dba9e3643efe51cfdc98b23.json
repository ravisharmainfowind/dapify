{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.10\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_ref) {\n  let {\n    projectId\n  } = _ref;\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nasync function getErrorFromResponse(requestName, response) {\n  const responseJson = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(\"request-failed\"\n  /* REQUEST_FAILED */\n  , {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nfunction getHeaders(_ref2) {\n  let {\n    apiKey\n  } = _ref2;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  let {\n    refreshToken\n  } = _ref3;\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nasync function retryIfServerError(fn) {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function createInstallationRequest(_ref4, _ref5) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref4;\n  let {\n    fid\n  } = _ref5;\n  const endpoint = getInstallationsEndpoint(appConfig);\n  const headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const registeredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: 2\n      /* COMPLETED */\n      ,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function set(appConfig, value) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function remove(appConfig) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nasync function update(appConfig, updateFn) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nasync function getInstallationEntry(installations) {\n  let registrationPromise;\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return {\n      installationEntry: await registrationPromise\n    };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nasync function registerInstallation(installations, installationEntry) {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: 0\n        /* NOT_STARTED */\n\n      });\n    }\n\n    throw e;\n  }\n}\n/** Call if FID registration is pending in another request. */\n\n\nasync function waitUntilFidRegistration(installations) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateInstallationRequest(installations.appConfig);\n\n  while (entry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // createInstallation request still in progress.\n    await sleep(100);\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry;\n    }\n  }\n\n  return entry;\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function generateAuthTokenRequest(_ref6, installationEntry) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref6;\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  let {\n    fid\n  } = _ref7;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nasync function refreshAuthToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let tokenPromise;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n  const authToken = tokenPromise ? await tokenPromise : entry.authToken;\n  return authToken;\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n\n  while (entry.authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n\n  if (authToken.requestStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n  try {\n    const authToken = await generateAuthTokenRequest(installations, installationEntry);\n    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n      authToken\n    });\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function getId(installations) {\n  const installationsImpl = installations;\n  const {\n    installationEntry,\n    registrationPromise\n  } = await getInstallationEntry(installationsImpl);\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nasync function getToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const installationsImpl = installations;\n  await completeInstallationRegistration(installationsImpl); // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(installations) {\n  const {\n    registrationPromise\n  } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request = {\n    method: 'DELETE',\n    headers\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  let {\n    fid\n  } = _ref8;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function deleteInstallations(installations) {\n  const {\n    appConfig\n  } = installations;\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(\"delete-pending-registration\"\n      /* DELETE_PENDING_REGISTRATION */\n      );\n    } else if (entry.registrationStatus === 2\n    /* COMPLETED */\n    ) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"sources":["../../src/util/constants.ts","../../src/util/errors.ts","../../src/functions/common.ts","../../src/functions/create-installation-request.ts","../../src/util/sleep.ts","../../src/helpers/buffer-to-base64-url-safe.ts","../../src/helpers/generate-fid.ts","../../src/util/get-key.ts","../../src/helpers/fid-changed.ts","../../src/helpers/idb-manager.ts","../../src/helpers/get-installation-entry.ts","../../src/functions/generate-auth-token-request.ts","../../src/helpers/refresh-auth-token.ts","../../src/api/get-id.ts","../../src/api/get-token.ts","../../src/functions/delete-installation-request.ts","../../src/api/delete-installations.ts","../../src/api/on-id-change.ts","../../src/api/get-installations.ts","../../src/helpers/extract-app-config.ts","../../src/functions/config.ts","../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"]},"metadata":{},"sourceType":"module"}