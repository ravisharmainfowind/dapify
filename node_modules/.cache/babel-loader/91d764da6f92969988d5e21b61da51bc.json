{"ast":null,"code":"import { POST_USER_INSTAGRAM_INSIGHTS_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_SUCCESS, POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS, POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST, GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS, POST_INSTAGRAM_FOLLOWERS_REQUEST, GET_INSTAGRAM_FOLLOWERS_FAILURE, GET_INSTAGRAM_FOLLOWERS_SUCCESS, POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST, GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS } from './type';\nimport { LongLiveAccessToken, InstagramBusinessAccount, getInstaUserMediaPost, getInstaUserMediaInsights, getInstaUserFollower, InstaTopCityAudience, InstaFollowerGrowth } from './api_url';\nimport { facebookProvider, auth } from \"../auth-service\";\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css';\nimport * as moment from 'moment'; // For get instagram user\n\nexport const getInstgramInsightsUser = (uid, accountLinked) => async dispatch => {\n  try {\n    var provider_type = facebookProvider;\n    var responseToken = '';\n    dispatch({\n      type: POST_USER_INSTAGRAM_INSIGHTS_REQUEST,\n      payload: true\n    });\n\n    if (accountLinked === true) {\n      responseToken = await auth.signInWithPopup(provider_type);\n    } else {\n      responseToken = await auth.currentUser.linkWithPopup(provider_type);\n    }\n\n    console.log('fbresp', responseToken);\n\n    if (responseToken.user) {\n      var _responseToken;\n\n      console.log('social login response', responseToken);\n      console.log('accesstokennnn', responseToken.credential.accessToken);\n\n      if ((_responseToken = responseToken) !== null && _responseToken !== void 0 && _responseToken.credential.accessToken) {\n        const tkn_data = {\n          token: responseToken.credential.accessToken\n        };\n        const response = await axios.post(LongLiveAccessToken, tkn_data);\n        console.log('insresponse', response);\n\n        if (response.status === 200) {\n          var _response$data;\n\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss');\n            const accData = {\n              token: response.data.access_token\n            };\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n\n            if (Accountresponse.status === 200) {\n              if (Accountresponse.data.data.length !== 0) {\n                const Tokendata = {\n                  'InsightsTokenData': {\n                    'token': response.data.access_token,\n                    'date': newexpiredate\n                  },\n                  'InsightsUserData': {\n                    'username': Accountresponse.data.data[0].instagram_business_account.username,\n                    'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                    'name': Accountresponse.data.data[0].name,\n                    'id': Accountresponse.data.data[0].id\n                  }\n                };\n                const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(async function (docres) {\n                  dispatch({\n                    type: GET_USER_INSTAGRAM_INSIGHTS_SUCCESS,\n                    payload: true\n                  });\n                }).catch(function (error) {\n                  dispatch({\n                    type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n                    payload: 'Please try again..'\n                  });\n                  ERROR('Please try again..');\n                });\n              } else {\n                dispatch({\n                  type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n                  payload: 'Please try again..'\n                });\n                ERROR('Add business Page');\n              }\n            } else {\n              dispatch({\n                type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n                payload: 'Business Account not found'\n              });\n              ERROR('Business Account not found');\n            }\n          } else {\n            dispatch({\n              type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n              payload: 'Please try again..'\n            });\n            ERROR('Please try again..');\n          }\n        } else {\n          dispatch({\n            type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n            payload: 'Please try again..'\n          });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({\n          type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n          payload: 'Please try again..'\n        });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({\n        type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n        payload: 'Please try again..'\n      });\n      ERROR('Please try again..');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE,\n      payload: error\n    });\n\n    if (error.code === 'auth/credential-already-in-use') {\n      ERROR('Already exists, Please try with another credential');\n    }\n  }\n}; // get instagram media post\n\nexport const getInstaMediaPost = post_data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST,\n      payload: true\n    });\n\n    if (post_data) {\n      var media_arr = [];\n      var user_follower_count = 0;\n      var userdata = post_data.userData;\n\n      if (userdata !== null && userdata !== void 0 && userdata.InsightsTokenData.token) {\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          since: post_data.since,\n          until: post_data.until\n        };\n        const response = await axios.post(getInstaUserMediaPost, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            var i = 0;\n            media_arr = response.data.data;\n            var media_insights_arr = [];\n            const followpostdata = {\n              token: userdata.InsightsTokenData.token,\n              account_id: userdata.InsightsUserData.account_id\n            };\n            const follower_response = await axios.post(getInstaUserFollower, followpostdata);\n            console.log('follower_response', follower_response);\n\n            if (follower_response.status === 200) {\n              user_follower_count = follower_response.data.followers_count;\n              media_insights_arr['follower_count'] = user_follower_count;\n            } else {\n              user_follower_count = 0;\n              media_insights_arr['follower_count'] = user_follower_count;\n            }\n\n            getInsights(media_arr[i]);\n\n            async function getInsights(media_val) {\n              if (media_arr.length > i) {\n                var postInsights = {\n                  token: userdata.InsightsTokenData.token,\n                  post_id: media_val.id\n                };\n                const insights_response = await axios.post(getInstaUserMediaInsights, postInsights);\n\n                if (insights_response.status === 200) {\n                  media_val['insight_data'] = insights_response.data;\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n                } else {\n                  media_val['insight_data'] = {};\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n                }\n              }\n\n              if (media_arr.length === media_insights_arr.length) {\n                dispatch({\n                  type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS,\n                  payload: media_insights_arr\n                });\n              } else {\n                dispatch({\n                  type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS,\n                  payload: []\n                });\n              }\n            }\n          } else {\n            dispatch({\n              type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE,\n              payload: false\n            });\n          }\n        } else {\n          dispatch({\n            type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE,\n            payload: 'Please try again..'\n          });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({\n          type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE,\n          payload: 'Please try again..'\n        });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({\n        type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE,\n        payload: 'Please try again..'\n      });\n      ERROR('Please try again..');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE,\n      payload: error\n    });\n    console.log('sociallogin', error.message); //ERROR(error.message);\n  }\n}; // get instagram top city audience\n\nexport const getInstaTopCityAudience = post_data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST,\n      payload: true\n    });\n\n    if (post_data) {\n      //var media_arr = [];\n      var userdata = post_data.userData;\n\n      if (userdata !== null && userdata !== void 0 && userdata.InsightsTokenData.token) {\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"lifetime\"\n        };\n        const response = await axios.post(InstaTopCityAudience, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            dispatch({\n              type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS,\n              payload: response.data\n            });\n          } else {\n            dispatch({\n              type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE,\n              payload: 'No record Found'\n            });\n          }\n        } else {\n          dispatch({\n            type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE,\n            payload: 'No record Found.'\n          });\n        }\n      } else {\n        dispatch({\n          type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE,\n          payload: 'No record Found.'\n        });\n      }\n    } else {\n      dispatch({\n        type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE,\n        payload: 'No record Found.'\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE,\n      payload: error\n    });\n    console.log('sociallogin', error.message); //ERROR(error.message);\n  }\n};\nexport const getInstaFollowers = post_data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_INSTAGRAM_FOLLOWERS_REQUEST,\n      payload: true\n    });\n\n    if (post_data) {\n      var userdata = post_data.userData;\n\n      if (userdata !== null && userdata !== void 0 && userdata.InsightsTokenData.token) {\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id\n        };\n        const response = await axios.post(getInstaUserFollower, postdata);\n\n        if (response.status === 200) {\n          console.log('follower_res', response.data);\n\n          if (response.data) {\n            response.data.type = 'instagram';\n            dispatch({\n              type: GET_INSTAGRAM_FOLLOWERS_SUCCESS,\n              payload: response.data\n            });\n          } else {\n            dispatch({\n              type: GET_INSTAGRAM_FOLLOWERS_FAILURE,\n              payload: 'No record Found'\n            });\n          }\n        } else {\n          dispatch({\n            type: GET_INSTAGRAM_FOLLOWERS_FAILURE,\n            payload: 'No record Found.'\n          });\n        }\n      } else {\n        dispatch({\n          type: GET_INSTAGRAM_FOLLOWERS_FAILURE,\n          payload: 'No record Found.'\n        });\n      }\n    } else {\n      dispatch({\n        type: GET_INSTAGRAM_FOLLOWERS_FAILURE,\n        payload: 'No record Found.'\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_INSTAGRAM_FOLLOWERS_FAILURE,\n      payload: error\n    });\n    console.log('sociallogin', error.message); //ERROR(error.message);\n  }\n}; // get instagram follower growth\n\nexport const getFollowersGrowth = post_data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST,\n      payload: true\n    });\n\n    if (post_data) {\n      //var media_arr = [];\n      var userdata = post_data.userData;\n\n      if (userdata !== null && userdata !== void 0 && userdata.InsightsTokenData.token) {\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"day\",\n          since: post_data.since,\n          until: post_data.until\n        };\n        const response = await axios.post(InstaFollowerGrowth, postdata);\n        console.log('followercount---growth', response.data);\n\n        if (response.status === 200) {\n          if (response.data) {\n            var _response$data$data$;\n\n            var rescount = 0;\n\n            if ((_response$data$data$ = response.data.data[0]) !== null && _response$data$data$ !== void 0 && _response$data$data$.values) {\n              var followerres = response.data.data[0].values;\n\n              for (let i = 0; i < followerres.length; i++) {\n                rescount = rescount + followerres[i]['value'];\n              }\n            }\n\n            dispatch({\n              type: GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS,\n              payload: rescount\n            });\n          } else {\n            dispatch({\n              type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,\n              payload: 'No record Found'\n            });\n          }\n        } else {\n          dispatch({\n            type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,\n            payload: 'No record Found.'\n          });\n        }\n      } else {\n        dispatch({\n          type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,\n          payload: 'No record Found.'\n        });\n      }\n    } else {\n      dispatch({\n        type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,\n        payload: 'No record Found.'\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,\n      payload: error\n    });\n    console.log('sociallogin', error.message); //ERROR(error.message);\n  }\n};","map":{"version":3,"names":["POST_USER_INSTAGRAM_INSIGHTS_REQUEST","GET_USER_INSTAGRAM_INSIGHTS_FAILURE","GET_USER_INSTAGRAM_INSIGHTS_SUCCESS","POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST","GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE","GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS","POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST","GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE","GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS","POST_INSTAGRAM_FOLLOWERS_REQUEST","GET_INSTAGRAM_FOLLOWERS_FAILURE","GET_INSTAGRAM_FOLLOWERS_SUCCESS","POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST","GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE","GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS","LongLiveAccessToken","InstagramBusinessAccount","getInstaUserMediaPost","getInstaUserMediaInsights","getInstaUserFollower","InstaTopCityAudience","InstaFollowerGrowth","facebookProvider","auth","axios","firebaseConfig","ERROR","RedirectModal","Success","moment","getInstgramInsightsUser","uid","accountLinked","dispatch","provider_type","responseToken","type","payload","signInWithPopup","currentUser","linkWithPopup","console","log","user","credential","accessToken","tkn_data","token","response","post","status","data","access_token","expiredate","Date","setDate","getDate","newexpiredate","format","accData","Accountresponse","length","Tokendata","instagram_business_account","username","id","name","resp","firestore","collection","doc","update","then","docres","catch","error","code","getInstaMediaPost","post_data","media_arr","user_follower_count","userdata","userData","InsightsTokenData","postdata","account_id","InsightsUserData","since","until","i","media_insights_arr","followpostdata","follower_response","followers_count","getInsights","media_val","postInsights","post_id","insights_response","push","message","getInstaTopCityAudience","period","getInstaFollowers","getFollowersGrowth","rescount","values","followerres"],"sources":["/home/asus/dapify/src/Redux/actions/insights-Instagram-actions.js"],"sourcesContent":["import {\n  POST_USER_INSTAGRAM_INSIGHTS_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_SUCCESS,\n  POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS,\n  POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST, GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS,\n  POST_INSTAGRAM_FOLLOWERS_REQUEST, GET_INSTAGRAM_FOLLOWERS_FAILURE, GET_INSTAGRAM_FOLLOWERS_SUCCESS,\n  POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST,GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS,\n} from './type';\n\nimport {\n  LongLiveAccessToken, InstagramBusinessAccount, getInstaUserMediaPost, getInstaUserMediaInsights, getInstaUserFollower,\n  InstaTopCityAudience,InstaFollowerGrowth\n\n} from './api_url';\nimport { facebookProvider, auth } from \"../auth-service\";\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\n\n// For get instagram user\nexport const getInstgramInsightsUser = (uid,accountLinked) => async dispatch => {\n  try {\n\n    var provider_type = facebookProvider;\n    var responseToken = '';\n    dispatch({ type: POST_USER_INSTAGRAM_INSIGHTS_REQUEST, payload: true });\n\n    if(accountLinked === true){\n      responseToken = await auth.signInWithPopup(provider_type)\n    }else{\n      responseToken = await auth.currentUser.linkWithPopup(provider_type)\n    }\n    \n    console.log('fbresp', responseToken);\n    if (responseToken.user) {\n\n      console.log('social login response', responseToken);\n      console.log('accesstokennnn', responseToken.credential.accessToken)\n\n      if (responseToken?.credential.accessToken) {\n        const tkn_data = {\n          token: responseToken.credential.accessToken\n        }\n\n        const response = await axios.post(LongLiveAccessToken, tkn_data);\n        console.log('insresponse', response);\n        if (response.status === 200) {\n          if (response.data?.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n            const accData = {\n              token: response.data.access_token,\n            }\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n            if (Accountresponse.status === 200) {\n\n              if (Accountresponse.data.data.length !== 0) {\n\n                const Tokendata =\n                {\n                  'InsightsTokenData': {\n                    'token': response.data.access_token,\n                    'date': newexpiredate,\n                  },\n\n                  'InsightsUserData': {\n                    'username': Accountresponse.data.data[0].instagram_business_account.username,\n                    'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                    'name': Accountresponse.data.data[0].name,\n                    'id': Accountresponse.data.data[0].id,\n                  }\n                }\n\n                const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(async function (docres) {\n                  dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_SUCCESS, payload: true });\n\n                }).catch(function (error) {\n                  dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n                  ERROR('Please try again..');\n                })\n              } else {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n                ERROR('Add business Page');\n              }\n\n\n            } else {\n              dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Business Account not found' });\n              ERROR('Business Account not found');\n            }\n\n          } else {\n            dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n            ERROR('Please try again..');\n          }\n        } else {\n          dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n      ERROR('Please try again..');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: error });\n    if (error.code === 'auth/credential-already-in-use') {\n    ERROR('Already exists, Please try with another credential');\n    }\n  }\n};\n\n// get instagram media post\nexport const getInstaMediaPost = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST, payload: true });\n    if (post_data) {\n      var media_arr = [];\n      var user_follower_count = 0;\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          since: post_data.since,\n          until: post_data.until,\n\n        }\n        const response = await axios.post(getInstaUserMediaPost, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            var i = 0;\n            media_arr = response.data.data;\n            var media_insights_arr = [];\n            const followpostdata = {\n              token: userdata.InsightsTokenData.token,\n              account_id: userdata.InsightsUserData.account_id,\n            }\n            const follower_response = await axios.post(getInstaUserFollower, followpostdata);\n            console.log('follower_response', follower_response);\n            if (follower_response.status === 200) {\n              user_follower_count = follower_response.data.followers_count\n              media_insights_arr['follower_count'] = user_follower_count;\n            } else {\n              user_follower_count = 0;\n              media_insights_arr['follower_count'] = user_follower_count;\n            }\n\n            getInsights(media_arr[i]);\n\n            async function getInsights(media_val) {\n\n              if (media_arr.length > i) {\n                var postInsights = {\n                  token: userdata.InsightsTokenData.token,\n                  post_id: media_val.id,\n\n                }\n                const insights_response = await axios.post(getInstaUserMediaInsights, postInsights);\n\n                if (insights_response.status === 200) {\n\n                  media_val['insight_data'] = insights_response.data\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n\n                } else {\n                  media_val['insight_data'] = {}\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n                }\n\n              }\n              if (media_arr.length === media_insights_arr.length) {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS, payload: media_insights_arr });\n              } else {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS, payload: [] });\n              }\n            }\n\n          } else {\n            dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: false });\n\n          }\n        } else {\n          dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n      ERROR('Please try again..');\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n// get instagram top city audience\nexport const getInstaTopCityAudience = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST, payload: true });\n    if (post_data) {\n      //var media_arr = [];\n\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"lifetime\",\n        }\n        const response = await axios.post(InstaTopCityAudience, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            \n            dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS, payload: response.data });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n\nexport const getInstaFollowers = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_FOLLOWERS_REQUEST, payload: true });\n    if (post_data) {\n\n      var userdata = post_data.userData;\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n        }\n        const response = await axios.post(getInstaUserFollower, postdata);\n\n        if (response.status === 200) {\n          console.log('follower_res', response.data);\n          if (response.data) {\n            response.data.type = 'instagram';\n            dispatch({ type: GET_INSTAGRAM_FOLLOWERS_SUCCESS, payload: response.data });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n\n\n// get instagram follower growth\nexport const getFollowersGrowth = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST, payload: true });\n    if (post_data) {\n      //var media_arr = [];\n\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"day\",\n          since : post_data.since,\n          until: post_data.until,\n        }\n        const response = await axios.post(InstaFollowerGrowth, postdata);\n        console.log('followercount---growth',response.data);\n        if (response.status === 200) {\n          if (response.data) {\n            var rescount = 0;\n            if(response.data.data[0]?.values){\n            var followerres = response.data.data[0].values;\n              for (let i = 0; i < followerres.length; i++) {\n                rescount = rescount + followerres[i]['value'];\n              }\n          }\n              \n            dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS, payload: rescount });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}