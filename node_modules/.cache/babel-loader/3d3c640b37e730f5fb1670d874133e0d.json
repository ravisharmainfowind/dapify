{"ast":null,"code":"import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { openDB, deleteDB } from 'idb';\nimport { ErrorFactory, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance } from '@firebase/util';\nimport { _registerComponent, getApp, _getProvider } from '@firebase/app';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nconst ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n/** Key of FCM Payload in Notification's data field. */\n\nconst FCM_MSG = 'FCM_MSG';\nconst CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id'; // Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\n\nconst SDK_PLATFORM_WEB = 3;\nconst EVENT_MESSAGE_DELIVERED = 1;\nvar MessageType$1;\n\n(function (MessageType) {\n  MessageType[MessageType[\"DATA_MESSAGE\"] = 1] = \"DATA_MESSAGE\";\n  MessageType[MessageType[\"DISPLAY_NOTIFICATION\"] = 3] = \"DISPLAY_NOTIFICATION\";\n})(MessageType$1 || (MessageType$1 = {}));\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction arrayToBase64(array) {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\n\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nasync function migrateOldDatabase(senderId) {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await indexedDB.databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails = null;\n  const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, {\n    upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => {\n      var _a;\n\n      if (oldVersion < 2) {\n        // Database too old, skip migration.\n        return;\n      }\n\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n        // Database did not exist. Nothing to do.\n        return;\n      }\n\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n\n      if (!value) {\n        // No entry in the database, nothing to migrate.\n        return;\n      }\n\n      if (oldVersion === 2) {\n        const oldDetails = value;\n\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n          return;\n        }\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n          subscriptionOptions: {\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 3) {\n        const oldDetails = value;\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 4) {\n        const oldDetails = value;\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      }\n    }\n  });\n  db.close(); // Delete all old databases.\n\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  const {\n    subscriptionOptions\n  } = tokenDetails;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nconst DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nasync function dbGet(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);\n\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function dbSet(firebaseDependencies, tokenDetails) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.done;\n  return tokenDetails;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function dbRemove(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\nfunction getKey(_ref) {\n  let {\n    appConfig\n  } = _ref;\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERROR_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"only-available-in-window\"\n  /* AVAILABLE_IN_WINDOW */\n  ]: 'This method is available in a Window context.',\n  [\"only-available-in-sw\"\n  /* AVAILABLE_IN_SW */\n  ]: 'This method is available in a service worker context.',\n  [\"permission-default\"\n  /* PERMISSION_DEFAULT */\n  ]: 'The notification permission was not granted and dismissed instead.',\n  [\"permission-blocked\"\n  /* PERMISSION_BLOCKED */\n  ]: 'The notification permission was not granted and blocked instead.',\n  [\"unsupported-browser\"\n  /* UNSUPPORTED_BROWSER */\n  ]: \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [\"indexed-db-unsupported\"\n  /* INDEXED_DB_UNSUPPORTED */\n  ]: \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [\"failed-service-worker-registration\"\n  /* FAILED_DEFAULT_REGISTRATION */\n  ]: 'We are unable to register the default service worker. {$browserErrorMessage}',\n  [\"token-subscribe-failed\"\n  /* TOKEN_SUBSCRIBE_FAILED */\n  ]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [\"token-subscribe-no-token\"\n  /* TOKEN_SUBSCRIBE_NO_TOKEN */\n  ]: 'FCM returned no token when subscribing the user to push.',\n  [\"token-unsubscribe-failed\"\n  /* TOKEN_UNSUBSCRIBE_FAILED */\n  ]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',\n  [\"token-update-failed\"\n  /* TOKEN_UPDATE_FAILED */\n  ]: 'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [\"token-update-no-token\"\n  /* TOKEN_UPDATE_NO_TOKEN */\n  ]: 'FCM returned no token when updating the user to push.',\n  [\"use-sw-after-get-token\"\n  /* USE_SW_AFTER_GET_TOKEN */\n  ]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',\n  [\"invalid-sw-registration\"\n  /* INVALID_SW_REGISTRATION */\n  ]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [\"invalid-bg-handler\"\n  /* INVALID_BG_HANDLER */\n  ]: 'The input to setBackgroundMessageHandler() must be a function.',\n  [\"invalid-vapid-key\"\n  /* INVALID_VAPID_KEY */\n  ]: 'The public VAPID key must be a string.',\n  [\"use-vapid-key-after-get-token\"\n  /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n  ]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'\n};\nconst ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nasync function requestGetToken(firebaseDependencies, subscriptionOptions) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n\n  try {\n    const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n    /* TOKEN_SUBSCRIBE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n    /* TOKEN_SUBSCRIBE_FAILED */\n    , {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n    /* TOKEN_SUBSCRIBE_NO_TOKEN */\n    );\n  }\n\n  return responseData.token;\n}\n\nasync function requestUpdateToken(firebaseDependencies, tokenDetails) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions);\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-update-failed\"\n    /* TOKEN_UPDATE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-update-failed\"\n    /* TOKEN_UPDATE_FAILED */\n    , {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-update-no-token\"\n    /* TOKEN_UPDATE_NO_TOKEN */\n    );\n  }\n\n  return responseData.token;\n}\n\nasync function requestDeleteToken(firebaseDependencies, token) {\n  const headers = await getHeaders(firebaseDependencies);\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);\n    const responseData = await response.json();\n\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n      /* TOKEN_UNSUBSCRIBE_FAILED */\n      , {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n    /* TOKEN_UNSUBSCRIBE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint(_ref2) {\n  let {\n    projectId\n  } = _ref2;\n  return `${ENDPOINT}/projects/${projectId}/registrations`;\n}\n\nasync function getHeaders(_ref3) {\n  let {\n    appConfig,\n    installations\n  } = _ref3;\n  const authToken = await installations.getToken();\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody(_ref4) {\n  let {\n    p256dh,\n    auth,\n    endpoint,\n    vapidKey\n  } = _ref4;\n  const body = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// UpdateRegistration will be called once every week.\n\n\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nasync function getTokenInternal(messaging) {\n  const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);\n  const subscriptionOptions = {\n    vapidKey: messaging.vapidKey,\n    swScope: messaging.swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n  };\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\n\n\nasync function deleteTokenInternal(messaging) {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n\n  if (tokenDetails) {\n    await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    await dbRemove(messaging.firebaseDependencies);\n  } // Unsubscribe from the push subscription.\n\n\n  const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();\n\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  } // If there's no SW, consider it a success.\n\n\n  return true;\n}\n\nasync function updateToken(messaging, tokenDetails) {\n  try {\n    const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);\n    const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {\n      token: updatedToken,\n      createTime: Date.now()\n    });\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(firebaseDependencies, subscriptionOptions) {\n  const token = await requestGetToken(firebaseDependencies, subscriptionOptions);\n  const tokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nasync function getPushSubscription(swRegistration, vapidKey) {\n  const subscription = await swRegistration.pushManager.getSubscription();\n\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction externalizePayload(internalPayload) {\n  const payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\n\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n  const title = messagePayloadInternal.notification.title;\n\n  if (!!title) {\n    payload.notification.title = title;\n  }\n\n  const body = messagePayloadInternal.notification.body;\n\n  if (!!body) {\n    payload.notification.body = body;\n  }\n\n  const image = messagePayloadInternal.notification.image;\n\n  if (!!image) {\n    payload.notification.image = image;\n  }\n}\n\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data;\n}\n\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  var _a, _b, _c, _d, _e; // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n\n\n  if (!messagePayloadInternal.fcmOptions && !((_a = messagePayloadInternal.notification) === null || _a === void 0 ? void 0 : _a.click_action)) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n  const link = (_c = (_b = messagePayloadInternal.fcmOptions) === null || _b === void 0 ? void 0 : _b.link) !== null && _c !== void 0 ? _c : (_d = messagePayloadInternal.notification) === null || _d === void 0 ? void 0 : _d.click_action;\n\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  } // eslint-disable-next-line camelcase\n\n\n  const analyticsLabel = (_e = messagePayloadInternal.fcmOptions) === null || _e === void 0 ? void 0 : _e.analytics_label;\n\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\n_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n\n_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');\n\nasync function stageLog(messaging, internalPayload) {\n  const fcmEvent = createFcmEvent(internalPayload, await messaging.firebaseDependencies.installations.getId());\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(internalPayload, fid) {\n  var _a, _b;\n\n  const fcmEvent = {};\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType$1.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType$1.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!((_a = internalPayload.fcmOptions) === null || _a === void 0 ? void 0 : _a.analytics_label)) {\n    fcmEvent.analytics_label = (_b = internalPayload.fcmOptions) === null || _b === void 0 ? void 0 : _b.analytics_label;\n  }\n  /* eslint-enable camelcase */\n\n\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(messaging, fcmEvent) {\n  const logEvent = {};\n  /* eslint-disable camelcase */\n\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent); // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nfunction _mergeStrings(s1, s2) {\n  const resultArray = [];\n\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function onSubChange(event, messaging) {\n  var _a, _b;\n\n  const {\n    newSubscription\n  } = event;\n\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n  messaging.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nasync function onPush(event, messaging) {\n  const internalPayload = getMessagePayloadInternal(event);\n\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  } // log to Firelog with user consent\n\n\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  } // foreground handling: eventually passed to onMessage hook\n\n\n  const clientList = await getClientList();\n\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  } // background handling: display if possible and pass to onBackgroundMessage hook\n\n\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nasync function onNotificationClick(event) {\n  var _a, _b;\n\n  const internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  } // Prevent other listeners from receiving the event\n\n\n  event.stopImmediatePropagation();\n  event.notification.close(); // Note clicking on a notification with no link set will focus the Chrome's current tab.\n\n  const link = getLink(internalPayload);\n\n  if (!link) {\n    return;\n  } // FM should only open/focus links from app's origin.\n\n\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link); // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(internalPayload) {\n  const wrappedInternalPayload = Object.assign({}, internalPayload.notification); // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal(_ref5) {\n  let {\n    data\n  } = _ref5;\n\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\n\n\nasync function getWindowClient(url) {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\r\n * otherwise false.\r\n */\n\n\nfunction hasVisibleClients(clientList) {\n  return clientList.some(client => client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which\n  // are always considered visible for some reason.\n  !client.url.startsWith('chrome-extension://'));\n}\n\nfunction sendMessagePayloadInternalToWindows(clientList, internalPayload) {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction showNotification(notificationPayloadInternal) {\n  var _a; // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n\n\n  const {\n    actions\n  } = notificationPayloadInternal;\n  const {\n    maxActions\n  } = Notification;\n\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(`This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`);\n  }\n\n  return self.registration.showNotification(\n  /* title= */\n  (_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);\n}\n\nfunction getLink(payload) {\n  var _a, _b, _c; // eslint-disable-next-line camelcase\n\n\n  const link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  const {\n    options\n  } = app;\n\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass MessagingService {\n  constructor(app, installations, analyticsProvider) {\n    // logging is only done with end user consent. Default to false.\n    this.deliveryMetricsExportedToBigQueryEnabled = false;\n    this.onBackgroundMessageHandler = null;\n    this.onMessageHandler = null;\n    this.logEvents = [];\n    this.isLogServiceStarted = false;\n    const appConfig = extractAppConfig(app);\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete() {\n    return Promise.resolve();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SwMessagingFactory = container => {\n  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n  return messaging;\n};\n/**\r\n * The messaging instance registered in sw is named differently than that of in client. This is\r\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\r\n * `messaging-compat` and component with the same name can only be registered once.\r\n */\n\n\nfunction registerMessagingInSw() {\n  _registerComponent(new Component('messaging-sw', SwMessagingFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks whether all required APIs exist within SW Context\r\n * @returns a Promise that resolves to a boolean.\r\n *\r\n * @public\r\n */\n\n\nasync function isSwSupported() {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return isIndexedDBAvailable() && (await validateIndexedDBOpenable()) && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction onBackgroundMessage$1(messaging, nextOrObserver) {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging.deliveryMetricsExportedToBigQueryEnabled = enable;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Retrieves a Firebase Cloud Messaging instance.\r\n *\r\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\r\n *\r\n * @public\r\n */\n\n\nfunction getMessagingInSw() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(isSupported => {\n    // If `isSwSupported()` resolved, but returned false.\n    if (!isSupported) {\n      throw ERROR_FACTORY.create(\"unsupported-browser\"\n      /* UNSUPPORTED_BROWSER */\n      );\n    }\n  }, _ => {\n    // If `isSwSupported()` rejected.\n    throw ERROR_FACTORY.create(\"indexed-db-unsupported\"\n    /* INDEXED_DB_UNSUPPORTED */\n    );\n  });\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n/**\r\n * Called when a message is received while the app is in the background. An app is considered to be\r\n * in the background if no active window is displayed.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\r\n * message is received and the app is currently in the background.\r\n *\r\n * @returns To stop listening for messages execute this returned function\r\n *\r\n * @public\r\n */\n\n\nfunction onBackgroundMessage(messaging, nextOrObserver) {\n  messaging = getModularInstance(messaging);\n  return onBackgroundMessage$1(messaging, nextOrObserver);\n}\n/**\r\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\r\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\r\n * disable the export at runtime.\r\n *\r\n * @param messaging - The `FirebaseMessaging` instance.\r\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\r\n * BigQuery.\r\n *\r\n * @public\r\n */\n\n\nfunction experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterMessagingInSw();\nexport { experimentalSetDeliveryMetricsExportedToBigQueryEnabled, getMessagingInSw as getMessaging, isSwSupported as isSupported, onBackgroundMessage };","map":{"version":3,"sources":["../src/util/constants.ts","../src/interfaces/internal-message-payload.ts","../src/helpers/array-base64-translator.ts","../src/helpers/migrate-old-database.ts","../src/internals/idb-manager.ts","../src/util/errors.ts","../src/internals/requests.ts","../src/internals/token-manager.ts","../src/helpers/externalizePayload.ts","../src/helpers/is-console-message.ts","../src/helpers/sleep.ts","../src/helpers/logToFirelog.ts","../src/listeners/sw-listeners.ts","../src/helpers/extract-app-config.ts","../src/messaging-service.ts","../src/helpers/register.ts","../src/api/isSupported.ts","../src/api/onBackgroundMessage.ts","../src/api/setDeliveryMetricsExportedToBigQueryEnabled.ts","../src/api.ts","../src/index.sw.ts"],"names":["MessageType","_onBackgroundMessage"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDB, openDB } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, {\n    upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => {\n      if (oldVersion < 2) {\n        // Database too old, skip migration.\n        return;\n      }\n\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n        // Database did not exist. Nothing to do.\n        return;\n      }\n\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n\n      if (!value) {\n        // No entry in the database, nothing to migrate.\n        return;\n      }\n\n      if (oldVersion === 2) {\n        const oldDetails = value as V2TokenDetails;\n\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n          return;\n        }\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime ?? Date.now(),\n          subscriptionOptions: {\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey:\n              typeof oldDetails.vapidKey === 'string'\n                ? oldDetails.vapidKey\n                : arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 3) {\n        const oldDetails = value as V3TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      } else if (oldVersion === 4) {\n        const oldDetails = value as V4TokenDetails;\n\n        tokenDetails = {\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: {\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n          }\n        };\n      }\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, deleteDB, openDB } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\ninterface MessagingDB extends DBSchema {\n  'firebase-messaging-store': {\n    key: string;\n    value: TokenDetails;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<MessagingDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<MessagingDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = (await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key)) as TokenDetails;\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.done;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDB(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n  if (\n    !messagePayloadInternal.fcmOptions &&\n    !messagePayloadInternal.notification?.click_action\n  ) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link =\n    messagePayloadInternal.fcmOptions?.link ??\n    messagePayloadInternal.notification?.click_action;\n\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions?.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG } from '../util/constants';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport {\n  NotificationEvent,\n  PushEvent,\n  PushSubscriptionChangeEvent,\n  ServiceWorkerGlobalScope,\n  WindowClient\n} from '../util/sw-types';\nimport {\n  deleteTokenInternal,\n  getTokenInternal\n} from '../internals/token-manager';\n\nimport { MessagingService } from '../messaging-service';\nimport { dbGet } from '../internals/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\nimport { stageLog } from '../helpers/logToFirelog';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function onSubChange(\n  event: PushSubscriptionChangeEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const { newSubscription } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n\n  messaging.vapidKey =\n    tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nexport async function onPush(\n  event: PushEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      await messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nexport async function onNotificationClick(\n  event: NotificationEvent\n): Promise<void> {\n  const internalPayload: MessagePayloadInternal =\n    event.notification?.data?.[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link);\n\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...(internalPayload.notification as unknown as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> {\n  try {\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n  } catch (e) {\n    return false;\n  }\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onBackgroundMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Messaging } from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function _setDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  (messaging as MessagingService).deliveryMetricsExportedToBigQueryEnabled =\n    enable;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport { Messaging } from './interfaces/public-types';\nimport { registerMessagingInSw } from './helpers/register';\n\nexport * from './interfaces/public-types';\nexport {\n  onBackgroundMessage,\n  getMessagingInSw as getMessaging,\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled\n} from './api';\nexport { isSwSupported as isSupported } from './api/isSupported';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-sw': Messaging;\n  }\n}\n\nregisterMessagingInSw();\n"]},"metadata":{},"sourceType":"module"}