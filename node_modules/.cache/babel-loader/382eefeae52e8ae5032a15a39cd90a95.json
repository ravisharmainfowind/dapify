{"ast":null,"code":"import { POST_USER_NOTIFICATION_REQUEST, GET_USER_NOTIFICATION_SUCCESS, GET_USER_NOTIFICATION_FAILURE, UNREAD_NOTIFICATION_COUNT_REQUEST, UNREAD_NOTIFICATION_COUNT_SUCCESS, UNREAD_NOTIFICATION_COUNT_FAILURE, REMOVE_NOTIFICATION_REQUEST, REMOVE_NOTIFICATION_SUCCESS, REMOVE_NOTIFICATION_FAILURE } from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css';\nimport * as moment from 'moment';\nimport dummy_img from '../../assets/images/dummy_user.png'; // For get user media content \n\nexport const getUserNotification = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_NOTIFICATION_REQUEST,\n      payload: true\n    });\n\n    if (data.user_id) {\n      var notificationPost = [];\n      var notificationarr = [];\n      let query = '';\n      var totalrecord = 0;\n      await firebaseConfig.firestore().collection('notifications').doc(data.user_id).get().then(async querySnapshot => {\n        var notification_obj = querySnapshot.data();\n\n        if (notification_obj) {\n          Object.keys(notification_obj).map(async function (notifyid) {\n            if (notification_obj[notifyid].flag === true) {\n              totalrecord = totalrecord + 1;\n              notification_obj[notifyid].id = notifyid;\n              notificationPost.push(notification_obj[notifyid]);\n            }\n          });\n        }\n\n        function sortByDate(a, b) {\n          if (a.time > b.time) {\n            return -1;\n          }\n\n          if (a.time < b.time) {\n            return 1;\n          }\n\n          return 0;\n        }\n\n        notificationPost.sort(sortByDate);\n        var notifycount = 0;\n\n        for (let j = 0; j < notificationPost.length && j < data.limit; j++) {\n          const subres = await firebaseConfig.firestore().collection(\"users\").doc(notificationPost[j].user_id);\n          subres.get().then(async userdoc => {\n            var username = \"\";\n            var userimage = dummy_img;\n\n            if (!userdoc.exists) {} else {\n              var NotificationReadid = \"\";\n              var NotificationReadStatus = \"\";\n\n              if (userdoc.data().username !== '') {\n                username = userdoc.data().username;\n              }\n\n              if (userdoc.data().avatarURL !== '') {\n                userimage = userdoc.data().avatarURL;\n              }\n\n              notificationPost[j].userimage = userimage;\n              notificationPost[j].username = username;\n              notificationarr.push(notificationPost[j]);\n              NotificationReadid = notificationPost[j].id;\n              NotificationReadStatus = notificationPost[j].status; //Read Notification---------\n\n              var updatedata = {};\n\n              if (NotificationReadStatus === 'unread') {\n                notifycount = notifycount + 1;\n                updatedata[`${NotificationReadid}.status`] = \"read\";\n                await firebaseConfig.firestore().collection('notifications').doc(data.user_id).update(updatedata).then(async () => {}).catch(function (_error) {});\n              }\n\n              if (j <= notificationPost.length - 1 || j <= data.length) {\n                dispatchNotification(notificationarr, data.user_id, notifycount);\n              }\n            }\n          });\n        }\n\n        async function dispatchNotification(notificationres, u_id, notifycount) {\n          const res = await firebaseConfig.firestore().collection(\"users\").doc(u_id);\n          res.get().then(async userdoc => {\n            let notificaton_Count = 0;\n\n            if (!userdoc.exists) {} else {\n              var _userdoc$data;\n\n              if ((_userdoc$data = userdoc.data()) !== null && _userdoc$data !== void 0 && _userdoc$data.Unread_Notification) {\n                notificaton_Count = userdoc.data().Unread_Notification - notifycount;\n              } else {\n                notificaton_Count = 0;\n              }\n\n              await firebaseConfig.firestore().collection('users/').doc(u_id).update({\n                'Unread_Notification': notificaton_Count\n              }).then(async function (docres) {\n                dispatch({\n                  type: UNREAD_NOTIFICATION_COUNT_SUCCESS,\n                  payload: notificaton_Count\n                });\n              }).catch(function (error) {\n                ERROR(error.message);\n                console.log('error recieveeeeeeee', error.message);\n              });\n            }\n          });\n          dispatch({\n            type: GET_USER_NOTIFICATION_SUCCESS,\n            payload: notificationres,\n            notificationTotal: totalrecord\n          });\n        }\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_NOTIFICATION_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_USER_NOTIFICATION_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_NOTIFICATION_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUnreadNotificationCount = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: UNREAD_NOTIFICATION_COUNT_REQUEST,\n        payload: true\n      });\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(data.uid);\n      res.get().then(doc => {\n        if (!doc.exists) {\n          dispatch({\n            type: UNREAD_NOTIFICATION_COUNT_FAILURE,\n            payload: false\n          });\n        } else {\n          const usrUnreadNotfcn = doc.data();\n\n          if (usrUnreadNotfcn.Unread_Notification !== undefined) {\n            console.log('checknotify', usrUnreadNotfcn.Unread_Notification);\n            dispatch({\n              type: UNREAD_NOTIFICATION_COUNT_SUCCESS,\n              payload: usrUnreadNotfcn.Unread_Notification\n            });\n          } else {\n            dispatch({\n              type: UNREAD_NOTIFICATION_COUNT_FAILURE,\n              payload: false\n            });\n          }\n        }\n      }).catch(function (error) {\n        dispatch({\n          type: UNREAD_NOTIFICATION_COUNT_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: UNREAD_NOTIFICATION_COUNT_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: UNREAD_NOTIFICATION_COUNT_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const RemoveNotification = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: REMOVE_NOTIFICATION_REQUEST,\n        payload: true\n      });\n      var updatedata = {};\n      var notifyid = data.notification_id;\n      updatedata[`${notifyid}.flag`] = false;\n      await firebaseConfig.firestore().collection('notifications').doc(data.user_id).update(updatedata).then(function (docres) {\n        Success(\"Deleted successfully\");\n        dispatch({\n          type: REMOVE_NOTIFICATION_SUCCESS,\n          payload: notifyid\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: REMOVE_NOTIFICATION_FAILURE,\n          payload: false\n        });\n        ERROR('Something went wrong');\n      });\n    } else {\n      dispatch({\n        type: REMOVE_NOTIFICATION_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: REMOVE_NOTIFICATION_FAILURE,\n      payload: error\n    });\n  }\n}; //not in use-----------------\n// async function ReadNotification(notification_id,NotificationReadStatus,user_id,dispatch) {\n//   try {\n//     var notificaton_Count =0;\n//     const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n//     res.get().then(async (userdoc) => {\n//       if (!userdoc.exists) {\n//       }\n//       else {\n//         console.log('usrdetailssss',userdoc.data());\n//         console.log('checkcountuserrrr',userdoc.data().Unread_Notification);\n//         if(userdoc.data()?.Unread_Notification){\n//           notificaton_Count = userdoc.data().Unread_Notification -1;\n//         }else{\n//           notificaton_Count = 0;\n//         }\n//         console.log('checkcount',notificaton_Count);\n//         var updatedata ={};\n//         var notifyid =notification_id;\n//         var notifyStatus = NotificationReadStatus;\n//         console.log('notification_id=====',notification_id);\n//         console.log('Unread_Notification=====',userdoc.data()?.Unread_Notification);\n//         console.log('notifyStatus==========',notifyStatus);\n//         console.log('notificaton_Count==========',notificaton_Count);\n//         if(notifyStatus === 'unread'){\n//           updatedata[`${notifyid}.status`] = \"read\";\n//           await firebaseConfig.firestore()\n//             .collection('notifications')\n//             .doc(user_id).update(updatedata).then(async function(docres) {\n//               await UpdateNotificationCount(user_id,notificaton_Count);\n//               // await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//               //   'Unread_Notification': notificaton_Count,\n//               // }).then(function (docres) {\n//               //   // const data = {\n//               //   //   uid : user_id,\n//               //   // }\n//               //   //await getUnreadNotificationCount(data);\n//               //   console.log('hellooooooooooooooo updateeeeeeeee');\n//               //   //dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: notificaton_Count });\n//               // }).catch(function (error) {\n//               //   ERROR(error.message);\n//               //   console.log('error recieveeeeeeee',error.message);\n//               // });\n//           }).catch(function (error) {\n//           })\n//         }\n//       }\n//     })\n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }\n// async function UpdateNotificationCount(user_id,notificaton_Count) {\n//   try {\n//       await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//         'Unread_Notification': notificaton_Count,\n//       }).then(function (docres) {\n//         console.log('hellooooooooooooooo updateeeeeeeee');\n//       }).catch(function (error) {\n//         ERROR(error.message);\n//         console.log('error recieveeeeeeee',error.message);\n//       }); \n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }","map":{"version":3,"names":["POST_USER_NOTIFICATION_REQUEST","GET_USER_NOTIFICATION_SUCCESS","GET_USER_NOTIFICATION_FAILURE","UNREAD_NOTIFICATION_COUNT_REQUEST","UNREAD_NOTIFICATION_COUNT_SUCCESS","UNREAD_NOTIFICATION_COUNT_FAILURE","REMOVE_NOTIFICATION_REQUEST","REMOVE_NOTIFICATION_SUCCESS","REMOVE_NOTIFICATION_FAILURE","firebaseConfig","ERROR","Success","moment","dummy_img","getUserNotification","data","dispatch","type","payload","user_id","notificationPost","notificationarr","query","totalrecord","firestore","collection","doc","get","then","querySnapshot","notification_obj","Object","keys","map","notifyid","flag","id","push","sortByDate","a","b","time","sort","notifycount","j","length","limit","subres","userdoc","username","userimage","exists","NotificationReadid","NotificationReadStatus","avatarURL","status","updatedata","update","catch","_error","dispatchNotification","notificationres","u_id","res","notificaton_Count","Unread_Notification","docres","error","message","console","log","notificationTotal","getUnreadNotificationCount","uid","usrUnreadNotfcn","undefined","RemoveNotification","notification_id"],"sources":["/home/asus/dapify/src/Redux/actions/notification-actions.js"],"sourcesContent":["import {\n  POST_USER_NOTIFICATION_REQUEST,GET_USER_NOTIFICATION_SUCCESS,GET_USER_NOTIFICATION_FAILURE,\n  UNREAD_NOTIFICATION_COUNT_REQUEST, UNREAD_NOTIFICATION_COUNT_SUCCESS, UNREAD_NOTIFICATION_COUNT_FAILURE,\n  REMOVE_NOTIFICATION_REQUEST,REMOVE_NOTIFICATION_SUCCESS,REMOVE_NOTIFICATION_FAILURE,\n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport dummy_img from '../../assets/images/dummy_user.png';\n\n// For get user media content \n\nexport const getUserNotification = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_NOTIFICATION_REQUEST, payload: true });\n    if (data.user_id) {\n\n      var notificationPost = [];\n      var notificationarr = [];\n      let query = '';\n      var totalrecord = 0;\n      \n      await firebaseConfig.firestore().collection('notifications').doc(data.user_id).get()\n      .then(async querySnapshot => {\n          var notification_obj = querySnapshot.data();\n\n          if(notification_obj)\n          {\n            Object.keys(notification_obj).map(async function(notifyid){ \n              if(notification_obj[notifyid].flag === true){\n                totalrecord =totalrecord +1;\n                notification_obj[notifyid].id = notifyid;\n                notificationPost.push(notification_obj[notifyid]); \n              }\n             \n            })\n          }\n          function sortByDate( a, b ) {\n            if ( a.time > b.time ){\n              return -1;\n            }\n            if ( a.time < b.time ){\n              return 1;\n            }\n            return 0;\n          }\n          notificationPost.sort(sortByDate);\n\n\n        var notifycount = 0;\n        for (let j = 0; j < notificationPost.length && j < data.limit; j++) {\n         \n          const subres = await firebaseConfig.firestore().collection(\"users\").doc(notificationPost[j].user_id);\n            subres.get().then(async (userdoc) => {\n              var username= \"\";\n              var userimage = dummy_img;\n              if (!userdoc.exists) {\n              } else {\n               \n                var NotificationReadid=  \"\";\n                var NotificationReadStatus=  \"\";\n                if(userdoc.data().username !== ''){\n                  username = userdoc.data().username;\n                }\n                if(userdoc.data().avatarURL !== ''){\n                  userimage = userdoc.data().avatarURL;\n                }\n\n                \n                notificationPost[j].userimage = userimage;\n                notificationPost[j].username = username;\n                \n                notificationarr.push(notificationPost[j]);\n               \n                NotificationReadid= notificationPost[j].id;\n                NotificationReadStatus= notificationPost[j].status;\n\n                //Read Notification---------\n                var updatedata ={};\n                \n                if(NotificationReadStatus === 'unread'){\n                  notifycount = notifycount+1;\n                  \n                  updatedata[`${NotificationReadid}.status`] = \"read\";\n                  await firebaseConfig.firestore()\n                    .collection('notifications')\n                    .doc(data.user_id).update(updatedata).then(async () => {    \n                    \n                  }).catch(function (_error) {\n                  \n                  })\n                }\n                if(j<= notificationPost.length -1 || j <= data.length){\n                  dispatchNotification(notificationarr,data.user_id,notifycount);\n                }\n              }\n            })\n          }\n\n          async function dispatchNotification(notificationres,u_id,notifycount){\n            const res = await firebaseConfig.firestore().collection(\"users\").doc(u_id);\n            res.get().then(async (userdoc) => {\n              let notificaton_Count =0;\n              if (!userdoc.exists) {\n              }\n              else {\n                  if(userdoc.data()?.Unread_Notification){\n                    notificaton_Count = userdoc.data().Unread_Notification -notifycount;\n                  }else{\n                    notificaton_Count = 0;\n                  }\n                  await firebaseConfig.firestore().collection('users/').doc(u_id).update({\n                    'Unread_Notification': notificaton_Count,\n                  }).then(async function (docres) {\n\n                    dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: notificaton_Count });\n                  \n                  }).catch(function (error) {\n                    ERROR(error.message);\n                    console.log('error recieveeeeeeee',error.message);\n                  });\n                }\n            })\n\n            dispatch({ type: GET_USER_NOTIFICATION_SUCCESS, payload: notificationres, notificationTotal: totalrecord });\n          }\n          \n      }).catch(function (error) {\n\n        dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: false });\n      })\n        \n    } else {\n      dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: error });\n  }\n};\n\nexport const getUnreadNotificationCount = (data) => async dispatch => {\n  try {\n    if (data) {\n      dispatch({ type: UNREAD_NOTIFICATION_COUNT_REQUEST, payload: true });\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(data.uid);\n      res.get().then((doc) => {\n        \n        if (!doc.exists) {\n        \n          dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n        }\n        else {\n          const usrUnreadNotfcn = doc.data();\n          if (usrUnreadNotfcn.Unread_Notification !== undefined) {\n            console.log('checknotify',usrUnreadNotfcn.Unread_Notification);\n            dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: usrUnreadNotfcn.Unread_Notification });\n          }\n         else {\n\n            dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n\n          }\n        }\n      }).catch(function (error) {\n        dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: error });\n  }\n};\n\nexport const RemoveNotification = (data) => async dispatch => {\n  try {\n\n    if (data) {\n      dispatch({ type: REMOVE_NOTIFICATION_REQUEST, payload: true });\n      var updatedata ={};\n      var notifyid =data.notification_id;\n     \n      updatedata[`${notifyid}.flag`] = false;\n    \n      await firebaseConfig.firestore()\n        .collection('notifications')\n        .doc(data.user_id).update(updatedata).then(function (docres) {\n        Success(\"Deleted successfully\");\n        dispatch({ type: REMOVE_NOTIFICATION_SUCCESS, payload: notifyid });\n        \n      }).catch(function (error) {\n       \n        dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: false });\n        ERROR('Something went wrong');\n      })\n    } else {\n      dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: error });\n  }\n};\n\n//not in use-----------------\n// async function ReadNotification(notification_id,NotificationReadStatus,user_id,dispatch) {\n//   try {\n//     var notificaton_Count =0;\n//     const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n//     res.get().then(async (userdoc) => {\n     \n//       if (!userdoc.exists) {\n//       }\n//       else {\n//         console.log('usrdetailssss',userdoc.data());\n//         console.log('checkcountuserrrr',userdoc.data().Unread_Notification);\n//         if(userdoc.data()?.Unread_Notification){\n//           notificaton_Count = userdoc.data().Unread_Notification -1;\n//         }else{\n//           notificaton_Count = 0;\n//         }\n//         console.log('checkcount',notificaton_Count);\n//         var updatedata ={};\n//         var notifyid =notification_id;\n//         var notifyStatus = NotificationReadStatus;\n//         console.log('notification_id=====',notification_id);\n//         console.log('Unread_Notification=====',userdoc.data()?.Unread_Notification);\n//         console.log('notifyStatus==========',notifyStatus);\n//         console.log('notificaton_Count==========',notificaton_Count);\n//         if(notifyStatus === 'unread'){\n\n         \n//           updatedata[`${notifyid}.status`] = \"read\";\n//           await firebaseConfig.firestore()\n//             .collection('notifications')\n//             .doc(user_id).update(updatedata).then(async function(docres) {\n\n//               await UpdateNotificationCount(user_id,notificaton_Count);\n//               // await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//               //   'Unread_Notification': notificaton_Count,\n//               // }).then(function (docres) {\n//               //   // const data = {\n//               //   //   uid : user_id,\n//               //   // }\n//               //   //await getUnreadNotificationCount(data);\n//               //   console.log('hellooooooooooooooo updateeeeeeeee');\n//               //   //dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: notificaton_Count });\n               \n//               // }).catch(function (error) {\n//               //   ERROR(error.message);\n//               //   console.log('error recieveeeeeeee',error.message);\n      \n//               // });\n//           }).catch(function (error) {\n          \n//           })\n//         }\n        \n//       }\n//     })\n    \n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }\n\n\n// async function UpdateNotificationCount(user_id,notificaton_Count) {\n//   try {\n \n//       await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//         'Unread_Notification': notificaton_Count,\n//       }).then(function (docres) {\n        \n//         console.log('hellooooooooooooooo updateeeeeeeee');\n      \n        \n//       }).catch(function (error) {\n//         ERROR(error.message);\n//         console.log('error recieveeeeeeee',error.message);\n\n//       }); \n\n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}