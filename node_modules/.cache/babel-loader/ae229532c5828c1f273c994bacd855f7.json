{"ast":null,"code":"import { POST_REGISTER_REQUEST, GET_REGISTER_SUCCESS, GET_REGISTER_FAILURE, POST_LOGIN_REQUEST, GET_LOGIN_SUCCESS, GET_LOGIN_FAILURE, POST_LOG_OUT_REQUEST, GET_LOG_OUT_SUCCESS, GET_LOG_OUT_FAILURE, POST_USER_AUTH_REQUEST, GET_USER_AUTH_SUCCESS, GET_USER_AUTH_FAILURE, POST_USER_PROFILE_BY_ID_REQUEST, GET_USER_PROFILE_BY_ID_SUCCESS, GET_USER_PROFILE_BY_ID_FAILURE, POST_OTHER_USER_PROFILE_BY_ID_REQUEST, GET_OTHER_USER_PROFILE_BY_ID_SUCCESS, GET_OTHER_USER_PROFILE_BY_ID_FAILURE, POST_FORGET_PASSWORD_REQUEST, GET_FORGET_PASSWORD_SUCCESS, GET_FORGET_PASSWORD_FAILURE, POST_UPDATE_PROFILE_IMAGE_REQUEST, GET_UPDATE_PROFILE_IMAGE_SUCCESS, GET_UPDATE_PROFILE_IMAGE_FAILURE, POST_UPDATE_PROFILE_REQUEST, GET_UPDATE_PROFILE_SUCCESS, GET_UPDATE_PROFILE_FAILURE, POST_CHANGE_PASSWORD_REQUEST, GET_CHANGE_PASSWORD_SUCCESS, GET_CHANGE_PASSWORD_FAILURE, POST_USER_SUBSCRIPTION_REQUEST, GET_USER_SUBSCRIPTION_SUCCESS, GET_USER_SUBSCRIPTION_FAILURE, POST_DISABLE_USER_REQUEST, GET_DISABLE_USER_SUCCESS, GET_DISABLE_USER_FAILURE //POST_UPDATE_LINK_THUMBNAIL_IMAGE_REQUEST, GET_UPDATE_LINK_THUMBNAIL_IMAGE_SUCCESS, GET_UPDATE_LINK_THUMBNAIL_IMAGE_FAILURE,\n} from './type';\nimport { DISABLE_USER, LongLiveAccessToken, InstagramBusinessAccount } from './api_url';\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\"; //import { toast } from \"react-toastify\";\n\nimport { googleProvider, facebookProvider, auth } from \"../auth-service\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css';\nimport * as moment from 'moment';\nimport { Redirect } from 'react-router-dom'; // For firebase registration \n\nexport const register = (data, history) => async dispatch => {\n  try {\n    // const token = firebaseConfig.messaging();\n    dispatch({\n      type: POST_REGISTER_REQUEST,\n      payload: true\n    }); // For username unique check \n    //  const uniquecheck = await isUsernameUnique('username', data.username, 'users');\n    // if (uniquecheck) {\n    // For firebase authentication (signup) \n\n    const response = await auth.createUserWithEmailAndPassword(data.email, data.password);\n\n    if (response.user) {\n      // response.user.sendEmailVerification().then(() => {\n      dispatch({\n        type: GET_REGISTER_SUCCESS,\n        payload: response.user.toJSON()\n      });\n      const user_data = response.user.toJSON(); // For user other details (firebase collection) \n\n      firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n        createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n        uid: user_data.uid,\n        username: data.username,\n        dob: data.dob,\n        // user_type: data.user_type,\n        email: data.email,\n        privacy_policy: data.privacy_policy,\n        terms_condition: data.terms_condition,\n        avatarURL: '',\n        slug_name: data.username.toLowerCase(),\n        provider_type: 'normal',\n        user_active: true\n      }).then(() => {\n        // For user profile image (firebase storage) \n        imageUpload(data.user_image, user_data.uid, 'avatars/', 'users', 'avatarURL'); // firebaseConfig.firestore().collection('users').doc(response.user.uid).collection('device_tokens').doc(response.user+'_1').set({\n        //   name: 'test',\n        // })\n\n        Success(\"Registration successful. Check your emails for a confirmation email\");\n        history.push(\"/\");\n      }).catch(function (error) {\n        dispatch({\n          type: GET_REGISTER_FAILURE,\n          payload: error\n        });\n        ERROR(error.message);\n      }); // }).catch(function (error) {\n      //   dispatch({ type: GET_REGISTER_FAILURE, payload: error });\n      //   ERROR(error.message);\n      // })\n    } else {\n      dispatch({\n        type: GET_REGISTER_FAILURE,\n        payload: false\n      });\n      ERROR(\"Registration failed\");\n    } // } else {\n    //   console.log('not unique');\n    //   dispatch({ type: GET_REGISTER_FAILURE, payload: false });\n    //   ERROR(\"User name is already taken\");\n    // }\n\n  } catch (error) {\n    dispatch({\n      type: GET_REGISTER_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message); //throw error;\n  }\n};\n\nasync function UserToken(uid, type) {\n  const tokenres = firebaseConfig.messaging();\n  console.log('tokenres', tokenres);\n  await tokenres.getToken({\n    vapidKey: 'BMojzVLMq7lcRZRFLrhhDu03Pz1nvxuA8g5BtOoKwssL2Rt2LcjSoBTPeflpQceuQYc7AQGIup_FksjMe_ei-Q4'\n  }).then(function (refreshedToken) {\n    if (refreshedToken) {\n      if (type === 'login') {\n        const rescheck = firebaseConfig.firestore().collection('users/').where('Notification_tokens', 'array-contains', refreshedToken).get().then(snapshot => {\n          snapshot.forEach(async totalDoc => {\n            console.log('totalDoc', totalDoc.data());\n\n            if (totalDoc.data().uid !== uid) {\n              const upnotifydata = {\n                Notification_tokens: []\n              };\n              firebaseConfig.firestore().collection('users/').doc(totalDoc.data().uid).update(upnotifydata).then(function (docres) {}).catch(function (error) {\n                // ERROR(error.message);\n                console.log('token error', error);\n              });\n            } // console.log('westCoastCities',totalDoc.data());\n\n          });\n        });\n        console.log('tokennnnnn');\n        const notifydata = {\n          Notification_tokens: [refreshedToken]\n        };\n        firebaseConfig.firestore().collection('users/').doc(uid).update(notifydata).then(function (docres) {}).catch(function (error) {// ERROR(error.message);\n        }); // firebaseConfig.firestore().collection('users/').doc(uid).update({\n        //   Notification_tokens: firebaseConfig.firestore.FieldValue.arrayUnion(refreshedToken),\n        // }).then(function (docres) {\n        //   console.log('tokkkkeeennn', refreshedToken);\n        // }).catch(function (error) {\n        //  // ERROR(error.message);\n        // });\n      }\n\n      if (type === 'logout') {\n        const upnotifydata = {\n          Notification_tokens: []\n        };\n        firebaseConfig.firestore().collection('users/').doc(uid).update(upnotifydata).then(function (docres) {\n          console.log('tokkkkeeennn', refreshedToken);\n        }).catch(function (error) {\n          // ERROR(error.message);\n          console.log('token error', error);\n        });\n      } // if (type === 'logout') {\n      //   firebaseConfig.firestore().collection('users/').doc(uid).update({\n      //     Notification_tokens: firebaseConfig.firestore.FieldValue.arrayRemove(refreshedToken),\n      //   }).then(function (docres) {\n      //     console.log('tokkkkeeennn', refreshedToken);\n      //   }).catch(function (error) {\n      //     // ERROR(error.message);\n      //   });\n      // }\n\n    }\n  }).catch(function (error) {// ERROR(error.message);\n  });\n}\n\n_c = UserToken;\n\nasync function getInsightToken(uid, token) {\n  console.log('instatoken', token);\n  const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n  res.get().then(async doc => {\n    if (!doc.exists) {\n      console.log('nodata');\n    } else {\n      const udata = doc.data();\n\n      if (udata.InsightsTokenData) {\n        var newDate = new Date();\n        var newDateCheck = moment(newDate).format('MM/DD/YYYY HH:mm:ss');\n        console.log('instadate', udata.InsightsTokenData.date);\n        console.log('newDateCheck', newDateCheck);\n\n        if (udata.InsightsTokenData.date > newDateCheck) {\n          console.log('true');\n          return true;\n        } else {\n          const data = {\n            token: token\n          };\n          console.log('tokennnndata', data);\n          const response = await axios.post(LongLiveAccessToken, data);\n          console.log('insresponse', response);\n\n          if (response.status === 200) {\n            var _response$data;\n\n            if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.access_token) {\n              const expiredate = new Date();\n              expiredate.setDate(expiredate.getDate() + 59);\n              var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss');\n              const accData = {\n                token: response.data.access_token\n              };\n              console.log('accData', accData);\n              const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n              console.log('Accountresponse', Accountresponse);\n\n              if (Accountresponse.status === 200) {\n                console.log('checkoutaccountresss1', Accountresponse.data.data);\n\n                if (Accountresponse.data.data.length !== 0) {\n                  if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                    const Tokendata = {\n                      'InsightsTokenData': {\n                        'token': response.data.access_token,\n                        'date': newexpiredate\n                      },\n                      'InsightsUserData': {\n                        'username': Accountresponse.data.data[0].instagram_business_account.username,\n                        'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                        'name': Accountresponse.data.data[0].name,\n                        'id': Accountresponse.data.data[0].id\n                      }\n                    };\n                    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {}).catch(function (error) {});\n                    console.log('ressssss', response);\n                  } else {\n                    ERROR(\"Instagram business account not connected.\");\n                  }\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {}\n            }\n          }\n        }\n      } else {\n        const data = {\n          token: token\n        };\n        console.log('tokennnndata22', data);\n        const response = await axios.post(LongLiveAccessToken, data);\n        console.log('insresponse', response);\n\n        if (response.status === 200) {\n          var _response$data2;\n\n          if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate1 = moment(expiredate).format('MM/DD/YYYY HH:mm:ss');\n            const accData = {\n              token: response.data.access_token\n            };\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n\n            if (Accountresponse.status === 200) {\n              console.log('checkoutaccountresss1', Accountresponse.data.data);\n\n              if (Accountresponse.data.data.length !== 0) {\n                if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                  const Tokendata = {\n                    'InsightsTokenData': {\n                      'token': response.data.access_token,\n                      'date': newexpiredate1\n                    },\n                    'InsightsUserData': {\n                      'username': Accountresponse.data.data[0].instagram_business_account.username,\n                      'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                      'name': Accountresponse.data.data[0].name,\n                      'id': Accountresponse.data.data[0].id\n                    }\n                  };\n                  const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {}).catch(function (error) {});\n                  console.log('ressssss', response);\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {\n                ERROR(\"Instagram business account not connected.\");\n              }\n            } else {}\n          }\n        }\n      }\n    }\n  });\n} // For firebase login \n\n\nexport const login = (email, password, history, profile_url) => async dispatch => {\n  console.log('login history', history);\n\n  try {\n    dispatch({\n      type: POST_LOGIN_REQUEST,\n      payload: true\n    });\n    const response = await auth.signInWithEmailAndPassword(email, password);\n\n    if (response.user) {\n      console.log('rs-ty----------------', response.user);\n\n      if (response.user.emailVerified === true) {\n        await UserToken(response.user.uid, 'login');\n\n        if (profile_url !== '') {\n          dispatch({\n            type: GET_LOGIN_SUCCESS,\n            payload: response.user.toJSON()\n          });\n          window.location = window.location.origin + profile_url;\n        } else {\n          dispatch({\n            type: GET_LOGIN_SUCCESS,\n            payload: response.user.toJSON()\n          });\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", response.user.uid);\n          history.push(\"/addContent\");\n        }\n      } else {\n        dispatch({\n          type: GET_LOGIN_FAILURE,\n          payload: \"Please verify your email, Check your emails for a confirmation email\"\n        });\n        ERROR(\"Please verify your email, Check your emails for a confirmation email\"); // response.user.sendEmailVerification()\n        // .then(function(response) {\n        //   dispatch({ type: GET_LOGIN_FAILURE, payload: \"Please verify your email, Check your emails for a confirmation email\" });\n        //   ERROR(\"Please verify your email, Check your emails for a confirmation email\");\n        // })\n        // .catch(function (error) {\n        //   ERROR(error.message);\n        // });\n      }\n    } else {\n      dispatch({\n        type: GET_LOGIN_FAILURE,\n        payload: false\n      });\n      ERROR(\"Invalid email and password\");\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_LOGIN_FAILURE,\n      payload: error.message\n    });\n    ERROR(\"Invalid email and password\");\n    console.log('login errorrrr', error.message); //throw error;\n  }\n}; // Social login.\n\nexport const socialLogin = (data, history, profile_url) => async dispatch => {\n  try {\n    var provider_type = '';\n    var uname = '';\n\n    if (data === 'google') {\n      provider_type = googleProvider;\n    } else if (data === 'facebook') {\n      provider_type = facebookProvider;\n    }\n\n    dispatch({\n      type: POST_LOGIN_REQUEST,\n      payload: true\n    });\n    const response = await auth.signInWithPopup(provider_type);\n    console.log('rs-ty----------------', response.user);\n    console.log('fbresp', response);\n\n    if (response.user) {\n      console.log('social login response', response);\n      console.log('accesstokennnn', response.credential.accessToken);\n      const user_data = response.user.toJSON();\n      console.log('myuserrr', user_data);\n\n      if (user_data.displayName !== '') {\n        uname = user_data.displayName;\n      }\n\n      await UserToken(response.user.uid, 'login');\n      dispatch({\n        type: GET_LOGIN_SUCCESS,\n        payload: response.user.toJSON()\n      });\n      const userexist = firebaseConfig.firestore().collection('users').doc(user_data.uid);\n      userexist.get().then(async doc => {\n        if (!doc.exists) {\n          // For user other details (firebase collection) \n          firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n            createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n            uid: user_data.uid,\n            // email: user_data.providerData[0].email,\n            email: user_data.email,\n            provider_type: data,\n            username: uname,\n            slug_name: uname.toLowerCase(),\n            avatarURL: '',\n            user_active: true\n          }).then(async function () {\n            if (data === \"facebook\") {\n              if (response !== null && response !== void 0 && response.credential.accessToken) {\n                await getInsightToken(response.user.uid, response.credential.accessToken);\n              }\n            }\n          }).catch(function (error) {});\n        } else {\n          if (data === \"facebook\") {\n            if (response !== null && response !== void 0 && response.credential.accessToken) {\n              await getInsightToken(response.user.uid, response.credential.accessToken);\n            }\n          }\n        }\n      });\n\n      if (profile_url !== '') {\n        window.location = window.location.origin + profile_url;\n      } else {\n        console.log('checkkkkkkk', history);\n        history.push(\"/addContent\");\n      }\n    } else {\n      dispatch({\n        type: GET_LOGIN_FAILURE,\n        payload: false\n      });\n      ERROR(\"Invalid email and password\");\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_LOGIN_FAILURE,\n      payload: error\n    });\n    console.log('sociallogin', error.message); //ERROR(error.message);\n  }\n}; // For firebase logout \n\nexport const logout = history => async dispatch => {\n  try {\n    dispatch({\n      type: POST_LOG_OUT_REQUEST,\n      payload: true\n    });\n    await UserToken(auth.currentUser.uid, 'logout');\n    await auth.signOut();\n    dispatch({\n      type: GET_LOG_OUT_SUCCESS,\n      payload: true\n    });\n    history.push('/');\n  } catch (error) {\n    dispatch({\n      type: GET_LOG_OUT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message); // throw error;\n  }\n}; // For checking user login \n\nexport const fetchUser = () => async dispatch => {\n  console.log('fetch user----');\n\n  try {\n    dispatch({\n      type: POST_USER_AUTH_REQUEST,\n      payload: true\n    });\n    await auth.onAuthStateChanged(currentUser => {\n      console.log('checkkkkkcurrent', currentUser);\n\n      if (currentUser) {\n        console.log('-----igi', currentUser.providerData[0].emailVerified);\n\n        if (currentUser.emailVerified === true) {\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", currentUser.uid);\n          dispatch({\n            type: GET_USER_AUTH_SUCCESS,\n            payload: currentUser.toJSON()\n          });\n        } else {\n          if (currentUser.providerData[0].providerId === 'facebook.com') {\n            localStorage.setItem(\"isAuthenticated\", true);\n            localStorage.setItem(\"user_id\", currentUser.uid);\n            dispatch({\n              type: GET_USER_AUTH_SUCCESS,\n              payload: currentUser.toJSON()\n            });\n          } else {\n            currentUser.sendEmailVerification();\n            localStorage.removeItem(\"isAuthenticated\");\n            localStorage.removeItem(\"user_id\");\n            dispatch({\n              type: GET_USER_AUTH_FAILURE,\n              currentUser: null\n            });\n          }\n        }\n      } else {\n        localStorage.removeItem(\"isAuthenticated\");\n        localStorage.removeItem(\"user_id\");\n        dispatch({\n          type: GET_USER_AUTH_FAILURE,\n          currentUser: null\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_USER_AUTH_FAILURE,\n      payload: error.message\n    }); //throw error;\n  }\n}; // For get user collection data \n\nexport const getUserProfileById = userid => async dispatch => {\n  try {\n    console.log('userid', userid);\n    dispatch({\n      type: POST_USER_PROFILE_BY_ID_REQUEST,\n      payload: true\n    }); //await auth.onAuthStateChanged((currentUser) => {\n\n    if (userid) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then(doc => {\n        if (!doc.exists) {\n          dispatch({\n            type: GET_USER_PROFILE_BY_ID_FAILURE,\n            payload: false\n          });\n        } else {\n          dispatch({\n            type: GET_USER_PROFILE_BY_ID_SUCCESS,\n            payload: doc.data()\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_USER_PROFILE_BY_ID_FAILURE,\n        payload: false\n      });\n    } //  })\n\n  } catch (error) {\n    dispatch({\n      type: GET_USER_PROFILE_BY_ID_FAILURE,\n      payload: error\n    });\n  }\n}; // For unique check\n\nasync function isUsernameUnique(field_name, value, collection_name) {\n  try {\n    const nameDoc = await firebaseConfig.firestore().collection(collection_name).where(field_name, \"==\", value).get().then(snapshot => {\n      if (snapshot.empty) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return nameDoc;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} //For forgot password\n\n\nexport const forgotPassword = (email, history) => dispatch => {\n  try {\n    dispatch({\n      type: POST_FORGET_PASSWORD_REQUEST,\n      payload: true\n    });\n    const response = auth.sendPasswordResetEmail(email).then(function () {\n      dispatch({\n        type: GET_FORGET_PASSWORD_SUCCESS,\n        payload: response.data\n      });\n      Success(\"Email sent\");\n      history.push('/');\n    }).catch(function (error) {\n      dispatch({\n        type: GET_FORGET_PASSWORD_FAILURE,\n        payload: error\n      });\n      ERROR(error.message);\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_FORGET_PASSWORD_FAILURE,\n      payload: error\n    });\n    ERROR(error.message); //throw error;\n  }\n}; // Update profile image.\n\nexport const updateUserProfileOrCoverImage = (data, history) => async dispatch => {\n  try {\n    console.log('all history', history);\n    dispatch({\n      type: POST_UPDATE_PROFILE_IMAGE_REQUEST,\n      payload: true\n    });\n    const uid = localStorage.getItem(\"user_id\");\n\n    if (uid) {\n      if (data.type === \"user image\") {\n        const response = imageUpload(data.image, uid, 'avatars/', 'users', 'avatarURL').then(function () {\n          dispatch({\n            type: GET_UPDATE_PROFILE_IMAGE_SUCCESS,\n            payload: data\n          });\n          Success(\"Profile image successfully updated\"); // history.push('/settings');\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({\n            type: GET_UPDATE_PROFILE_IMAGE_FAILURE,\n            payload: error.message\n          });\n        });\n      } else {\n        const response = imageUpload(data.image, uid, 'covers/', 'users', 'coverURL').then(function () {\n          dispatch({\n            type: GET_UPDATE_PROFILE_IMAGE_SUCCESS,\n            payload: data\n          });\n          Success(\"Cover image successfully updated\"); // history.push('/settings');\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({\n            type: GET_UPDATE_PROFILE_IMAGE_FAILURE,\n            payload: error.message\n          });\n        });\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_UPDATE_PROFILE_IMAGE_FAILURE,\n      payload: error\n    });\n  }\n};\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname) {\n  try {\n    // For user profile image (firebase storage) \n    if (image !== null) {\n      // const img_ext = image.type.split('/').pop();\n      // const imagename = id + '.'+img_ext;\n      const imagename = id + '.png';\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n        data.ref.getDownloadURL().then(url => {\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url\n          });\n        });\n        return true;\n      });\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} //update user info\n\n\nexport const updateUserProfile = data => async dispatch => {\n  try {\n    console.log('infodata', data);\n    var postdata = {};\n    const uid = localStorage.getItem(\"user_id\");\n    dispatch({\n      type: POST_UPDATE_PROFILE_REQUEST,\n      payload: true\n    });\n\n    if (data.update_type === \"info\") {\n      postdata = {\n        username: data.username,\n        dob: data.dob,\n        //user_type: data.user_type,\n        slug_name: data.username.toLowerCase()\n      };\n    } else if (data.update_type === \"bio\") {\n      var bioval = data.bio.replace(/\\n/g, \"\\\\n\");\n      postdata = {\n        bio: bioval\n      };\n    } else if (data.update_type === \"social_links\") {\n      postdata = {\n        'social_links': {\n          'facebook': data.facebook,\n          'instagram': data.instagram,\n          'tiktok': data.tiktok,\n          'twitter': data.twitter,\n          'youtube': data.youtube\n        }\n      };\n    } else if (data.update_type === \"links\") {\n      const listen_link = data.listen_links;\n\n      if (listen_link !== '') {\n        postdata = {\n          'listen_now_link': listen_link,\n          'links': data.links\n        };\n      } else {\n        postdata = {\n          'links': data.links\n        };\n      }\n    }\n\n    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(postdata).then(function (docres) {\n      dispatch({\n        type: GET_UPDATE_PROFILE_SUCCESS,\n        payload: true\n      });\n      Success('Updated Successfully');\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({\n        type: GET_UPDATE_PROFILE_FAILURE,\n        payload: error\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_UPDATE_PROFILE_FAILURE,\n      payload: error\n    });\n  }\n}; //Change Password\n//  export const changePassword = (data) => async dispatch => {\n//   try {\n//     var users = auth.currentUser;\n//     dispatch({ type: POST_CHANGE_PASSWORD_REQUEST, payload: true });\n//     await users.updatePassword(data.new_password).then(function() {\n//         Success('Successfully changed password');\n//         dispatch({ type: GET_CHANGE_PASSWORD_SUCCESS, payload: true });\n//      }).catch(function(error) {\n//         ERROR(error.message);\n//         console.log('qqqfb change pass',error);\n//         dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//      });\n//   } catch (error) {\n//     ERROR(error.message);\n//     console.log('fb change pass',error);\n//     dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//   }\n// };\n\nexport const changePassword = data => async dispatch => {\n  try {\n    var users = auth.currentUser;\n    dispatch({\n      type: POST_CHANGE_PASSWORD_REQUEST,\n      payload: true\n    });\n    await auth.signInWithEmailAndPassword(users.email, data.password).then(function (user) {\n      users.updatePassword(data.new_password).then(function () {\n        Success('Successfully changed password');\n        dispatch({\n          type: GET_CHANGE_PASSWORD_SUCCESS,\n          payload: true\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({\n          type: GET_CHANGE_PASSWORD_FAILURE,\n          payload: error\n        });\n      });\n    }).catch(function (error) {\n      ERROR(error.message);\n      console.log('error----error', error);\n      dispatch({\n        type: GET_CHANGE_PASSWORD_FAILURE,\n        payload: error\n      });\n    });\n  } catch (error) {\n    ERROR(error.message);\n    console.log('error----error11', error);\n    dispatch({\n      type: GET_CHANGE_PASSWORD_FAILURE,\n      payload: error\n    });\n  }\n}; // user subscription\n\nexport const userSubscription = data => async dispatch => {\n  try {\n    var users = auth.currentUser;\n    dispatch({\n      type: POST_USER_SUBSCRIPTION_REQUEST,\n      payload: true\n    });\n    const resp = await firebaseConfig.firestore().collection('users').doc(users.uid).update({\n      'subscription': data\n    }).then(function (docres) {\n      Success(\"Successfully Updated\");\n      dispatch({\n        type: GET_USER_SUBSCRIPTION_SUCCESS,\n        payload: true\n      });\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({\n        type: GET_USER_SUBSCRIPTION_FAILURE,\n        payload: error\n      });\n    });\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({\n      type: GET_USER_SUBSCRIPTION_FAILURE,\n      payload: error\n    });\n  }\n}; //disable User (cancel account)\n\nexport const DisableUser = (data, history) => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: POST_DISABLE_USER_REQUEST,\n        payload: true\n      });\n      const response = await axios.get(DISABLE_USER + '/' + data.uid, {}, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('ressssss', response);\n\n      if (response.status === 200) {\n        const updatedata = {\n          user_active: false\n        };\n        await firebaseConfig.firestore().collection('users').doc(data.uid).update(updatedata).then(function (docres) {\n          dispatch(logout(history));\n          dispatch({\n            type: GET_DISABLE_USER_SUCCESS,\n            payload: response.data\n          });\n          console.log('ressssss', response.data);\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({\n            type: GET_DISABLE_USER_FAILURE,\n            payload: error\n          });\n        });\n      } else {\n        dispatch({\n          type: GET_DISABLE_USER_FAILURE,\n          payload: false\n        });\n        console.log('false', false);\n      }\n    } else {\n      dispatch({\n        type: GET_DISABLE_USER_FAILURE,\n        payload: false\n      });\n      console.log('false', false);\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_DISABLE_USER_FAILURE,\n      payload: error\n    });\n    console.log('error------', error.message);\n  }\n};\nexport const getOtherUserProfileById = userid => async dispatch => {\n  try {\n    dispatch({\n      type: POST_OTHER_USER_PROFILE_BY_ID_REQUEST,\n      payload: true\n    }); //await auth.onAuthStateChanged((currentUser) => {\n\n    if (userid) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then(doc => {\n        if (!doc.exists) {\n          dispatch({\n            type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE,\n            payload: false\n          });\n        } else {\n          dispatch({\n            type: GET_OTHER_USER_PROFILE_BY_ID_SUCCESS,\n            payload: doc.data()\n          });\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE,\n        payload: false\n      });\n    } //  })\n\n  } catch (error) {\n    dispatch({\n      type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE,\n      payload: error\n    });\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UserToken\");","map":{"version":3,"names":["POST_REGISTER_REQUEST","GET_REGISTER_SUCCESS","GET_REGISTER_FAILURE","POST_LOGIN_REQUEST","GET_LOGIN_SUCCESS","GET_LOGIN_FAILURE","POST_LOG_OUT_REQUEST","GET_LOG_OUT_SUCCESS","GET_LOG_OUT_FAILURE","POST_USER_AUTH_REQUEST","GET_USER_AUTH_SUCCESS","GET_USER_AUTH_FAILURE","POST_USER_PROFILE_BY_ID_REQUEST","GET_USER_PROFILE_BY_ID_SUCCESS","GET_USER_PROFILE_BY_ID_FAILURE","POST_OTHER_USER_PROFILE_BY_ID_REQUEST","GET_OTHER_USER_PROFILE_BY_ID_SUCCESS","GET_OTHER_USER_PROFILE_BY_ID_FAILURE","POST_FORGET_PASSWORD_REQUEST","GET_FORGET_PASSWORD_SUCCESS","GET_FORGET_PASSWORD_FAILURE","POST_UPDATE_PROFILE_IMAGE_REQUEST","GET_UPDATE_PROFILE_IMAGE_SUCCESS","GET_UPDATE_PROFILE_IMAGE_FAILURE","POST_UPDATE_PROFILE_REQUEST","GET_UPDATE_PROFILE_SUCCESS","GET_UPDATE_PROFILE_FAILURE","POST_CHANGE_PASSWORD_REQUEST","GET_CHANGE_PASSWORD_SUCCESS","GET_CHANGE_PASSWORD_FAILURE","POST_USER_SUBSCRIPTION_REQUEST","GET_USER_SUBSCRIPTION_SUCCESS","GET_USER_SUBSCRIPTION_FAILURE","POST_DISABLE_USER_REQUEST","GET_DISABLE_USER_SUCCESS","GET_DISABLE_USER_FAILURE","DISABLE_USER","LongLiveAccessToken","InstagramBusinessAccount","axios","firebaseConfig","googleProvider","facebookProvider","auth","ERROR","RedirectModal","Success","moment","Redirect","register","data","history","dispatch","type","payload","response","createUserWithEmailAndPassword","email","password","user","toJSON","user_data","firestore","collection","doc","uid","set","createdAt","Date","format","username","dob","privacy_policy","terms_condition","avatarURL","slug_name","toLowerCase","provider_type","user_active","then","imageUpload","user_image","push","catch","error","message","UserToken","tokenres","messaging","console","log","getToken","vapidKey","refreshedToken","rescheck","where","get","snapshot","forEach","totalDoc","upnotifydata","Notification_tokens","update","docres","notifydata","getInsightToken","token","res","exists","udata","InsightsTokenData","newDate","newDateCheck","date","post","status","access_token","expiredate","setDate","getDate","newexpiredate","accData","Accountresponse","length","instagram_business_account","undefined","Tokendata","id","name","resp","newexpiredate1","login","profile_url","signInWithEmailAndPassword","emailVerified","window","location","origin","localStorage","setItem","socialLogin","uname","signInWithPopup","credential","accessToken","displayName","userexist","logout","currentUser","signOut","fetchUser","onAuthStateChanged","providerData","providerId","sendEmailVerification","removeItem","getUserProfileById","userid","isUsernameUnique","field_name","value","collection_name","nameDoc","empty","e","forgotPassword","sendPasswordResetEmail","updateUserProfileOrCoverImage","getItem","image","folder_name","columnname","imagename","storage","storageRef","ref","child","put","getDownloadURL","url","updateUserProfile","postdata","update_type","bioval","bio","replace","facebook","instagram","tiktok","twitter","youtube","listen_link","listen_links","links","changePassword","users","updatePassword","new_password","userSubscription","DisableUser","headers","updatedata","getOtherUserProfileById"],"sources":["/home/asus/dapify/src/Redux/actions/auth-actions.js"],"sourcesContent":["import {\n  POST_REGISTER_REQUEST, GET_REGISTER_SUCCESS, GET_REGISTER_FAILURE,\n  POST_LOGIN_REQUEST, GET_LOGIN_SUCCESS, GET_LOGIN_FAILURE,\n  POST_LOG_OUT_REQUEST, GET_LOG_OUT_SUCCESS, GET_LOG_OUT_FAILURE,\n  POST_USER_AUTH_REQUEST, GET_USER_AUTH_SUCCESS, GET_USER_AUTH_FAILURE,\n  POST_USER_PROFILE_BY_ID_REQUEST, GET_USER_PROFILE_BY_ID_SUCCESS, GET_USER_PROFILE_BY_ID_FAILURE,\n  POST_OTHER_USER_PROFILE_BY_ID_REQUEST, GET_OTHER_USER_PROFILE_BY_ID_SUCCESS, GET_OTHER_USER_PROFILE_BY_ID_FAILURE,\n  POST_FORGET_PASSWORD_REQUEST, GET_FORGET_PASSWORD_SUCCESS, GET_FORGET_PASSWORD_FAILURE,\n  POST_UPDATE_PROFILE_IMAGE_REQUEST, GET_UPDATE_PROFILE_IMAGE_SUCCESS, GET_UPDATE_PROFILE_IMAGE_FAILURE,\n  POST_UPDATE_PROFILE_REQUEST, GET_UPDATE_PROFILE_SUCCESS, GET_UPDATE_PROFILE_FAILURE,\n  POST_CHANGE_PASSWORD_REQUEST, GET_CHANGE_PASSWORD_SUCCESS, GET_CHANGE_PASSWORD_FAILURE,\n  POST_USER_SUBSCRIPTION_REQUEST, GET_USER_SUBSCRIPTION_SUCCESS, GET_USER_SUBSCRIPTION_FAILURE,\n  POST_DISABLE_USER_REQUEST, GET_DISABLE_USER_SUCCESS, GET_DISABLE_USER_FAILURE,\n  //POST_UPDATE_LINK_THUMBNAIL_IMAGE_REQUEST, GET_UPDATE_LINK_THUMBNAIL_IMAGE_SUCCESS, GET_UPDATE_LINK_THUMBNAIL_IMAGE_FAILURE,\n\n} from './type';\nimport {\n  DISABLE_USER, LongLiveAccessToken, InstagramBusinessAccount\n\n} from './api_url';\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\";\n//import { toast } from \"react-toastify\";\nimport { googleProvider, facebookProvider, auth } from \"../auth-service\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport { Redirect } from 'react-router-dom';\n\n// For firebase registration \nexport const register = (data, history) => async (dispatch) => {\n  try {\n\n    // const token = firebaseConfig.messaging();\n    dispatch({ type: POST_REGISTER_REQUEST, payload: true });\n    // For username unique check \n    //  const uniquecheck = await isUsernameUnique('username', data.username, 'users');\n\n    // if (uniquecheck) {\n\n    // For firebase authentication (signup) \n    const response = await auth.createUserWithEmailAndPassword(data.email, data.password);\n    if (response.user) {\n\n      // response.user.sendEmailVerification().then(() => {\n      dispatch({ type: GET_REGISTER_SUCCESS, payload: response.user.toJSON() });\n      const user_data = response.user.toJSON()\n\n      // For user other details (firebase collection) \n      firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n        createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n        uid: user_data.uid,\n        username: data.username,\n        dob: data.dob,\n        // user_type: data.user_type,\n        email: data.email,\n        privacy_policy: data.privacy_policy,\n        terms_condition: data.terms_condition,\n        avatarURL: '',\n        slug_name: data.username.toLowerCase(),\n        provider_type: 'normal',\n        user_active: true,\n\n      }).then(() => {\n        // For user profile image (firebase storage) \n\n        imageUpload(data.user_image, user_data.uid, 'avatars/', 'users', 'avatarURL');\n        // firebaseConfig.firestore().collection('users').doc(response.user.uid).collection('device_tokens').doc(response.user+'_1').set({\n\n        //   name: 'test',\n\n        // })\n\n        Success(\"Registration successful. Check your emails for a confirmation email\");\n        history.push(\"/\");\n\n      }).catch(function (error) {\n        dispatch({ type: GET_REGISTER_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n\n      // }).catch(function (error) {\n      //   dispatch({ type: GET_REGISTER_FAILURE, payload: error });\n      //   ERROR(error.message);\n      // })\n    } else {\n      dispatch({ type: GET_REGISTER_FAILURE, payload: false });\n      ERROR(\"Registration failed\");\n    }\n    // } else {\n    //   console.log('not unique');\n    //   dispatch({ type: GET_REGISTER_FAILURE, payload: false });\n    //   ERROR(\"User name is already taken\");\n    // }\n  } catch (error) {\n    dispatch({ type: GET_REGISTER_FAILURE, payload: error.message });\n    ERROR(error.message);\n    //throw error;\n  }\n};\n\nasync function UserToken(uid, type) {\n\n\n  const tokenres = firebaseConfig.messaging();\n  console.log('tokenres', tokenres)\n  await tokenres.getToken({ vapidKey: 'BMojzVLMq7lcRZRFLrhhDu03Pz1nvxuA8g5BtOoKwssL2Rt2LcjSoBTPeflpQceuQYc7AQGIup_FksjMe_ei-Q4' }).then(function (refreshedToken) {\n\n    if (refreshedToken) {\n      if (type === 'login') {\n\n        const rescheck =  firebaseConfig.firestore().collection('users/').where('Notification_tokens', 'array-contains',refreshedToken).get().then((snapshot) => {\n\n          snapshot.forEach(async (totalDoc) => {\n            console.log('totalDoc',totalDoc.data());\n            if(totalDoc.data().uid !== uid){\n              const upnotifydata = {\n                Notification_tokens: [],\n              }\n              firebaseConfig.firestore().collection('users/').doc(totalDoc.data().uid).update(upnotifydata).then(function (docres) {\n\n              }).catch(function (error) {\n                // ERROR(error.message);\n                console.log('token error', error);\n\n              });\n            }\n            // console.log('westCoastCities',totalDoc.data());\n          })\n        })\n\n\n        console.log('tokennnnnn');\n        const notifydata = {\n          Notification_tokens: [refreshedToken],\n        }\n        firebaseConfig.firestore().collection('users/').doc(uid).update(notifydata).then(function (docres) {\n\n        }).catch(function (error) {\n          // ERROR(error.message);\n\n        });\n        // firebaseConfig.firestore().collection('users/').doc(uid).update({\n        //   Notification_tokens: firebaseConfig.firestore.FieldValue.arrayUnion(refreshedToken),\n        // }).then(function (docres) {\n        //   console.log('tokkkkeeennn', refreshedToken);\n        // }).catch(function (error) {\n        //  // ERROR(error.message);\n\n        // });\n      }\n\n      if (type === 'logout') {\n        const upnotifydata = {\n          Notification_tokens: [],\n        }\n        firebaseConfig.firestore().collection('users/').doc(uid).update(upnotifydata).then(function (docres) {\n          console.log('tokkkkeeennn', refreshedToken);\n        }).catch(function (error) {\n          // ERROR(error.message);\n          console.log('token error', error);\n\n        });\n      }\n      // if (type === 'logout') {\n      //   firebaseConfig.firestore().collection('users/').doc(uid).update({\n      //     Notification_tokens: firebaseConfig.firestore.FieldValue.arrayRemove(refreshedToken),\n      //   }).then(function (docres) {\n      //     console.log('tokkkkeeennn', refreshedToken);\n      //   }).catch(function (error) {\n      //     // ERROR(error.message);\n\n      //   });\n      // }\n    }\n  }).catch(function (error) {\n    // ERROR(error.message);\n\n  });\n\n}\n\nasync function getInsightToken(uid, token) {\n  console.log('instatoken',token);\n  const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n  res.get().then(async(doc) => {\n\n    if (!doc.exists) {\n      console.log('nodata');\n    }\n    else {\n      const udata = doc.data();\n      if (udata.InsightsTokenData) {\n        var newDate = new Date();\n        var newDateCheck = moment(newDate).format('MM/DD/YYYY HH:mm:ss');\n        console.log('instadate', udata.InsightsTokenData.date);\n        console.log('newDateCheck', newDateCheck);\n        if (udata.InsightsTokenData.date > newDateCheck) {\n          console.log('true');\n          return true;\n        } else {\n          const data = {\n            token: token\n          }\n\n          console.log('tokennnndata', data);\n          const response = await axios.post(LongLiveAccessToken, data);\n          console.log('insresponse', response);\n          if (response.status === 200) {\n            if (response.data?.access_token) {\n              const expiredate = new Date();\n              expiredate.setDate(expiredate.getDate() + 59);\n              var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n              const accData = {\n                token: response.data.access_token,\n              }\n              console.log('accData', accData);\n              const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n              console.log('Accountresponse', Accountresponse);\n              if (Accountresponse.status === 200) {\n                console.log('checkoutaccountresss1', Accountresponse.data.data);\n                if (Accountresponse.data.data.length !== 0) {\n                  if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                    const Tokendata =\n                    {\n                      'InsightsTokenData': {\n                        'token': response.data.access_token,\n                        'date': newexpiredate,\n                      },\n\n                      'InsightsUserData': {\n                        'username': Accountresponse.data.data[0].instagram_business_account.username,\n                        'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                        'name': Accountresponse.data.data[0].name,\n                        'id': Accountresponse.data.data[0].id,\n                      }\n                    }\n\n                    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {\n\n                    }).catch(function (error) {\n\n                    })\n                    console.log('ressssss', response);\n                  } else {\n                    ERROR(\"Instagram business account not connected.\");\n                  }\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {\n\n              }\n            }\n          }\n        }\n      } else {\n        const data = {\n          token: token\n        }\n        console.log('tokennnndata22', data);\n        const response = await axios.post(LongLiveAccessToken, data);\n        console.log('insresponse', response);\n        if (response.status === 200) {\n          if (response.data?.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate1 = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n            const accData = {\n              token: response.data.access_token,\n            }\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n            if (Accountresponse.status === 200) {\n              console.log('checkoutaccountresss1', Accountresponse.data.data);\n              if (Accountresponse.data.data.length !== 0) {\n                if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                  const Tokendata =\n                  {\n                    'InsightsTokenData': {\n                      'token': response.data.access_token,\n                      'date': newexpiredate1,\n                    },\n\n                    'InsightsUserData': {\n                      'username': Accountresponse.data.data[0].instagram_business_account.username,\n                      'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                      'name': Accountresponse.data.data[0].name,\n                      'id': Accountresponse.data.data[0].id,\n                    }\n                  }\n\n                  const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {\n\n                  }).catch(function (error) {\n\n                  })\n                  console.log('ressssss', response);\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {\n                ERROR(\"Instagram business account not connected.\");\n              }\n            } else {\n\n            }\n          }\n        }\n      }\n    }\n  })\n}\n\n// For firebase login \nexport const login = (email, password, history, profile_url) => async (dispatch) => {\n\n  console.log('login history', history);\n\n  try {\n    dispatch({ type: POST_LOGIN_REQUEST, payload: true });\n\n    const response = await auth.signInWithEmailAndPassword(email, password)\n\n    if (response.user) {\n      console.log('rs-ty----------------', response.user);\n      if (response.user.emailVerified === true) {\n\n        await UserToken(response.user.uid, 'login');\n        if (profile_url !== '') {\n          dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n          window.location = window.location.origin + profile_url;\n\n        } else {\n          dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", response.user.uid);\n          history.push(\"/addContent\");\n\n        }\n      } else {\n\n        dispatch({ type: GET_LOGIN_FAILURE, payload: \"Please verify your email, Check your emails for a confirmation email\" });\n        ERROR(\"Please verify your email, Check your emails for a confirmation email\");\n        // response.user.sendEmailVerification()\n        // .then(function(response) {\n        //   dispatch({ type: GET_LOGIN_FAILURE, payload: \"Please verify your email, Check your emails for a confirmation email\" });\n        //   ERROR(\"Please verify your email, Check your emails for a confirmation email\");\n        // })\n        // .catch(function (error) {\n        //   ERROR(error.message);\n        // });\n\n      }\n\n    } else {\n      dispatch({ type: GET_LOGIN_FAILURE, payload: false });\n      ERROR(\"Invalid email and password\");\n    }\n\n  } catch (error) {\n\n    dispatch({ type: GET_LOGIN_FAILURE, payload: error.message });\n    ERROR(\"Invalid email and password\");\n    console.log('login errorrrr', error.message);\n    //throw error;\n  }\n};\n// Social login.\nexport const socialLogin = (data, history, profile_url) => async dispatch => {\n\n  try {\n    var provider_type = '';\n    var uname = '';\n    if (data === 'google') {\n      provider_type = googleProvider;\n    }\n    else if (data === 'facebook') {\n      provider_type = facebookProvider;\n    }\n    dispatch({ type: POST_LOGIN_REQUEST, payload: true });\n\n    const response = await auth.signInWithPopup(provider_type)\n\n    console.log('rs-ty----------------', response.user);\n    console.log('fbresp', response);\n    if (response.user) {\n\n      console.log('social login response', response);\n      console.log('accesstokennnn', response.credential.accessToken)\n      const user_data = response.user.toJSON()\n      console.log('myuserrr', user_data);\n      if (user_data.displayName !== '') {\n        uname = user_data.displayName\n      }\n\n      await UserToken(response.user.uid, 'login');\n\n      dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n      const userexist = firebaseConfig.firestore().collection('users').doc(user_data.uid)\n      userexist.get().then(async (doc) => {\n        if (!doc.exists) {\n\n          // For user other details (firebase collection) \n          firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n            createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n            uid: user_data.uid,\n            // email: user_data.providerData[0].email,\n            email: user_data.email,\n            provider_type: data,\n            username: uname,\n            slug_name: uname.toLowerCase(),\n            avatarURL: '',\n            user_active: true,\n\n          }).then(async function () {\n            if (data === \"facebook\") {\n\n              if (response?.credential.accessToken) {\n\n                await getInsightToken(response.user.uid, response.credential.accessToken);\n              }\n            }\n          }).catch(function (error) {\n\n          })\n        } else {\n          if (data === \"facebook\") {\n\n            if (response?.credential.accessToken) {\n\n              await getInsightToken(response.user.uid, response.credential.accessToken);\n            }\n          }\n        }\n      })\n\n      if (profile_url !== '') {\n        window.location = window.location.origin + profile_url;\n      } else {\n        console.log('checkkkkkkk', history);\n        history.push(\"/addContent\");\n      }\n    } else {\n      dispatch({ type: GET_LOGIN_FAILURE, payload: false });\n      ERROR(\"Invalid email and password\");\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_LOGIN_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n// For firebase logout \nexport const logout = (history) => async (dispatch) => {\n  try {\n    dispatch({ type: POST_LOG_OUT_REQUEST, payload: true });\n    await UserToken(auth.currentUser.uid, 'logout');\n    await auth.signOut()\n    dispatch({ type: GET_LOG_OUT_SUCCESS, payload: true });\n    history.push('/');\n  } catch (error) {\n    dispatch({ type: GET_LOG_OUT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n// For checking user login \nexport const fetchUser = () => async (dispatch) => {\n\n  console.log('fetch user----');\n  try {\n\n    dispatch({ type: POST_USER_AUTH_REQUEST, payload: true });\n    await auth.onAuthStateChanged((currentUser) => {\n      console.log('checkkkkkcurrent', currentUser);\n      if (currentUser) {\n        console.log('-----igi', currentUser.providerData[0].emailVerified);\n        if (currentUser.emailVerified === true) {\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", currentUser.uid);\n          dispatch({\n            type: GET_USER_AUTH_SUCCESS,\n            payload: currentUser.toJSON(),\n          });\n        } else {\n          if (currentUser.providerData[0].providerId === 'facebook.com') {\n            localStorage.setItem(\"isAuthenticated\", true);\n            localStorage.setItem(\"user_id\", currentUser.uid);\n            dispatch({\n              type: GET_USER_AUTH_SUCCESS,\n              payload: currentUser.toJSON(),\n            });\n          } else {\n            currentUser.sendEmailVerification();\n            localStorage.removeItem(\"isAuthenticated\");\n            localStorage.removeItem(\"user_id\");\n            dispatch({\n              type: GET_USER_AUTH_FAILURE,\n              currentUser: null,\n            });\n          }\n        }\n      } else {\n        localStorage.removeItem(\"isAuthenticated\");\n        localStorage.removeItem(\"user_id\");\n        dispatch({\n          type: GET_USER_AUTH_FAILURE,\n          currentUser: null,\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({ type: GET_USER_AUTH_FAILURE, payload: error.message });\n    //throw error;\n  }\n};\n\n// For get user collection data \nexport const getUserProfileById = (userid) => async dispatch => {\n  try {\n\n    console.log('userid', userid);\n    dispatch({ type: POST_USER_PROFILE_BY_ID_REQUEST, payload: true });\n    //await auth.onAuthStateChanged((currentUser) => {\n    if (userid) {\n\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then((doc) => {\n\n        if (!doc.exists) {\n\n          dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: false });\n        }\n        else {\n          dispatch({ type: GET_USER_PROFILE_BY_ID_SUCCESS, payload: doc.data() });\n\n        }\n      });\n    } else {\n\n      dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: false });\n\n    }\n    //  })\n  } catch (error) {\n\n    dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: error });\n  }\n};\n\n// For unique check\nasync function isUsernameUnique(field_name, value, collection_name) {\n  try {\n    const nameDoc = await firebaseConfig.firestore().collection(collection_name).where(field_name, \"==\", value).get()\n      .then(snapshot => {\n        if (snapshot.empty) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n    return nameDoc;\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n//For forgot password\nexport const forgotPassword = (email, history) => (dispatch) => {\n  try {\n    dispatch({ type: POST_FORGET_PASSWORD_REQUEST, payload: true });\n    const response = auth.sendPasswordResetEmail(email)\n      .then(function () {\n        dispatch({ type: GET_FORGET_PASSWORD_SUCCESS, payload: response.data });\n        Success(\"Email sent\");\n        history.push('/');\n      }).catch(function (error) {\n        dispatch({ type: GET_FORGET_PASSWORD_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n  } catch (error) {\n    dispatch({ type: GET_FORGET_PASSWORD_FAILURE, payload: error });\n    ERROR(error.message);\n    //throw error;\n  }\n};\n\n// Update profile image.\nexport const updateUserProfileOrCoverImage = (data, history) => async dispatch => {\n  try {\n    console.log('all history', history);\n    dispatch({ type: POST_UPDATE_PROFILE_IMAGE_REQUEST, payload: true });\n    const uid = localStorage.getItem(\"user_id\");\n    if (uid) {\n\n      if (data.type === \"user image\") {\n\n        const response = imageUpload(data.image, uid, 'avatars/', 'users', 'avatarURL')\n          .then(function () {\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_SUCCESS, payload: data });\n            Success(\"Profile image successfully updated\");\n            // history.push('/settings');\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error.message });\n          })\n      }\n      else {\n        const response = imageUpload(data.image, uid, 'covers/', 'users', 'coverURL')\n          .then(function () {\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_SUCCESS, payload: data });\n            Success(\"Cover image successfully updated\");\n            // history.push('/settings');\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error.message });\n          })\n      }\n    }\n  } catch (error) {\n    dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error });\n  }\n};\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname) {\n  try {\n\n    // For user profile image (firebase storage) \n    if (image !== null) {\n\n      // const img_ext = image.type.split('/').pop();\n      // const imagename = id + '.'+img_ext;\n      const imagename = id + '.png';\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n\n        data.ref.getDownloadURL().then(url => {\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url,\n          })\n\n        })\n        return true;\n      })\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n//update user info\nexport const updateUserProfile = (data) => async dispatch => {\n  try {\n    console.log('infodata', data);\n    var postdata = {};\n    const uid = localStorage.getItem(\"user_id\");\n\n    dispatch({ type: POST_UPDATE_PROFILE_REQUEST, payload: true });\n    if (data.update_type === \"info\") {\n\n\n      postdata =\n      {\n        username: data.username,\n        dob: data.dob,\n        //user_type: data.user_type,\n        slug_name: data.username.toLowerCase(),\n      }\n\n    }\n    else if (data.update_type === \"bio\") {\n      var bioval = data.bio.replace(/\\n/g, \"\\\\n\");\n      postdata =\n      {\n        bio: bioval,\n      }\n    } else if (data.update_type === \"social_links\") {\n      postdata =\n      {\n        'social_links': {\n          'facebook': data.facebook,\n          'instagram': data.instagram,\n          'tiktok': data.tiktok,\n          'twitter': data.twitter,\n          'youtube': data.youtube,\n        }\n      }\n    } else if (data.update_type === \"links\") {\n\n      const listen_link = data.listen_links;\n      if (listen_link !== '') {\n        postdata =\n        {\n          'listen_now_link': listen_link,\n          'links': data.links\n        }\n      } else {\n        postdata =\n        {\n          'links': data.links\n        }\n      }\n    }\n\n    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(postdata).then(function (docres) {\n      dispatch({ type: GET_UPDATE_PROFILE_SUCCESS, payload: true });\n      Success('Updated Successfully');\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({ type: GET_UPDATE_PROFILE_FAILURE, payload: error });\n    })\n  } catch (error) {\n    dispatch({ type: GET_UPDATE_PROFILE_FAILURE, payload: error });\n  }\n};\n\n//Change Password\n\n//  export const changePassword = (data) => async dispatch => {\n//   try {\n//     var users = auth.currentUser;\n\n//     dispatch({ type: POST_CHANGE_PASSWORD_REQUEST, payload: true });\n//     await users.updatePassword(data.new_password).then(function() {\n//         Success('Successfully changed password');\n//         dispatch({ type: GET_CHANGE_PASSWORD_SUCCESS, payload: true });\n//      }).catch(function(error) {\n//         ERROR(error.message);\n//         console.log('qqqfb change pass',error);\n//         dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//      });\n\n//   } catch (error) {\n//     ERROR(error.message);\n\n//     console.log('fb change pass',error);\n//     dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//   }\n// };\nexport const changePassword = (data) => async dispatch => {\n  try {\n    var users = auth.currentUser;\n\n    dispatch({ type: POST_CHANGE_PASSWORD_REQUEST, payload: true });\n    await auth.signInWithEmailAndPassword(users.email, data.password)\n      .then(function (user) {\n\n        users.updatePassword(data.new_password).then(function () {\n          Success('Successfully changed password');\n          dispatch({ type: GET_CHANGE_PASSWORD_SUCCESS, payload: true });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('error----error', error);\n        dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n      });\n\n  } catch (error) {\n    ERROR(error.message);\n    console.log('error----error11', error);\n    dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n  }\n};\n\n// user subscription\n\nexport const userSubscription = (data) => async dispatch => {\n  try {\n\n    var users = auth.currentUser;\n    dispatch({ type: POST_USER_SUBSCRIPTION_REQUEST, payload: true });\n\n    const resp = await firebaseConfig.firestore().collection('users').doc(users.uid).update({ 'subscription': data })\n      .then(function (docres) {\n        Success(\"Successfully Updated\");\n        dispatch({ type: GET_USER_SUBSCRIPTION_SUCCESS, payload: true });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({ type: GET_USER_SUBSCRIPTION_FAILURE, payload: error });\n      });\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_USER_SUBSCRIPTION_FAILURE, payload: error });\n  }\n};\n\n//disable User (cancel account)\nexport const DisableUser = (data, history) => async dispatch => {\n  try {\n    if (data) {\n      dispatch({ type: POST_DISABLE_USER_REQUEST, payload: true });\n      const response = await axios.get(DISABLE_USER + '/' + data.uid, {}, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('ressssss', response);\n      if (response.status === 200) {\n        const updatedata = {\n          user_active: false,\n        };\n        await firebaseConfig.firestore().collection('users').doc(data.uid).update(updatedata)\n          .then(function (docres) {\n\n            dispatch(logout(history));\n            dispatch({ type: GET_DISABLE_USER_SUCCESS, payload: response.data });\n            console.log('ressssss', response.data);\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_DISABLE_USER_FAILURE, payload: error });\n          });\n\n      } else {\n        dispatch({ type: GET_DISABLE_USER_FAILURE, payload: false });\n        console.log('false', false);\n      }\n\n    } else {\n      dispatch({ type: GET_DISABLE_USER_FAILURE, payload: false });\n      console.log('false', false);\n    }\n  } catch (error) {\n    dispatch({ type: GET_DISABLE_USER_FAILURE, payload: error });\n    console.log('error------', error.message);\n  }\n};\n\n\nexport const getOtherUserProfileById = (userid) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_OTHER_USER_PROFILE_BY_ID_REQUEST, payload: true });\n    //await auth.onAuthStateChanged((currentUser) => {\n    if (userid) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then((doc) => {\n\n        if (!doc.exists) {\n\n          dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n        }\n        else {\n\n          dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_SUCCESS, payload: doc.data() });\n\n        }\n      });\n    } else {\n      dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n    }\n    //  })\n  } catch (error) {\n    dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: error });\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}