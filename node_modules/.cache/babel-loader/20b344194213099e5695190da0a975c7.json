{"ast":null,"code":"import { POST_MEDIA_CONTENT_REQUEST, GET_MEDIA_CONTENT_SUCCESS, GET_MEDIA_CONTENT_FAILURE, POST_USER_MEDIA_REQUEST, GET_USER_MEDIA_SUCCESS, GET_USER_MEDIA_FAILURE, POST_USER_MEDIA_MUSIC_REQUEST, GET_USER_MEDIA_MUSIC_SUCCESS, GET_USER_MEDIA_MUSIC_FAILURE, POST_Like_MEDIA_MUSIC_REQUEST, GET_Like_MEDIA_MUSIC_SUCCESS, GET_Like_MEDIA_MUSIC_FAILURE, //POST_SHARE_MEDIA_MUSIC_REQUEST, GET_SHARE_MEDIA_MUSIC_SUCCESS, GET_SHARE_MEDIA_MUSIC_FAILURE,\nPOST_BOOKMARK_MEDIA_MUSIC_REQUEST, GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, GET_BOOKMARK_MEDIA_MUSIC_FAILURE, POST_USER_BOOKMARK_MUSIC_REQUEST, GET_USER_BOOKMARK_MUSIC_SUCCESS, GET_USER_BOOKMARK_MUSIC_FAILURE, POST_MEDIA_SHARE_COUNT_REQUEST, ADD_MEDIA_SHARE_COUNT_SUCCESS, ADD_MEDIA_SHARE_COUNT_FAILURE, LIKED_NOTIFICATION, POST_CONTENT } from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css';\nimport * as moment from 'moment'; //import { keyboardControls } from 'react-media-player/lib/utils';\n\nimport { USER_NOTIFICATION } from './api_url';\nimport axios from 'axios';\nexport const addMediaContent = (data, history) => async dispatch => {\n  try {\n    if (data.media_content !== '') {\n      dispatch({\n        type: POST_MEDIA_CONTENT_REQUEST,\n        payload: true\n      });\n      const docRef = firebaseConfig.firestore().collection('user_contents').doc();\n      const doc_id = docRef.id;\n      var filename = '';\n      var cover_filename = '';\n      var via = '';\n\n      if (data.media_type === \"image\") {\n        filename = data.uid + '_' + doc_id + '.png';\n      }\n\n      if (data.media_type === \"video\") {\n        filename = data.uid + '_' + doc_id + '.mp4';\n        via = data.via;\n      }\n\n      if (data.media_type === \"audio\") {\n        filename = data.uid + '_' + doc_id + '.mp3';\n\n        if (data.cover_art) {\n          cover_filename = data.uid + '_' + doc_id + '.png';\n        }\n      }\n\n      var progress = 0;\n      var progress_res = 0;\n\n      if (via === 'youtube') {\n        firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n          caption: data.title,\n          id: doc_id,\n          media_type: data.media_type,\n          media_url: data.media_content,\n          postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          postedById: data.uid,\n          postedByUserName: data.username,\n          public: data.public,\n          userAvatarUrl: data.userAvatarUrl,\n          via: via\n        }).then(async function () {\n          progress = 0;\n          await sendNotificationAllSubscriber(data.uid);\n          dispatch({\n            type: GET_MEDIA_CONTENT_SUCCESS,\n            payload: progress\n          });\n          Success('Added Successfully');\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({\n            type: GET_MEDIA_CONTENT_FAILURE,\n            payload: error\n          });\n        });\n      } else {\n        if (data.media_type === \"audio\") {\n          var audstorage = firebaseConfig.storage();\n          var audstorageRef = audstorage.ref();\n          var audiouploadTask = audstorageRef.child('media_contents/' + filename).put(data.media_content);\n          audiouploadTask.on('state_changed', function (snapshot) {\n            progress_res = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n            progress = Math.round(progress_res);\n            dispatch({\n              type: GET_MEDIA_CONTENT_SUCCESS,\n              payload: progress\n            });\n            console.log('progress1', progress);\n          }, err => {\n            ERROR(err.message);\n            dispatch({\n              type: GET_MEDIA_CONTENT_FAILURE,\n              payload: err\n            });\n          }, () => {\n            audiouploadTask.snapshot.ref.getDownloadURL().then(async url => {\n              //for audio cover image--------------\n              imageUpload(data.cover_art, doc_id, 'audio_cover_image/', 'user_contents', 'cover_art', cover_filename);\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via\n              });\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({\n                type: GET_MEDIA_CONTENT_SUCCESS,\n                payload: 0\n              });\n              Success('Added Successfully');\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({\n                type: GET_MEDIA_CONTENT_FAILURE,\n                payload: error\n              });\n            });\n          });\n        } else {\n          var storage = firebaseConfig.storage();\n          var storageRef = storage.ref();\n          var uploadTask = storageRef.child('media_contents/' + filename).put(data.media_content);\n          uploadTask.on('state_changed', function (snapshot) {\n            progress_res = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n            progress = Math.round(progress_res);\n            dispatch({\n              type: GET_MEDIA_CONTENT_SUCCESS,\n              payload: progress\n            });\n            console.log('progress1', progress);\n          }, err => {\n            ERROR(err.message);\n            dispatch({\n              type: GET_MEDIA_CONTENT_FAILURE,\n              payload: err\n            });\n          }, () => {\n            uploadTask.snapshot.ref.getDownloadURL().then(async url => {\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via\n              });\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({\n                type: GET_MEDIA_CONTENT_SUCCESS,\n                payload: 0\n              });\n              Success('Added Successfully');\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({\n                type: GET_MEDIA_CONTENT_FAILURE,\n                payload: error\n              });\n            });\n          });\n        }\n      }\n    } else {\n      dispatch({\n        type: GET_MEDIA_CONTENT_FAILURE,\n        payload: 'invalid file'\n      });\n      ERROR('invalid file');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_MEDIA_CONTENT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message); // throw error;\n  }\n};\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname, filename) {\n  try {\n    if (image !== null) {\n      const imagename = filename;\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n        var fileurl = '';\n        data.ref.getDownloadURL().then(url => {\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url\n          });\n        });\n        return fileurl;\n      });\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} // For get user media content \n\n\nexport const getUserMediaContent = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_MEDIA_REQUEST,\n      payload: true\n    });\n\n    if (user_id) {\n      var mediaPost = [];\n      let query = '';\n      var totalrecord = []; // for total count----------------------------\n\n      firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id).where('media_type', \"in\", [\"image\", \"video\"]).orderBy('postedAt', 'desc').get().then(function (querySnapshot) {\n        totalrecord = querySnapshot.size;\n      }); // for load more data---------------------------\n\n      query = firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id).where('media_type', \"in\", [\"image\", \"video\"]).orderBy('postedAt', 'desc').limit(limit);\n      query.get().then(snapshot => {\n        snapshot.forEach(doc => {\n          mediaPost.push(doc.data());\n        });\n        dispatch({\n          type: GET_USER_MEDIA_SUCCESS,\n          payload: mediaPost,\n          MediaTotal: totalrecord\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_MEDIA_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_USER_MEDIA_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_MEDIA_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const MediaMusicLike = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_Like_MEDIA_MUSIC_REQUEST,\n      payload: true\n    });\n\n    if (data.type === 'like') {\n      console.log('likealldata', data);\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({\n        user_likes: data.user_likes\n      }, {\n        merge: true\n      }).then(async function (docres) {\n        if (data.postedUserId !== data.by_id) {\n          await sendNotification(data.postedUserId, data.by_id);\n        }\n\n        Success(\"Liked Post Successfully\");\n        dispatch({\n          type: GET_Like_MEDIA_MUSIC_SUCCESS,\n          payload: data.id + '_' + data.type\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({\n          type: GET_Like_MEDIA_MUSIC_FAILURE,\n          payload: error\n        });\n      });\n    } else {\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({\n        user_likes: data.user_likes\n      }).then(function (docres) {\n        Success(\"Unliked Post Successfully\");\n        dispatch({\n          type: GET_Like_MEDIA_MUSIC_SUCCESS,\n          payload: data.id + '_' + data.type\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({\n          type: GET_Like_MEDIA_MUSIC_FAILURE,\n          payload: error\n        });\n      });\n    }\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({\n      type: GET_Like_MEDIA_MUSIC_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const MediaMusicBookmark = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_BOOKMARK_MEDIA_MUSIC_REQUEST,\n      payload: true\n    });\n\n    if (data.type === 'bookmark') {\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({\n        user_bookmark: data.user_bookmark\n      }, {\n        merge: true\n      }).then(function (docres) {\n        Success(\"Bookmark Successfully\");\n        dispatch({\n          type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS,\n          payload: data.id + '_' + data.type\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({\n          type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE,\n          payload: error\n        });\n      });\n    } else {\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({\n        user_bookmark: data.user_bookmark\n      }).then(function (docres) {\n        Success(\"Remove from bookmark successfully\");\n        dispatch({\n          type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS,\n          payload: data.id + '_' + data.type\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({\n          type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE,\n          payload: error\n        });\n      });\n    }\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({\n      type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUserBookmarkMusic_old = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_BOOKMARK_MUSIC_REQUEST,\n      payload: true\n    });\n\n    if (user_id) {\n      var bookmark_arr = [];\n      var user_arr = []; // var bookmark_ttl_arr = [];\n\n      var totalRecord = 0;\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents').where(\"media_type\", \"==\", \"audio\").orderBy('postedAt', 'desc');\n      bookmarkTotalData.get().then(snapshot => {\n        var totalcount = 0;\n        snapshot.forEach(totalbookDoc => {\n          var totalDocData = totalbookDoc.data();\n\n          if (totalDocData.user_bookmark !== undefined) {\n            var mediares = Object.keys(totalDocData.user_bookmark);\n\n            if (mediares.find(o => o === user_id)) {\n              // bookmark_ttl_arr.push(totalDocData.id);\n              totalcount = totalcount + 1;\n            }\n          }\n        });\n        totalRecord = totalcount; // for load more data---------------------------\n\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents').where(\"media_type\", \"==\", \"audio\").orderBy('postedAt', 'desc');\n        bookmarkref.get().then(snapshot => {\n          snapshot.forEach(bookDoc => {\n            if (Object.values(bookmark_arr).length < limit) {\n              var bookmarkDocData = bookDoc.data();\n\n              if (bookmarkDocData.user_bookmark !== undefined) {\n                var mediares = Object.keys(bookmarkDocData.user_bookmark);\n\n                if (mediares.find(o => o === user_id)) {\n                  bookmark_arr[bookmarkDocData.id] = bookmarkDocData;\n                }\n              }\n            }\n          });\n          Object.values(bookmark_arr).forEach(async (usrContent, index) => {\n            var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", usrContent.postedById);\n            userref.get().then(snapshot1 => {\n              snapshot1.forEach(doc => {\n                user_arr = doc.data();\n                bookmark_arr[usrContent.id].username_doc = user_arr.username;\n                bookmark_arr[usrContent.id].avatarurl_doc = user_arr.avatarURL;\n              });\n              dispatch({\n                type: GET_USER_BOOKMARK_MUSIC_SUCCESS,\n                payload: bookmark_arr,\n                MusicBookmarkTotal: totalRecord\n              });\n            });\n          }); // dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: bookmark_arr});\n        }).catch(function (error) {\n          dispatch({\n            type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n            payload: false\n          });\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUserBookmarkMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_BOOKMARK_MUSIC_REQUEST,\n      payload: true\n    });\n\n    if (user_id) {\n      var subscribeobj = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then(async doc => {\n        if (!doc.exists) {} else {\n          var UserData = doc.data();\n          subscribeobj = UserData.subscribed_list;\n        }\n      });\n      var result_arr = [];\n      var totalRecord = 0;\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents').where(\"media_type\", \"==\", \"audio\").orderBy('postedAt', 'desc');\n      bookmarkTotalData.get().then(snapshot => {\n        var totalcount = 0;\n        snapshot.forEach(totalbookDoc => {\n          var totalDocData = totalbookDoc.data();\n\n          if (totalDocData.user_bookmark !== undefined) {\n            var mediares = Object.keys(totalDocData.user_bookmark);\n\n            if (mediares.find(o => o === user_id)) {\n              const userexist = firebaseConfig.firestore().collection('users').doc(totalDocData.postedById);\n              userexist.get().then(doc => {\n                if (doc.data().user_active === true) {\n                  totalcount = totalcount + 1;\n                  totalRecord = totalcount;\n                }\n              });\n            }\n          }\n        });\n        console.log('-----totalRecord', totalRecord); // for load more data---------------------------\n\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents').where(\"media_type\", \"==\", \"audio\").orderBy('postedAt', 'desc');\n        bookmarkref.get().then(snapshot1 => {\n          var i = 0;\n          var j = 0;\n          var snapshot = [];\n          snapshot1.forEach(async bookDoc => {\n            snapshot.push(bookDoc);\n          });\n          getlimit(snapshot[i]);\n\n          function getlimit(bookDoc) {\n            if (totalRecord !== 0) {\n              if (j < limit && snapshot.length > i) {\n                var bookmarkDocData = bookDoc.data();\n\n                if (bookmarkDocData.user_bookmark !== undefined) {\n                  var mediares = Object.keys(bookmarkDocData.user_bookmark);\n\n                  if (mediares.find(o => o === user_id)) {\n                    getbookmarkuserdata(bookmarkDocData, myDisplayer);\n\n                    function myDisplayer(obj) {\n                      if (Object.keys(obj).length !== 0) {\n                        i = i + 1;\n                        j = j + 1;\n                        result_arr.push(obj);\n                        getlimit(snapshot[i]);\n                      }\n\n                      dispatch({\n                        type: GET_USER_BOOKMARK_MUSIC_SUCCESS,\n                        payload: result_arr,\n                        MusicBookmarkTotal: totalRecord\n                      });\n                    }\n                  } else {\n                    i = i + 1;\n                    getlimit(snapshot[i]);\n                  }\n                } else {\n                  i = i + 1;\n                  getlimit(snapshot[i]);\n                }\n              }\n            } else {\n              dispatch({\n                type: GET_USER_BOOKMARK_MUSIC_SUCCESS,\n                payload: result_arr,\n                MusicBookmarkTotal: totalRecord\n              }); //dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n            }\n          }\n        }).catch(function (error) {\n          dispatch({\n            type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n            payload: false\n          });\n        });\n\n        async function getbookmarkuserdata(bookmarkval, myCallback) {\n          var bookmarkobj = {};\n          const userbookmark = await firebaseConfig.firestore().collection('users').doc(bookmarkval.postedById);\n          userbookmark.get().then(function (doc) {\n            if (doc.exists) {\n              var resData = '';\n              var viewPermission = false;\n\n              if (doc.data().user_active === true) {\n                if (Object.keys(subscribeobj).length > 0) {\n                  var subid = bookmarkval.postedById + '_SUBSCRIBER';\n\n                  if (Object.keys(subscribeobj).includes(subid)) {\n                    resData = subscribeobj[subid];\n\n                    if (resData.subscribe_type === \"one_time_support\") {\n                      viewPermission = true;\n                    } else {\n                      if (resData.date !== '') {\n                        var subs_date = resData.date;\n                        var checkDate = new Date();\n                        const milliseconds = subs_date.seconds * 1000; // 1575909015000\n\n                        var cloneDate = new Date(milliseconds); //for monthly subscription\n\n                        cloneDate.setDate(cloneDate.getDate() + 30);\n\n                        if (cloneDate.getTime() > checkDate.getTime()) {\n                          viewPermission = true;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                bookmarkobj[bookmarkval.id] = bookmarkval;\n                bookmarkobj[bookmarkval.id].username_doc = doc.data().username;\n                bookmarkobj[bookmarkval.id].avatarurl_doc = doc.data().avatarURL;\n                bookmarkobj[bookmarkval.id].viewPermission = viewPermission;\n                myCallback(bookmarkobj);\n              }\n            }\n          });\n        }\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_BOOKMARK_MUSIC_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUserMediaMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_MEDIA_MUSIC_REQUEST,\n      payload: true\n    });\n\n    if (user_id) {\n      let query = '';\n      var totalrecord = [];\n      var mediaMusicPost = [];\n      var res_arr = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then(doc1 => {\n        // for total count---------------------------\n        firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id).where('media_type', \"in\", [\"audio\"]).orderBy('postedAt', 'desc').get().then(function (querySnapshot) {\n          totalrecord = querySnapshot.size;\n        }); // for load more data---------------------------\n\n        query = firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id).where('media_type', \"in\", [\"audio\"]).orderBy('postedAt', 'desc').limit(limit);\n        query.get().then(snapshot => {\n          snapshot.forEach(doc => {\n            res_arr = doc.data();\n            getShareCount(res_arr);\n\n            async function getShareCount(mediaid) {\n              var totalCount = 0;\n              mediaid['share_count'] = totalCount;\n              const res = await firebaseConfig.firestore().collection('media_share_history').doc(user_id);\n              res.get().then(docs => {\n                var mediaData = docs.data();\n\n                if (mediaData !== undefined) {\n                  if (mediaData[mediaid.id] !== undefined) {\n                    if (mediaData[mediaid.id]['watsapp_Count']) {\n                      totalCount += mediaData[mediaid.id]['watsapp_Count'];\n                    }\n\n                    if (mediaData[mediaid.id]['email_Count']) {\n                      totalCount += mediaData[mediaid.id]['email_Count'];\n                    }\n\n                    if (mediaData[mediaid.id]['facebook_Count']) {\n                      totalCount += mediaData[mediaid.id]['facebook_Count'];\n                    }\n\n                    mediaid['share_count'] = totalCount;\n                  }\n                }\n              });\n            }\n\n            res_arr.username_doc = doc1.data().username;\n            res_arr.avatarurl_doc = doc1.data().avatarURL;\n            mediaMusicPost.push(res_arr);\n          });\n          console.log('musicccc dataaaa', mediaMusicPost);\n          dispatch({\n            type: GET_USER_MEDIA_MUSIC_SUCCESS,\n            payload: mediaMusicPost,\n            MusicTotal: totalrecord\n          });\n        }).catch(function (error) {\n          dispatch({\n            type: GET_USER_MEDIA_MUSIC_FAILURE,\n            payload: false\n          });\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_MEDIA_MUSIC_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_USER_MEDIA_MUSIC_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_MEDIA_MUSIC_FAILURE,\n      payload: error\n    });\n  }\n};\n\nasync function sendNotification(to_id, from_id) {\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async doc => {\n      if (!doc.exists) {//dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      } else {\n        var _doc$data;\n\n        var Unread_Notification_Count = 0;\n\n        if ((_doc$data = doc.data()) !== null && _doc$data !== void 0 && _doc$data.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then(async fromdoc => {\n              if (!fromdoc.exists) {\n                fromname = \"\";\n              } else {\n                var _doc$data2;\n\n                if ((_doc$data2 = doc.data()) !== null && _doc$data2 !== void 0 && _doc$data2.Unread_Notification) {\n                  Unread_Notification_Count = doc.data().Unread_Notification + 1;\n                } else {\n                  Unread_Notification_Count = 1;\n                }\n\n                fromname = fromdoc.data().username;\n                console.log(doc.data().Notification_tokens);\n                const notification_data = {\n                  \"title\": \"Post Liked\",\n                  \"body\": fromname + ' ' + LIKED_NOTIFICATION,\n                  \"to\": doc.data().Notification_tokens\n                };\n                const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                console.log('notification_response', notification_response);\n\n                if (notification_response.status === 200) {\n                  var notifypostdata = {};\n                  var notification_id = '';\n                  const notifydocRef = firebaseConfig.firestore().collection('notifications').doc();\n                  console.log('datanotifyyyy', notifydocRef);\n                  notification_id = notifydocRef.id;\n                  notifypostdata[notification_id] = {\n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    type: \"LIKED_NOTIFICATION\",\n                    user_id: from_id,\n                    status: 'unread',\n                    flag: true\n                  };\n                  firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, {\n                    merge: true\n                  }).then(function () {\n                    firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                      'Unread_Notification': Unread_Notification_Count\n                    }).then(function (docres) {}).catch(function (error) {\n                      ERROR(error.message);\n                    });\n                  }).catch(function (error) {\n                    console.log(error.message);\n                  });\n                }\n              }\n            });\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nasync function sendNotificationAllSubscriber(uid) {\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async doc => {\n      if (!doc.exists) {} else {\n        var fromname = '';\n        fromname = doc.data().username;\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n\n        if (subscribeobj !== '') {\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n            if (subkeyid.includes('_RECIEVER')) {\n              var sub_id = subkeyid.replace('_RECIEVER', '');\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async subdoc => {\n                if (!subdoc.exists) {} else {\n                  var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n                  var Unread_Notification_Count = 0;\n\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                    var _subdoc$data;\n\n                    if ((_subdoc$data = subdoc.data()) !== null && _subdoc$data !== void 0 && _subdoc$data.Notification_tokens) {\n                      if (subdoc.data().Notification_tokens.length > 0) {\n                        var _subdoc$data2;\n\n                        console.log(subdoc.data().Notification_tokens);\n                        const notification_data = {\n                          \"title\": \"POST_CONTENT\",\n                          \"body\": fromname + ' ' + POST_CONTENT,\n                          \"to\": subdoc.data().Notification_tokens\n                        };\n\n                        if ((_subdoc$data2 = subdoc.data()) !== null && _subdoc$data2 !== void 0 && _subdoc$data2.Unread_Notification) {\n                          Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                        } else {\n                          Unread_Notification_Count = 1;\n                        }\n\n                        const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                        console.log('notification_response', notification_response);\n\n                        if (notification_response.status === 200) {\n                          var notifypostdata = {};\n                          var notification_id = '';\n                          const notifydocRef = firebaseConfig.firestore().collection('notifications').doc();\n                          console.log('datanotifyyyy', notifydocRef);\n                          notification_id = notifydocRef.id;\n                          notifypostdata[notification_id] = {\n                            time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                            type: \"POST_CONTENT\",\n                            user_id: uid,\n                            status: 'unread',\n                            flag: true\n                          };\n                          firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, {\n                            merge: true\n                          }).then(function () {\n                            firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                              'Unread_Notification': Unread_Notification_Count\n                            }).then(function (docres) {}).catch(function (error) {\n                              ERROR(error.message);\n                            });\n                          }).catch(function (error) {\n                            console.log(error.message);\n                          });\n                        }\n                      }\n                    }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n                      const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                      var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                        var _subdoc$data3;\n\n                        if ((_subdoc$data3 = subdoc.data()) !== null && _subdoc$data3 !== void 0 && _subdoc$data3.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n                            var _subdoc$data4;\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n                              \"title\": \"POST_CONTENT\",\n                              \"body\": fromname + ' ' + POST_CONTENT,\n                              \"to\": subdoc.data().Notification_tokens\n                            };\n\n                            if ((_subdoc$data4 = subdoc.data()) !== null && _subdoc$data4 !== void 0 && _subdoc$data4.Unread_Notification) {\n                              Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                            } else {\n                              Unread_Notification_Count = 1;\n                            }\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n\n                            if (notification_response.status === 200) {\n                              var notifypostdata = {};\n                              var notification_id = '';\n                              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc();\n                              console.log('datanotifyyyy', notifydocRef);\n                              notification_id = notifydocRef.id;\n                              notifypostdata[notification_id] = {\n                                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                                type: \"POST_CONTENT\",\n                                user_id: uid,\n                                status: 'unread',\n                                flag: true\n                              };\n                              firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, {\n                                merge: true\n                              }).then(function () {\n                                firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                                  'Unread_Notification': Unread_Notification_Count\n                                }).then(function (docres) {}).catch(function (error) {\n                                  ERROR(error.message);\n                                });\n                              }).catch(function (error) {\n                                console.log(error.message);\n                              });\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nexport const StoreMediaShareCount = (data, history) => async dispatch => {\n  try {\n    if (data.shareBy !== undefined) {\n      dispatch({\n        type: POST_MEDIA_SHARE_COUNT_REQUEST,\n        payload: true\n      });\n      var mediaSharePostData = {};\n      var UpdatemediaSharePostData = {};\n      var share_by = data.shareBy;\n\n      if (data.type === \"Watsapp\") {\n        mediaSharePostData[data.mediaId] = {\n          mediaId: data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          watsapp_Count: 1,\n          watsapp_User: [share_by]\n        };\n      }\n\n      if (data.type === \"Email\") {\n        mediaSharePostData[data.mediaId] = {\n          mediaId: data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          email_Count: 1,\n          email_User: [share_by]\n        };\n      }\n\n      if (data.type === \"Facebook\") {\n        mediaSharePostData[data.mediaId] = {\n          mediaId: data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          facebook_Count: 1,\n          facebook_User: [share_by]\n        };\n      }\n\n      const userdata = firebaseConfig.firestore().collection('media_share_history').doc(data.user_id);\n      userdata.get().then(async doc => {\n        if (!doc.exists) {\n          firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, {\n            merge: true\n          }).then(function () {\n            dispatch({\n              type: ADD_MEDIA_SHARE_COUNT_SUCCESS,\n              payload: true\n            });\n          }).catch(function (error) {\n            console.log(error.message);\n          });\n        } else {\n          console.log('docdata-----', doc.data());\n          var sharedata = doc.data();\n          var media_id = data.mediaId;\n          console.log('checkout', sharedata[media_id]);\n\n          if (sharedata[media_id] !== undefined) {\n            if (data.type === \"Watsapp\") {\n              var WPshareUserId = [];\n              var watsappCount = 0;\n\n              if (sharedata[media_id]['watsapp_User'] !== undefined) {\n                WPshareUserId = sharedata[media_id]['watsapp_User'];\n              }\n\n              if (sharedata[media_id]['watsapp_Count'] !== undefined) {\n                var _sharedata$media_id;\n\n                watsappCount = (_sharedata$media_id = sharedata[media_id]) === null || _sharedata$media_id === void 0 ? void 0 : _sharedata$media_id['watsapp_Count'];\n              }\n\n              if (!WPshareUserId.includes(share_by)) {\n                WPshareUserId.push(share_by);\n                UpdatemediaSharePostData[media_id] = {\n                  time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                  watsapp_Count: watsappCount + 1,\n                  watsapp_User: WPshareUserId\n                };\n                firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, {\n                  merge: true\n                }).then(function () {\n                  dispatch({\n                    type: ADD_MEDIA_SHARE_COUNT_SUCCESS,\n                    payload: true\n                  });\n                }).catch(function (error) {\n                  console.log('kkk', error.message);\n                });\n              }\n            }\n\n            if (data.type === \"Facebook\") {\n              var FBshareUserId = [];\n              var fbCount = 0;\n\n              if (sharedata[media_id]['facebook_User'] !== undefined) {\n                FBshareUserId = sharedata[media_id]['facebook_User'];\n              }\n\n              if (sharedata[media_id]['facebook_Count'] !== undefined) {\n                var _sharedata$media_id2;\n\n                fbCount = (_sharedata$media_id2 = sharedata[media_id]) === null || _sharedata$media_id2 === void 0 ? void 0 : _sharedata$media_id2['facebook_Count'];\n              }\n\n              if (!FBshareUserId.includes(share_by)) {\n                FBshareUserId.push(share_by);\n                UpdatemediaSharePostData[media_id] = {\n                  time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                  facebook_Count: fbCount + 1,\n                  facebook_User: FBshareUserId\n                };\n                firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, {\n                  merge: true\n                }).then(function () {\n                  dispatch({\n                    type: ADD_MEDIA_SHARE_COUNT_SUCCESS,\n                    payload: true\n                  });\n                }).catch(function (error) {\n                  console.log('kkk', error.message);\n                });\n              }\n            }\n\n            if (data.type === \"Email\") {\n              var EmailshareUserId = [];\n              var emailCount = 0;\n\n              if (sharedata[media_id]['email_User'] !== undefined) {\n                EmailshareUserId = sharedata[media_id]['email_User'];\n              }\n\n              if (sharedata[media_id]['email_Count'] !== undefined) {\n                var _sharedata$media_id3;\n\n                emailCount = (_sharedata$media_id3 = sharedata[media_id]) === null || _sharedata$media_id3 === void 0 ? void 0 : _sharedata$media_id3['email_Count'];\n              }\n\n              if (!EmailshareUserId.includes(share_by)) {\n                EmailshareUserId.push(share_by);\n                UpdatemediaSharePostData[media_id] = {\n                  time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                  email_Count: emailCount + 1,\n                  email_User: EmailshareUserId\n                };\n                firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, {\n                  merge: true\n                }).then(function () {\n                  dispatch({\n                    type: ADD_MEDIA_SHARE_COUNT_SUCCESS,\n                    payload: true\n                  });\n                }).catch(function (error) {\n                  console.log('kkk', error.message);\n                });\n              }\n            }\n          } else {\n            firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, {\n              merge: true\n            }).then(function () {\n              dispatch({\n                type: ADD_MEDIA_SHARE_COUNT_SUCCESS,\n                payload: true\n              });\n            }).catch(function (error) {\n              console.log(error.message);\n            });\n          }\n        }\n      }).catch(function (error) {\n        console.log('errr', error.message);\n      });\n    } else {\n      dispatch({\n        type: ADD_MEDIA_SHARE_COUNT_FAILURE,\n        payload: 'invalid file'\n      });\n      ERROR('invalid file');\n    }\n  } catch (error) {\n    dispatch({\n      type: ADD_MEDIA_SHARE_COUNT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message); // throw error;\n  }\n};","map":{"version":3,"names":["POST_MEDIA_CONTENT_REQUEST","GET_MEDIA_CONTENT_SUCCESS","GET_MEDIA_CONTENT_FAILURE","POST_USER_MEDIA_REQUEST","GET_USER_MEDIA_SUCCESS","GET_USER_MEDIA_FAILURE","POST_USER_MEDIA_MUSIC_REQUEST","GET_USER_MEDIA_MUSIC_SUCCESS","GET_USER_MEDIA_MUSIC_FAILURE","POST_Like_MEDIA_MUSIC_REQUEST","GET_Like_MEDIA_MUSIC_SUCCESS","GET_Like_MEDIA_MUSIC_FAILURE","POST_BOOKMARK_MEDIA_MUSIC_REQUEST","GET_BOOKMARK_MEDIA_MUSIC_SUCCESS","GET_BOOKMARK_MEDIA_MUSIC_FAILURE","POST_USER_BOOKMARK_MUSIC_REQUEST","GET_USER_BOOKMARK_MUSIC_SUCCESS","GET_USER_BOOKMARK_MUSIC_FAILURE","POST_MEDIA_SHARE_COUNT_REQUEST","ADD_MEDIA_SHARE_COUNT_SUCCESS","ADD_MEDIA_SHARE_COUNT_FAILURE","LIKED_NOTIFICATION","POST_CONTENT","firebaseConfig","ERROR","Success","moment","USER_NOTIFICATION","axios","addMediaContent","data","history","dispatch","media_content","type","payload","docRef","firestore","collection","doc","doc_id","id","filename","cover_filename","via","media_type","uid","cover_art","progress","progress_res","set","caption","title","media_url","postedAt","Date","format","postedById","postedByUserName","username","public","userAvatarUrl","then","sendNotificationAllSubscriber","catch","error","message","audstorage","storage","audstorageRef","ref","audiouploadTask","child","put","on","snapshot","bytesTransferred","totalBytes","Math","round","console","log","err","getDownloadURL","url","imageUpload","storageRef","uploadTask","image","folder_name","collection_name","columnname","imagename","fileurl","update","e","getUserMediaContent","user_id","limit","mediaPost","query","totalrecord","where","orderBy","get","querySnapshot","size","forEach","push","MediaTotal","MediaMusicLike","resp","user_likes","merge","docres","postedUserId","by_id","sendNotification","MediaMusicBookmark","user_bookmark","getUserBookmarkMusic_old","bookmark_arr","user_arr","totalRecord","bookmarkTotalData","totalcount","totalbookDoc","totalDocData","undefined","mediares","Object","keys","find","o","bookmarkref","bookDoc","values","length","bookmarkDocData","usrContent","index","userref","snapshot1","username_doc","avatarurl_doc","avatarURL","MusicBookmarkTotal","getUserBookmarkMusic","subscribeobj","res","exists","UserData","subscribed_list","result_arr","userexist","user_active","i","j","getlimit","getbookmarkuserdata","myDisplayer","obj","bookmarkval","myCallback","bookmarkobj","userbookmark","resData","viewPermission","subid","includes","subscribe_type","date","subs_date","checkDate","milliseconds","seconds","cloneDate","setDate","getDate","getTime","getUserMediaMusic","mediaMusicPost","res_arr","doc1","getShareCount","mediaid","totalCount","docs","mediaData","MusicTotal","to_id","from_id","Unread_Notification_Count","Notification_tokens","fromname","fromres","fromdoc","Unread_Notification","notification_data","notification_response","post","status","notifypostdata","notification_id","notifydocRef","time","flag","map","subkeyid","sub_id","replace","subres","subdoc","Recsubiddata","Rec_subs_date","rec_checkDate","rec_cloneDate","StoreMediaShareCount","shareBy","mediaSharePostData","UpdatemediaSharePostData","share_by","mediaId","watsapp_Count","watsapp_User","email_Count","email_User","facebook_Count","facebook_User","userdata","sharedata","media_id","WPshareUserId","watsappCount","FBshareUserId","fbCount","EmailshareUserId","emailCount"],"sources":["/home/asus/dapify/src/Redux/actions/media-actions.js"],"sourcesContent":["import {\n  POST_MEDIA_CONTENT_REQUEST, GET_MEDIA_CONTENT_SUCCESS, GET_MEDIA_CONTENT_FAILURE,\n  POST_USER_MEDIA_REQUEST, GET_USER_MEDIA_SUCCESS, GET_USER_MEDIA_FAILURE,\n  POST_USER_MEDIA_MUSIC_REQUEST, GET_USER_MEDIA_MUSIC_SUCCESS, GET_USER_MEDIA_MUSIC_FAILURE,\n  POST_Like_MEDIA_MUSIC_REQUEST, GET_Like_MEDIA_MUSIC_SUCCESS, GET_Like_MEDIA_MUSIC_FAILURE,\n  //POST_SHARE_MEDIA_MUSIC_REQUEST, GET_SHARE_MEDIA_MUSIC_SUCCESS, GET_SHARE_MEDIA_MUSIC_FAILURE,\n  POST_BOOKMARK_MEDIA_MUSIC_REQUEST, GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, GET_BOOKMARK_MEDIA_MUSIC_FAILURE,\n  POST_USER_BOOKMARK_MUSIC_REQUEST, GET_USER_BOOKMARK_MUSIC_SUCCESS, GET_USER_BOOKMARK_MUSIC_FAILURE,\n  POST_MEDIA_SHARE_COUNT_REQUEST,ADD_MEDIA_SHARE_COUNT_SUCCESS,ADD_MEDIA_SHARE_COUNT_FAILURE,\n  LIKED_NOTIFICATION, POST_CONTENT,\n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\n//import { keyboardControls } from 'react-media-player/lib/utils';\nimport {\n  USER_NOTIFICATION\n\n} from './api_url';\nimport axios from 'axios';\n\n\nexport const addMediaContent = (data, history) => async (dispatch) => {\n  try {\n    if (data.media_content !== '') {\n\n      dispatch({ type: POST_MEDIA_CONTENT_REQUEST, payload: true });\n      const docRef = firebaseConfig.firestore().collection('user_contents').doc()\n      const doc_id = docRef.id;\n\n      var filename = '';\n      var cover_filename = '';\n      var via = '';\n      if (data.media_type === \"image\") {\n        filename = data.uid + '_' + doc_id + '.png';\n      }\n      if (data.media_type === \"video\") {\n        filename = data.uid + '_' + doc_id + '.mp4';\n        via = data.via;\n      }\n      if (data.media_type === \"audio\") {\n        filename = data.uid + '_' + doc_id + '.mp3';\n        if (data.cover_art) {\n          cover_filename = data.uid + '_' + doc_id + '.png';\n        }\n      }\n      var progress = 0;\n      var progress_res = 0;\n      if (via === 'youtube') {\n\n        firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n          caption: data.title,\n          id: doc_id,\n          media_type: data.media_type,\n          media_url: data.media_content,\n          postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          postedById: data.uid,\n          postedByUserName: data.username,\n          public: data.public,\n          userAvatarUrl: data.userAvatarUrl,\n          via: via,\n\n        }).then(async function () {\n          progress = 0;\n          await sendNotificationAllSubscriber(data.uid);\n          dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n          Success('Added Successfully');\n\n\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n        })\n      }\n      else {\n        if (data.media_type === \"audio\") {\n\n          var audstorage = firebaseConfig.storage();\n          var audstorageRef = audstorage.ref();\n          var audiouploadTask = audstorageRef.child('media_contents/' + filename).put(data.media_content)\n          audiouploadTask.on('state_changed', function (snapshot) {\n            progress_res = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            progress = (Math.round(progress_res));\n            dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n            console.log('progress1', progress);\n          }, (err) => {\n            ERROR(err.message);\n            dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: err });\n          }, () => {\n            audiouploadTask.snapshot.ref.getDownloadURL().then(async url => {\n\n              //for audio cover image--------------\n              imageUpload(data.cover_art, doc_id, 'audio_cover_image/', 'user_contents', 'cover_art', cover_filename);\n\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via,\n              })\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: 0 });\n              Success('Added Successfully');\n\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n            })\n          })\n\n        } else {\n\n          var storage = firebaseConfig.storage();\n          var storageRef = storage.ref();\n          var uploadTask = storageRef.child('media_contents/' + filename).put(data.media_content)\n          uploadTask.on('state_changed', function (snapshot) {\n            progress_res = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            progress = (Math.round(progress_res));\n            dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n            console.log('progress1', progress);\n          }, (err) => {\n            ERROR(err.message);\n            dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: err });\n          }, () => {\n            uploadTask.snapshot.ref.getDownloadURL().then(async url => {\n\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via,\n              })\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: 0 });\n              Success('Added Successfully');\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n            })\n          })\n        }\n      }\n    }\n    else {\n      dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: 'invalid file' });\n      ERROR('invalid file');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname, filename) {\n  try {\n    if (image !== null) {\n      const imagename = filename;\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n        var fileurl = '';\n        data.ref.getDownloadURL().then(url => {\n\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url,\n          })\n\n        })\n        return fileurl;\n      })\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n// For get user media content \nexport const getUserMediaContent = (user_id, limit) => async dispatch => {\n  try {\n\n\n    dispatch({ type: POST_USER_MEDIA_REQUEST, payload: true });\n    if (user_id) {\n\n      var mediaPost = [];\n      let query = '';\n      var totalrecord = [];\n\n      // for total count----------------------------\n      firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id)\n        .where('media_type', \"in\", [\"image\", \"video\"])\n        .orderBy('postedAt','desc').get().then(function (querySnapshot) {\n          totalrecord = querySnapshot.size;\n        });\n\n      // for load more data---------------------------\n      query = firebaseConfig.firestore().collection('user_contents')\n        .where('postedById', \"==\", user_id)\n        .where('media_type', \"in\", [\"image\", \"video\"])\n        .orderBy('postedAt','desc')\n        .limit(limit);\n\n      query.get().then(snapshot => {\n        snapshot.forEach(doc => {\n\n          mediaPost.push(doc.data());\n\n        })\n        dispatch({ type: GET_USER_MEDIA_SUCCESS, payload: mediaPost, MediaTotal: totalrecord });\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_MEDIA_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_USER_MEDIA_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_MEDIA_FAILURE, payload: error });\n  }\n};\n\nexport const MediaMusicLike = (data) => async dispatch => {\n  try {\n    dispatch({ type: POST_Like_MEDIA_MUSIC_REQUEST, payload: true });\n    if (data.type === 'like') {\n      console.log('likealldata', data);\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({ user_likes: data.user_likes }, { merge: true })\n        .then(async function (docres) {\n\n          if(data.postedUserId !== data.by_id){\n            await sendNotification(data.postedUserId, data.by_id);\n          }\n\n          Success(\"Liked Post Successfully\");\n          dispatch({ type: GET_Like_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n    else {\n\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({ user_likes: data.user_likes })\n        .then(function (docres) {\n\n          Success(\"Unliked Post Successfully\");\n          dispatch({ type: GET_Like_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const MediaMusicBookmark = (data) => async dispatch => {\n  try {\n    dispatch({ type: POST_BOOKMARK_MEDIA_MUSIC_REQUEST, payload: true });\n    if (data.type === 'bookmark') {\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({ user_bookmark: data.user_bookmark }, { merge: true })\n        .then(function (docres) {\n          Success(\"Bookmark Successfully\");\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n    else {\n\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({ user_bookmark: data.user_bookmark })\n        .then(function (docres) {\n          Success(\"Remove from bookmark successfully\");\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserBookmarkMusic_old = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_BOOKMARK_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n\n      var bookmark_arr = [];\n      var user_arr = [];\n      // var bookmark_ttl_arr = [];\n\n      var totalRecord = 0;\n\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents')\n        .where(\"media_type\", \"==\", \"audio\")\n        .orderBy('postedAt','desc')\n      bookmarkTotalData.get().then((snapshot) => {\n        var totalcount = 0;\n        snapshot.forEach((totalbookDoc) => {\n          var totalDocData = totalbookDoc.data()\n          if (totalDocData.user_bookmark !== undefined) {\n\n            var mediares = Object.keys(totalDocData.user_bookmark)\n            if (mediares.find(o => o === user_id)) {\n              // bookmark_ttl_arr.push(totalDocData.id);\n              totalcount = totalcount + 1;\n\n            }\n          }\n        })\n        totalRecord = totalcount;\n\n        // for load more data---------------------------\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents')\n          .where(\"media_type\", \"==\", \"audio\")\n          .orderBy('postedAt','desc')\n        bookmarkref.get().then((snapshot) => {\n\n          snapshot.forEach((bookDoc) => {\n            if (Object.values(bookmark_arr).length < limit) {\n              var bookmarkDocData = bookDoc.data()\n\n              if (bookmarkDocData.user_bookmark !== undefined) {\n\n                var mediares = Object.keys(bookmarkDocData.user_bookmark)\n                if (mediares.find(o => o === user_id)) {\n                  bookmark_arr[bookmarkDocData.id] = bookmarkDocData\n                }\n              }\n            }\n          })\n\n          Object.values(bookmark_arr).forEach(async (usrContent, index) => {\n\n            var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", usrContent.postedById);\n            userref.get().then(snapshot1 => {\n\n              snapshot1.forEach(doc => {\n\n                user_arr = doc.data()\n\n                bookmark_arr[usrContent.id].username_doc = user_arr.username;\n                bookmark_arr[usrContent.id].avatarurl_doc = user_arr.avatarURL;\n\n              })\n\n              dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: bookmark_arr, MusicBookmarkTotal: totalRecord });\n            })\n          })\n\n          // dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: bookmark_arr});\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n        })\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n      })\n\n    } else {\n      dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserBookmarkMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_BOOKMARK_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n      var subscribeobj = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then(async (doc) => {\n        \n        if (!doc.exists) {\n        }\n        else {\n         \n          var UserData = doc.data();\n          subscribeobj = UserData.subscribed_list;\n        }\n      })\n\n      var result_arr = [];\n      var totalRecord = 0;\n\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents')\n        .where(\"media_type\", \"==\", \"audio\")\n        .orderBy('postedAt','desc')\n\n      bookmarkTotalData.get().then((snapshot) => {\n        var totalcount = 0;\n\n        snapshot.forEach((totalbookDoc) => {\n          var totalDocData = totalbookDoc.data()\n          if (totalDocData.user_bookmark !== undefined) {\n\n            var mediares = Object.keys(totalDocData.user_bookmark)\n            if (mediares.find(o => o === user_id)) {\n              const userexist = firebaseConfig.firestore().collection('users').doc(totalDocData.postedById)\n              userexist.get().then((doc) => {\n                if (doc.data().user_active === true) {\n                 \n                  totalcount = totalcount + 1;\n                  totalRecord = totalcount;\n                }\n              })\n            }\n          }\n        })\n\n        console.log('-----totalRecord',totalRecord);\n        // for load more data---------------------------\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents')\n          .where(\"media_type\", \"==\", \"audio\")\n          .orderBy('postedAt','desc')\n        bookmarkref.get().then((snapshot1) => {\n          var i = 0;\n          var j = 0;\n\n          var snapshot = [];\n          snapshot1.forEach(async (bookDoc) => {\n            snapshot.push(bookDoc);\n          })\n\n          getlimit(snapshot[i]);\n\n          function getlimit(bookDoc) {\n\n            \n            if (totalRecord !== 0) {\n              if (j < limit && snapshot.length > i) {\n                var bookmarkDocData = bookDoc.data()\n                if (bookmarkDocData.user_bookmark !== undefined) {\n                  var mediares = Object.keys(bookmarkDocData.user_bookmark)\n\n                  if (mediares.find(o => o === user_id)) {\n\n                    getbookmarkuserdata(bookmarkDocData, myDisplayer);\n                    function myDisplayer(obj) {\n\n                      if (Object.keys(obj).length !== 0) {\n                        i = i + 1;\n                        j = j + 1;\n                        result_arr.push(obj);\n                        getlimit(snapshot[i]);\n                      }\n                     \n                      dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: result_arr, MusicBookmarkTotal: totalRecord });\n                    }\n                  }\n                  else {\n                    i = i + 1;\n                    getlimit(snapshot[i]);\n                  }\n                } else {\n                  i = i + 1;\n                  getlimit(snapshot[i]);\n                }\n              }\n            } else {\n\n              dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: result_arr, MusicBookmarkTotal: totalRecord });\n              //dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n            }\n\n          }\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n        })\n\n        async function getbookmarkuserdata(bookmarkval, myCallback) {\n          var bookmarkobj = {};\n          const userbookmark = await firebaseConfig.firestore().collection('users').doc(bookmarkval.postedById);\n          userbookmark.get().then(function (doc) {\n            if (doc.exists) {\n              var resData = '';\n              var viewPermission = false;\n              if (doc.data().user_active === true) {\n                if (Object.keys(subscribeobj).length > 0) {\n                  var subid = bookmarkval.postedById + '_SUBSCRIBER';\n                  if (Object.keys(subscribeobj).includes(subid)) {\n                    resData = subscribeobj[subid];\n                    if(resData.subscribe_type === \"one_time_support\"){\n                      viewPermission = true;\n    \n                    }else{\n                      if (resData.date !== '') {\n                        var subs_date = resData.date;\n                        var checkDate = new Date();\n      \n                        const milliseconds = subs_date.seconds * 1000 // 1575909015000\n                        var cloneDate = new Date(milliseconds)\n      \n                        //for monthly subscription\n      \n                        cloneDate.setDate(cloneDate.getDate() + 30);\n                        if (cloneDate.getTime() > checkDate.getTime()) {\n                          viewPermission = true;\n                        }\n                    }\n                  } \n                }\n                }\n                bookmarkobj[bookmarkval.id] = bookmarkval\n                bookmarkobj[bookmarkval.id].username_doc = doc.data().username;\n                bookmarkobj[bookmarkval.id].avatarurl_doc = doc.data().avatarURL;\n                bookmarkobj[bookmarkval.id].viewPermission = viewPermission;\n                \n                myCallback(bookmarkobj);\n              }\n            }\n          })\n        }\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n      })\n\n    } else {\n      dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserMediaMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_MEDIA_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n\n      let query = '';\n      var totalrecord = [];\n\n      var mediaMusicPost = [];\n      var res_arr = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then((doc1) => {\n\n        // for total count---------------------------\n        firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id)\n          .where('media_type', \"in\", [\"audio\"])\n          .orderBy('postedAt','desc')\n          .get().then(function (querySnapshot) {\n            totalrecord = querySnapshot.size;\n          });\n\n        // for load more data---------------------------\n     \n        query = firebaseConfig.firestore().collection('user_contents')\n          .where('postedById', \"==\", user_id)\n          .where('media_type', \"in\", [\"audio\"])\n          .orderBy('postedAt','desc')\n          .limit(limit);\n\n        query.get().then(snapshot => {\n\n          snapshot.forEach( doc => {\n            \n            res_arr = doc.data();\n           \n            getShareCount(res_arr);\n             \n            async function getShareCount(mediaid) {\n              var totalCount =0;\n              mediaid['share_count'] = totalCount;\n              const res =  await firebaseConfig.firestore().collection('media_share_history').doc(user_id);\n              res.get().then((docs) => {\n                \n                var mediaData = docs.data();\n                if(mediaData !== undefined)\n                {\n                  if(mediaData[mediaid.id] !== undefined)\n                  {\n                    if(mediaData[mediaid.id]['watsapp_Count']){\n                      totalCount += mediaData[mediaid.id]['watsapp_Count'];\n                    }\n                    if(mediaData[mediaid.id]['email_Count']){\n                      totalCount += mediaData[mediaid.id]['email_Count'];\n                    }\n                    if(mediaData[mediaid.id]['facebook_Count']){\n                      totalCount += mediaData[mediaid.id]['facebook_Count'];\n                    }\n                    mediaid['share_count'] = totalCount;\n                  }\n                }\n              })\n            }\n \n            res_arr.username_doc = doc1.data().username;\n            res_arr.avatarurl_doc = doc1.data().avatarURL;\n            \n            mediaMusicPost.push(res_arr);\n\n          })\n\n          console.log('musicccc dataaaa',mediaMusicPost);\n          dispatch({ type: GET_USER_MEDIA_MUSIC_SUCCESS, payload: mediaMusicPost, MusicTotal: totalrecord });\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n        })\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nasync function sendNotification(to_id, from_id) {\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n        var Unread_Notification_Count = 0;\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then(async (fromdoc) => {\n\n              if (!fromdoc.exists) {\n\n                fromname = \"\";\n              }\n              else {\n\n\n                if (doc.data()?.Unread_Notification) {\n                  Unread_Notification_Count = doc.data().Unread_Notification + 1;\n                } else {\n                  Unread_Notification_Count = 1;\n                }\n\n                fromname = fromdoc.data().username;\n                console.log(doc.data().Notification_tokens);\n                const notification_data = {\n\n                  \"title\": \"Post Liked\",\n                  \"body\": fromname + ' ' + LIKED_NOTIFICATION,\n                  \"to\": doc.data().Notification_tokens,\n\n                }\n\n                const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                console.log('notification_response', notification_response);\n                if (notification_response.status === 200) {\n                  var notifypostdata = {};\n                  var notification_id = '';\n                  const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                  console.log('datanotifyyyy', notifydocRef);\n                  notification_id = notifydocRef.id;\n\n                  notifypostdata[notification_id] = {\n\n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    type: \"LIKED_NOTIFICATION\",\n                    user_id: from_id,\n                    status: 'unread',\n                    flag: true,\n\n                  }\n                  firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, { merge: true }).then(function () {\n                    firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                      'Unread_Notification': Unread_Notification_Count,\n                    }).then(function (docres) {\n\n                    }).catch(function (error) {\n                      ERROR(error.message);\n\n                    });\n                  }).catch(function (error) {\n                    console.log(error.message);\n                  })\n\n                }\n              }\n            });\n\n          }\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nasync function sendNotificationAllSubscriber(uid) {\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n      }\n      else {\n        var fromname = '';\n        fromname = doc.data().username;\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n        if (subscribeobj !== '') {\n\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n            if (subkeyid.includes('_RECIEVER')) {\n              var sub_id = subkeyid.replace('_RECIEVER', '');\n\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async (subdoc) => {\n\n                if (!subdoc.exists) {\n\n                }\n                else {\n                  var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n                  var Unread_Notification_Count = 0;\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                   \n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"POST_CONTENT\",\n                              \"body\": fromname + ' ' + POST_CONTENT,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n                            if (subdoc.data()?.Unread_Notification) {\n                              Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                            } else {\n                              Unread_Notification_Count = 1;\n                            }\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n\n                              var notifypostdata = {};\n                              var notification_id = '';\n                              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                              console.log('datanotifyyyy', notifydocRef);\n                              notification_id = notifydocRef.id;\n\n                              notifypostdata[notification_id] = {\n\n                                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                                type: \"POST_CONTENT\",\n                                user_id: uid,\n                                status: 'unread',\n                                flag: true,\n\n                              }\n                              firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, { merge: true }).then(function () {\n                                firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                                  'Unread_Notification': Unread_Notification_Count,\n                                }).then(function (docres) {\n\n                                }).catch(function (error) {\n                                  ERROR(error.message);\n\n                                });\n                              }).catch(function (error) {\n                                console.log(error.message);\n                              })\n\n                            }\n                          }\n                        }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n                       \n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"POST_CONTENT\",\n                              \"body\": fromname + ' ' + POST_CONTENT,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n                            if (subdoc.data()?.Unread_Notification) {\n                              Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                            } else {\n                              Unread_Notification_Count = 1;\n                            }\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n\n                              var notifypostdata = {};\n                              var notification_id = '';\n                              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                              console.log('datanotifyyyy', notifydocRef);\n                              notification_id = notifydocRef.id;\n\n                              notifypostdata[notification_id] = {\n\n                                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                                type: \"POST_CONTENT\",\n                                user_id: uid,\n                                status: 'unread',\n                                flag: true,\n\n                              }\n                              firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, { merge: true }).then(function () {\n                                firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                                  'Unread_Notification': Unread_Notification_Count,\n                                }).then(function (docres) {\n\n                                }).catch(function (error) {\n                                  ERROR(error.message);\n\n                                });\n                              }).catch(function (error) {\n                                console.log(error.message);\n                              })\n\n                            }\n                          }\n                        }\n                      }\n\n                    }\n                  }\n                }\n              })\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nexport const StoreMediaShareCount = (data, history) => async (dispatch) => {\n  try {\n    if (data.shareBy !== undefined) {\n     \n      dispatch({ type: POST_MEDIA_SHARE_COUNT_REQUEST, payload: true });\n      var mediaSharePostData = {};\n      var UpdatemediaSharePostData ={};\n      var share_by = data.shareBy;\n\n      if(data.type === \"Watsapp\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          watsapp_Count: 1,\n          watsapp_User: [share_by],\n          \n        }\n      }\n\n      if(data.type === \"Email\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          email_Count: 1,\n          email_User: [share_by],\n          \n  \n        }\n      }\n\n      if(data.type === \"Facebook\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          facebook_Count: 1,\n          facebook_User: [share_by],\n          \n  \n        }\n      }\n      const userdata = firebaseConfig.firestore().collection('media_share_history').doc(data.user_id)\n        userdata.get().then(async(doc) => {\n          if (!doc.exists) {\n            firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, { merge: true })\n              .then(function () {\n                dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n              }).catch(function (error) {\n                console.log(error.message);\n              })\n         \n          }else{\n            console.log('docdata-----',doc.data());\n            var sharedata = doc.data();\n            var media_id = data.mediaId;\n\n            console.log('checkout',sharedata[media_id]);\n            if(sharedata[media_id] !== undefined){\n\n              if(data.type === \"Watsapp\"){\n\n                var WPshareUserId =[];\n                var watsappCount = 0;\n                if(sharedata[media_id]['watsapp_User'] !== undefined){\n                  WPshareUserId = sharedata[media_id]['watsapp_User'];\n                }\n                if(sharedata[media_id]['watsapp_Count'] !== undefined){\n                  watsappCount = sharedata[media_id]?.['watsapp_Count'];\n                }\n               \n                if(!WPshareUserId.includes(share_by)){\n                  WPshareUserId.push(share_by);\n                  \n                  \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    watsapp_Count: watsappCount+1,\n                    watsapp_User: WPshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                 \n                }\n              }\n\n              if(data.type === \"Facebook\"){\n\n                var FBshareUserId =[];\n                var fbCount = 0;\n                if(sharedata[media_id]['facebook_User'] !== undefined){\n                  FBshareUserId = sharedata[media_id]['facebook_User'];\n                }\n                if(sharedata[media_id]['facebook_Count'] !== undefined){\n                  fbCount = sharedata[media_id]?.['facebook_Count'];\n                }\n               \n                if(!FBshareUserId.includes(share_by)){\n                  FBshareUserId.push(share_by);\n                  \n                  \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    facebook_Count: fbCount+1,\n                    facebook_User: FBshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                 \n                }\n              }\n\n              if(data.type === \"Email\"){\n                var EmailshareUserId =[];\n                var emailCount = 0;\n                if(sharedata[media_id]['email_User'] !== undefined){\n                  EmailshareUserId = sharedata[media_id]['email_User'];\n                }\n                if(sharedata[media_id]['email_Count'] !== undefined){\n                  emailCount = sharedata[media_id]?.['email_Count'];\n                }\n                if(!EmailshareUserId.includes(share_by)){\n                  EmailshareUserId.push(share_by);\n               \n                 \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    email_Count: emailCount+1,\n                    email_User: EmailshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                }\n              }\n            }else{\n              firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, { merge: true })\n              .then(function () {\n                dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n              }).catch(function (error) {\n                console.log(error.message);\n              })\n            }\n\n          }\n        }).catch(function (error){\n          console.log('errr',error.message);\n        })\n\n    }\n    else {\n      dispatch({ type: ADD_MEDIA_SHARE_COUNT_FAILURE, payload: 'invalid file' });\n      ERROR('invalid file');\n    }\n\n  } catch (error) {\n    dispatch({ type: ADD_MEDIA_SHARE_COUNT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}