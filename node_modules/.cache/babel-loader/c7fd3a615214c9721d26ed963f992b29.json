{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  constructor(code, message) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\"\n  /* UNAUTHORIZED_APP */\n  , 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel() {\n    let _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if (!hitServer || this.isRetryStatusCode_(status)) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  isRetryStatusCode_(status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1() {\n  const BlobBuilder = getBlobBuilder();\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n\n    return this.xhr_.response;\n  }\n\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n\n}\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n\n}\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n\n}\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob) {\n    let metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n\n      switch (this._state) {\n        case \"running\"\n        /* RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* CANCELING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"pausing\"\n      /* PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* PAUSING */\n      :\n        this._transition(\"paused\"\n        /* PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* PAUSED */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  let metadata = arguments.length > 3 ? arguments[3] : undefined;\n\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nasync function listAllHelper(ref, accumulator, pageToken) {\n  const opt = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list$1(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken() {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n\n    const auth = this._authProvider.getImmediate({\n      optional: true\n    });\n\n    if (auth) {\n      const tokenData = await auth.getToken();\n\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n\n    return null;\n  }\n\n  async _getAppCheckToken() {\n    const appCheck = this._appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (appCheck) {\n      const result = await appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n\n      return result.token;\n    }\n\n    return null;\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens(requestInfo, requestFactory) {\n    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n    return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.7\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/location.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/type.ts","../src/implementation/url.ts","../src/implementation/connection.ts","../src/implementation/request.ts","../src/implementation/fs.ts","../src/platform/browser/base64.ts","../src/implementation/string.ts","../src/implementation/blob.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/taskenums.ts","../src/implementation/observer.ts","../src/implementation/async.ts","../src/platform/browser/connection.ts","../src/task.ts","../src/reference.ts","../src/service.ts","../src/constants.ts","../src/api.ts","../src/api.browser.ts","../src/index.ts"],"names":["getBlob","getMetadata","list","getBytes","updateMetadata","fbsAsync","uploadBytes","uploadBytesResumable","listAll","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","requestsDeleteObject","_getChild","connectStorageEmulator","uploadBytesInternal","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","connectEmulatorInternal"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module"}