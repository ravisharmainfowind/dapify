{"ast":null,"code":"import { POST_NEWSLETTER_REQUEST, GET_NEWSLETTER_SUCCESS, GET_NEWSLETTER_FAILURE, POST_SUBSCRIPTION_PAYMENT_REQUEST, GET_SUBSCRIPTION_PAYMENT_SUCCESS, GET_SUBSCRIPTION_PAYMENT_FAILURE, POST_SUBSCRIPTION_EXPIRED_REQUEST, GET_SUBSCRIPTION_EXPIRED_SUCCESS, GET_SUBSCRIPTION_EXPIRED_FAILURE, POST_AUDIENCE_DATA_REQUEST, GET_AUDIENCE_DATA_SUCCESS, GET_AUDIENCE_DATA_FAILURE, POST_SUBSCRIBEUSER_STATUS_REQUEST, GET_SUBSCRIBEUSER_STATUS_SUCCESS, GET_SUBSCRIBEUSER_STATUS_FAILURE, SUBSCRIBED_NOTIFICATION, GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, POST_USER_SUBSCRIBEUSER_COUNT_REQUEST, GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, POST_CREATE_STRIPE_ACCOUNT_REQUEST, GET_CREATE_STRIPE_ACCOUNT_SUCCESS, GET_CREATE_STRIPE_ACCOUNT_FAILURE, POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST, GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS, GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, POST_USER_PAYOUT_REQUEST, GET_USER_PAYOUT_SUCCESS, GET_USER_PAYOUT_FAILURE } from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css';\nimport * as moment from 'moment';\nimport axios from 'axios'; // For firebase registration \n\nimport { PAYMENT_LINK, USER_NOTIFICATION, CREATE_STRIPE_ACCOUNT, CREATE_STRIPE_ACCOUNT_LINK, GET_USER_STRIPE_ACCOUNT_DETAILS, GET_USER_STRIPE_ACCOUNT_LOGIN_LINK, SEND_PAYOUT_REQUEST, PayoutFees } from './api_url';\nexport const addNewsLetter = (data, history) => async dispatch => {\n  try {\n    dispatch({\n      type: POST_NEWSLETTER_REQUEST,\n      payload: true\n    });\n    firebaseConfig.firestore().collection('news_letter/').doc().set({\n      postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n      subscribeTo: data.subscribe_to,\n      email: data.email,\n      subscribeBy: data.subscribe_by\n    }).then(function () {\n      dispatch({\n        type: GET_NEWSLETTER_SUCCESS,\n        payload: true\n      });\n      Success('Added Successfully');\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({\n        type: GET_NEWSLETTER_FAILURE,\n        payload: error\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_NEWSLETTER_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message); // throw error;\n  }\n}; //subscription payment\n\nexport const UserSubscriptionPayment = (data, history) => async dispatch => {\n  try {\n    console.log('postdata', data);\n    dispatch({\n      type: POST_SUBSCRIPTION_PAYMENT_REQUEST,\n      payload: true\n    });\n    const response = await axios.post(PAYMENT_LINK, data);\n    var subid = data.subscribe_user_id;\n    var usrid = data.user_id;\n    console.log('ressssss', response);\n\n    if (response.status === 200) {\n      var post_price = 0;\n      var subscribe_type = '';\n\n      if (data.type === 'subscription') {\n        post_price = 3.99;\n        subscribe_type = \"monthly\";\n      } else {\n        post_price = 25;\n        subscribe_type = \"one_time_support\";\n      }\n\n      const milliseconds = response.data.charge.created * 1000; // 1575909015000\n\n      var paymentDate = new Date(milliseconds);\n      const Transactiondata = {\n        subscribed_by: usrid,\n        recieved_by: subid,\n        charge_id: response.data.charge.id,\n        price: post_price,\n        date: paymentDate,\n        url: response.data.charge.receipt_url,\n        subscribe_type: subscribe_type\n      };\n      const postData = {\n        [subid + '_SUBSCRIBER']: {\n          chargeId: response.data.charge.id,\n          date: paymentDate,\n          price: post_price,\n          receipt_url: response.data.charge.receipt_url,\n          type: 'subscriber',\n          subscribe_type: subscribe_type\n        }\n      };\n      await firebaseConfig.firestore().collection('users').doc(usrid).set({\n        subscribed_list: postData\n      }, {\n        merge: true\n      }).then(function (docres) {\n        const subscribeUserData = {\n          [usrid + '_RECIEVER']: {\n            date: paymentDate,\n            price: post_price,\n            type: 'reciever',\n            subscribe_type: subscribe_type\n          }\n        };\n        firebaseConfig.firestore().collection('users').doc(subid).set({\n          subscribed_list: subscribeUserData\n        }, {\n          merge: true\n        }).then(function (docres) {\n          var sender_user_id = usrid;\n          var reciever_user_id = subid;\n          var revenue_price = post_price;\n          const transData = updateTransactionHistory(Transactiondata).then(function () {\n            const responseRevenue = updateRevenue(sender_user_id, reciever_user_id, revenue_price).then(async function () {\n              await sendNotification(data.subscribe_user_id, data.user_id);\n              dispatch({\n                type: GET_SUBSCRIPTION_PAYMENT_SUCCESS,\n                payload: response\n              });\n              console.log('response', response);\n              Success('Payment Successfully');\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({\n                type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n                payload: error.message\n              });\n            });\n          }).catch(function (error) {\n            ERROR(error.message);\n            console.log('false', error.message);\n            dispatch({\n              type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n              payload: error\n            });\n          });\n        }).catch(function (error) {\n          ERROR(error.message);\n          console.log('false', error.message);\n          dispatch({\n            type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n            payload: error\n          });\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n        dispatch({\n          type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n          payload: error\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n        payload: false\n      });\n      console.log('false', response);\n      ERROR('Something went wrong');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_SUBSCRIPTION_PAYMENT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message);\n    console.log('error.message', error.message); // throw error;\n  }\n};\n\nasync function updateRevenue(sender_user_id, reciever_user_id, revenue_price) {\n  try {\n    if (sender_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(sender_user_id);\n      res.get().then(doc => {\n        if (doc.exists) {\n          var sender_data = doc.data();\n\n          if (sender_data !== null && sender_data !== void 0 && sender_data.subscription) {\n            var _sender_data$subscrip, _sender_data$subscrip2, _sender_data$subscrip3;\n\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if ((_sender_data$subscrip = sender_data.subscription) !== null && _sender_data$subscrip !== void 0 && _sender_data$subscrip.revenue_monthly) {\n              fetch_price = revenue_price + sender_data.subscription.revenue_monthly;\n            } else {\n              fetch_price = fetch_price + revenue_price;\n            }\n\n            if ((_sender_data$subscrip2 = sender_data.subscription) !== null && _sender_data$subscrip2 !== void 0 && _sender_data$subscrip2.total_send_amount) {\n              fetch_total_send = revenue_price + sender_data.subscription.total_send_amount;\n            } else {\n              fetch_total_send = fetch_total_send + revenue_price;\n            }\n\n            if ((_sender_data$subscrip3 = sender_data.subscription) !== null && _sender_data$subscrip3 !== void 0 && _sender_data$subscrip3.total_recieve_amount) {\n              fetch_total_recieve = sender_data.subscription.total_recieve_amount;\n            } else {\n              fetch_total_recieve = 0;\n            }\n\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve\n            };\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n            });\n          } else {\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: revenue_price,\n              total_recieve_amount: 0\n            };\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n      });\n    }\n\n    if (reciever_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(reciever_user_id);\n      res.get().then(doc => {\n        if (doc.exists) {\n          var reciever_data = doc.data();\n\n          if (reciever_data !== null && reciever_data !== void 0 && reciever_data.subscription) {\n            var _reciever_data$subscr, _reciever_data$subscr2, _reciever_data$subscr3;\n\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if ((_reciever_data$subscr = reciever_data.subscription) !== null && _reciever_data$subscr !== void 0 && _reciever_data$subscr.revenue_monthly) {\n              fetch_price = revenue_price + reciever_data.subscription.revenue_monthly;\n            } else {\n              fetch_price = fetch_price + revenue_price;\n            }\n\n            if ((_reciever_data$subscr2 = reciever_data.subscription) !== null && _reciever_data$subscr2 !== void 0 && _reciever_data$subscr2.total_send_amount) {\n              fetch_total_send = reciever_data.subscription.total_send_amount;\n            } else {\n              fetch_total_send = 0;\n            }\n\n            if ((_reciever_data$subscr3 = reciever_data.subscription) !== null && _reciever_data$subscr3 !== void 0 && _reciever_data$subscr3.total_recieve_amount) {\n              var _reciever_data$subscr4;\n\n              fetch_total_recieve = ((_reciever_data$subscr4 = reciever_data.subscription) === null || _reciever_data$subscr4 === void 0 ? void 0 : _reciever_data$subscr4.total_recieve_amount) + revenue_price;\n            } else {\n              fetch_total_recieve = fetch_total_recieve + revenue_price;\n            }\n\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve\n            };\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n            });\n          } else {\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: 0,\n              total_recieve_amount: revenue_price\n            };\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n      });\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nasync function updateTransactionHistory(transactionData) {\n  try {\n    firebaseConfig.firestore().collection('subscription_history/').doc().set(transactionData).then(function () {\n      return true;\n    }).catch(function (error) {\n      ERROR(error.message);\n      console.log('false', error.message);\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} // For get user media content \n\n\nexport const getUserSubscriptionExpired = data => async dispatch => {\n  try {\n    var resData = '';\n    dispatch({\n      type: POST_SUBSCRIPTION_EXPIRED_REQUEST,\n      payload: true\n    });\n\n    if (data.subscriberId) {\n      console.log('sub000000', data);\n      var subid = data.subscriberId + '_SUBSCRIBER';\n      console.log('=============subid==========', subid);\n      var query = firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id).get().then(function (querySnapshot) {\n        querySnapshot.forEach(doc => {\n          var subsData = doc.data();\n          var subscribeobj = subsData.subscribed_list;\n\n          if (Object.keys(subscribeobj).includes(subid)) {\n            resData = subscribeobj[subid];\n            dispatch({\n              type: GET_SUBSCRIPTION_EXPIRED_SUCCESS,\n              payload: resData\n            });\n          } else {\n            dispatch({\n              type: GET_SUBSCRIPTION_EXPIRED_SUCCESS,\n              payload: resData\n            });\n          }\n        });\n      }).catch(function (error) {\n        console.log('error===============', error);\n        dispatch({\n          type: GET_SUBSCRIPTION_EXPIRED_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_SUBSCRIPTION_EXPIRED_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_SUBSCRIPTION_EXPIRED_FAILURE,\n      payload: error\n    });\n  }\n}; // export const getAudienceNew = (data) => async dispatch => {\n//   try {\n//     dispatch({ type: POST_AUDIENCE_DATA_REQUEST, payload: true });\n//     if (data.user_id) {\n//       var subscribeobj = [];\n//       await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n//        .get().then(function (querySnapshot) {\n//         querySnapshot.forEach(doc => {\n//           var UserData = doc.data();\n//           subscribeobj = UserData.subscribed_list;\n//           var audience_res =[];\n//           if(subscribeobj !== ''){\n//             Object.keys(subscribeobj).forEach(async (val, index) => {\n//               if(val.includes('_RECIEVER')){\n//                 var  recv_id = val.replace('_RECIEVER', '');\n//                 if(recv_id){\n//                     var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id);\n//                     userref.get().then(snapshot1 => {\n//                       snapshot1.forEach(doc => {\n//                         var aud_arr = doc.data();\n//                         if(data.type === \"search\"){\n//                           console.log('audname',aud_arr.username);\n//                           console.log('searchname',data.search_keyword);\n//                           if(aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())){\n//                             const audience = {\n//                               aud_id : recv_id,\n//                               aud_name :aud_arr.username,\n//                               aud_profile: aud_arr.avatarURL,\n//                             }\n//                             audience_res.push(audience);\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }else{\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }\n//                         }else{\n//                           const audience = {\n//                             aud_id : recv_id,\n//                             aud_name :aud_arr.username,\n//                             aud_profile: aud_arr.avatarURL,\n//                           } \n//                           audience_res.push(audience);\n//                           dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                         }\n//                       })\n//                     })\n//                   }\n//               }else{\n//                 dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//               }\n//             })\n//             console.log('audienceaudience',audience_res);\n//           }else{\n//             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//           }\n//         })\n//       }).catch(function (error) {\n//         dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n//         ERROR(error.message);\n//       })\n//     } \n//   } catch (error) {\n//     dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: error });\n//     ERROR(error.message);\n//   }\n// };\n\nexport const getAudience = data => async dispatch => {\n  console.log('@@@@@', data);\n\n  try {\n    dispatch({\n      type: POST_AUDIENCE_DATA_REQUEST,\n      payload: true\n    });\n\n    if (data.user_id) {\n      var audience_res = [];\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id).get().then(function (querySnapshot) {\n        querySnapshot.forEach(doc => {\n          var UserData = doc.data();\n          subscribeobj = UserData.subscribed_list;\n          var i = 0;\n\n          if (subscribeobj !== '') {\n            if (data.type === \"search\") {\n              var recver_arr = [];\n              getAudienceDetails(i);\n\n              function getAudienceDetails(i) {\n                var val = Object.keys(subscribeobj);\n\n                if (i > Object.keys(subscribeobj).length - 1) {\n                  dispatch({\n                    type: GET_AUDIENCE_DATA_SUCCESS,\n                    payload: audience_res\n                  });\n                  return;\n                }\n\n                if (val[i]) {\n                  var recv_id = '';\n                  var Recsubiddata = '';\n\n                  if (val[i].includes('_RECIEVER')) {\n                    recv_id = val[i].replace('_RECIEVER', '');\n                    Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                  }\n\n                  if (val[i].includes('_SUBSCRIBER')) {\n                    recv_id = val[i].replace('_SUBSCRIBER', '');\n                    Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                  }\n\n                  if (recv_id !== '') {\n                    firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id).get().then(snapshot1 => {\n                      if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                        snapshot1.forEach(doc => {\n                          if (doc.data() !== undefined) {\n                            var aud_arr = doc.data();\n\n                            if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n                              const audience = {\n                                aud_id: recv_id,\n                                aud_name: aud_arr.username,\n                                aud_profile: aud_arr.avatarURL\n                              };\n\n                              if (!recver_arr.includes(recv_id)) {\n                                recver_arr.push(recv_id);\n                                audience_res.push(audience);\n                              }\n                            }\n                          }\n                        });\n                      } else {\n                        if (Recsubiddata.date !== '') {\n                          var Rec_subs_date = Recsubiddata.date;\n                          var rec_checkDate = new Date();\n                          const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                          var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                          rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                          if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n\n                                if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n                                  const audience = {\n                                    aud_id: recv_id,\n                                    aud_name: aud_arr.username,\n                                    aud_profile: aud_arr.avatarURL\n                                  };\n\n                                  if (!recver_arr.includes(recv_id)) {\n                                    recver_arr.push(recv_id);\n                                    audience_res.push(audience);\n                                  }\n                                }\n                              }\n                            });\n                          }\n                        }\n                      }\n\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }).catch(function (error) {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    });\n                  } else {\n                    i = i + 1;\n                    getAudienceDetails(i);\n                  }\n                }\n              }\n            } else {\n              var recver_arr1 = [];\n              getAudienceDetails(i);\n\n              function getAudienceDetails(i) {\n                var val = Object.keys(subscribeobj);\n\n                if (i > Object.keys(subscribeobj).length - 1) {\n                  dispatch({\n                    type: GET_AUDIENCE_DATA_SUCCESS,\n                    payload: audience_res\n                  });\n                  return;\n                }\n\n                if (val[i]) {\n                  var recv_id = '';\n                  var Recsubiddata = '';\n\n                  if (val[i].includes('_RECIEVER')) {\n                    recv_id = val[i].replace('_RECIEVER', '');\n                    Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                  }\n\n                  if (val[i].includes('_SUBSCRIBER')) {\n                    recv_id = val[i].replace('_SUBSCRIBER', '');\n                    Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                  }\n\n                  console.log('auddatata=======', Recsubiddata);\n\n                  if (recv_id !== '') {\n                    firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id).get().then(snapshot1 => {\n                      if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                        snapshot1.forEach(doc => {\n                          if (doc.data() !== undefined) {\n                            var aud_arr = doc.data();\n                            const audience = {\n                              aud_id: recv_id,\n                              aud_name: aud_arr.username,\n                              aud_profile: aud_arr.avatarURL\n                            };\n                            console.log('recv_id', recv_id);\n                            console.log('recver_arr', recver_arr1);\n\n                            if (!recver_arr1.includes(recv_id)) {\n                              recver_arr1.push(recv_id);\n                              audience_res.push(audience);\n                            }\n                          }\n                        });\n                      } else {\n                        if (Recsubiddata.date !== '') {\n                          var Rec_subs_date = Recsubiddata.date;\n                          var rec_checkDate = new Date();\n                          const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                          var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                          rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                          if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n                                const audience = {\n                                  aud_id: recv_id,\n                                  aud_name: aud_arr.username,\n                                  aud_profile: aud_arr.avatarURL\n                                };\n                                console.log('recv_id', recv_id);\n                                console.log('recver_arr', recver_arr1);\n\n                                if (!recver_arr1.includes(recv_id)) {\n                                  recver_arr1.push(recv_id);\n                                  audience_res.push(audience);\n                                }\n                              }\n                            });\n                          }\n                        }\n                      }\n\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }).catch(function (error) {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    });\n                  } else {\n                    i = i + 1;\n                    getAudienceDetails(i);\n                  }\n                }\n              }\n            }\n          } else {\n            dispatch({\n              type: GET_AUDIENCE_DATA_FAILURE,\n              payload: false\n            });\n          }\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_AUDIENCE_DATA_FAILURE,\n          payload: false\n        });\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_AUDIENCE_DATA_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUserSubscribeStatus = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_SUBSCRIBEUSER_STATUS_REQUEST,\n      payload: true\n    });\n\n    if (data.user_id) {\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id).get().then(function (querySnapshot) {\n        querySnapshot.forEach(doc => {\n          var UserData = doc.data();\n          subscribeobj = UserData.subscribed_list;\n\n          if (Object.keys(subscribeobj).length > 0) {\n            if (Object.keys(subscribeobj).includes(data.subscribe_id + '_SUBSCRIBER')) {\n              var subiddata = subscribeobj[data.subscribe_id + '_SUBSCRIBER'];\n\n              if (subiddata.subscribe_type === \"one_time_support\") {\n                dispatch({\n                  type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                  payload: true\n                });\n              } else {\n                if (subiddata.date !== '') {\n                  var subs_date = subiddata.date;\n                  var checkDate = new Date();\n                  const milliseconds = subs_date.seconds * 1000; // 1575909015000\n\n                  var cloneDate = new Date(milliseconds); //for monthly subscription\n\n                  cloneDate.setDate(cloneDate.getDate() + 30);\n\n                  if (cloneDate.getTime() > checkDate.getTime()) {\n                    dispatch({\n                      type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                      payload: true\n                    });\n                  } else {\n                    dispatch({\n                      type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                      payload: 'expired'\n                    });\n                  }\n                } else {\n                  dispatch({\n                    type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                    payload: false\n                  });\n                }\n              }\n            } else {\n              if (Object.keys(subscribeobj).includes(data.subscribe_id + '_RECIEVER')) {\n                var Recsubiddata = subscribeobj[data.subscribe_id + '_RECIEVER'];\n\n                if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                  dispatch({\n                    type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                    payload: true\n                  });\n                } else {\n                  if (Recsubiddata.date !== '') {\n                    var Rec_subs_date = Recsubiddata.date;\n                    var rec_checkDate = new Date();\n                    const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                    var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                    rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                    if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                      dispatch({\n                        type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                        payload: true\n                      });\n                    } else {\n                      dispatch({\n                        type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                        payload: false\n                      });\n                    }\n                  } else {\n                    dispatch({\n                      type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                      payload: false\n                    });\n                  }\n                }\n              } else {\n                dispatch({\n                  type: GET_SUBSCRIBEUSER_STATUS_SUCCESS,\n                  payload: false\n                });\n              }\n            }\n          } else {\n            dispatch({\n              type: GET_SUBSCRIBEUSER_STATUS_FAILURE,\n              payload: false\n            });\n          }\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_SUBSCRIBEUSER_STATUS_FAILURE,\n          payload: false\n        });\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_SUBSCRIBEUSER_STATUS_FAILURE,\n      payload: error\n    });\n  }\n};\n\nasync function sendNotification(to_id, from_id) {\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async doc => {\n      if (!doc.exists) {//dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      } else {\n        var _doc$data;\n\n        var Unread_Notification_Count = 0;\n\n        if ((_doc$data = doc.data()) !== null && _doc$data !== void 0 && _doc$data.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n            var _doc$data2;\n\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then(fromdoc => {\n              if (!fromdoc.exists) {\n                fromname = \"\";\n              } else {\n                fromname = fromdoc.data().username;\n              }\n            });\n            console.log(doc.data().Notification_tokens);\n            const notification_data = {\n              \"title\": \"Subscribed\",\n              \"body\": fromname + ' ' + SUBSCRIBED_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens\n            };\n\n            if ((_doc$data2 = doc.data()) !== null && _doc$data2 !== void 0 && _doc$data2.Unread_Notification) {\n              Unread_Notification_Count = doc.data().Unread_Notification + 1;\n            } else {\n              Unread_Notification_Count = 1;\n            }\n\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n\n            if (notification_response.status === 200) {\n              var notifypostdata = {};\n              var notification_id = '';\n              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc();\n              console.log('datanotifyyyy', notifydocRef);\n              notification_id = notifydocRef.id;\n              notifypostdata[notification_id] = {\n                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                type: \"SUBSCRIBED_NOTIFICATION\",\n                user_id: from_id,\n                status: 'unread',\n                flag: true\n              };\n              firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, {\n                merge: true\n              }).then(function () {\n                firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                  'Unread_Notification': Unread_Notification_Count\n                }).then(function (docres) {}).catch(function (error) {\n                  ERROR(error.message);\n                });\n              }).catch(function (error) {\n                console.log(error.message);\n              });\n            }\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nexport const getUserSubscriberCount = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_USER_SUBSCRIBEUSER_COUNT_REQUEST,\n      payload: true\n    });\n\n    if (data.user_id) {\n      var subscriberCount = 0;\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id).get().then(function (querySnapshot) {\n        querySnapshot.forEach(doc => {\n          var UserData = doc.data();\n\n          if (UserData !== null && UserData !== void 0 && UserData.subscribed_list) {\n            subscribeobj = UserData.subscribed_list;\n            let i = 0;\n            Object.keys(subscribeobj).map(async function (subkeyid) {\n              if (subkeyid.includes('_RECIEVER')) {\n                var sub_id = subkeyid.replace('_RECIEVER', '');\n                const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n                subres.get().then(async subdoc => {\n                  if (!subdoc.exists) {} else {\n                    var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n\n                    if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                      subscriberCount = subscriberCount + 1;\n\n                      if (i >= Object.keys(subscribeobj).length - 1) {\n                        dispatch({\n                          type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS,\n                          payload: subscriberCount\n                        });\n                      }\n                    } else {\n                      if (Recsubiddata.date !== '') {\n                        var Rec_subs_date = Recsubiddata.date;\n                        var rec_checkDate = new Date();\n                        const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                        var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                        rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                        if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                          subscriberCount = subscriberCount + 1;\n\n                          if (i >= Object.keys(subscribeobj).length - 1) {\n                            dispatch({\n                              type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS,\n                              payload: subscriberCount\n                            });\n                          }\n                        }\n                      }\n                    }\n                  }\n                });\n                i = i + 1;\n              } else {\n                i = i + 1;\n              }\n            });\n          } else {\n            dispatch({\n              type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE,\n              payload: subscriberCount\n            });\n          }\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE,\n          payload: false\n        });\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE,\n      payload: error\n    });\n  }\n}; //subscription payment\n\nexport const CreateStripeAccount = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: POST_CREATE_STRIPE_ACCOUNT_REQUEST,\n        payload: true\n      });\n\n      if (data.type === 'Update' && data.AccountId !== '') {\n        const acc_data = {\n          account: data.AccountId,\n          refresh_url: data.refresh_url,\n          return_url: data.return_url\n        };\n        const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK, acc_data);\n\n        if (response1.status === 200) {\n          var _response1$data$accou;\n\n          if ((_response1$data$accou = response1.data.accountLink) !== null && _response1$data$accou !== void 0 && _response1$data$accou.url) {\n            window.location = response1.data.accountLink.url;\n            dispatch({\n              type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS,\n              payload: response1.data\n            });\n          } else {\n            dispatch({\n              type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n              payload: false\n            });\n            console.log('false');\n            ERROR('Something went wrong');\n          }\n        } else {\n          dispatch({\n            type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n            payload: false\n          });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      } else {\n        const create_data = {\n          email: data.userdata.email\n        };\n        const response = await axios.post(CREATE_STRIPE_ACCOUNT, create_data);\n        console.log('create account ressssss', response);\n\n        if (response.status === 200) {\n          if (response.data.account.id) {\n            const acc_res_data = {\n              accountId: response.data.account.id\n            };\n            const resp = await firebaseConfig.firestore().collection('users').doc(data.userdata.uid).update({\n              'connected_account': acc_res_data\n            }).then(async function (docres) {\n              const acc_data = {\n                account: response.data.account.id,\n                refresh_url: data.refresh_url,\n                return_url: data.return_url\n              };\n              const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK, acc_data);\n\n              if (response1.status === 200) {\n                var _response1$data$accou2;\n\n                if ((_response1$data$accou2 = response1.data.accountLink) !== null && _response1$data$accou2 !== void 0 && _response1$data$accou2.url) {\n                  window.location = response1.data.accountLink.url;\n                  dispatch({\n                    type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS,\n                    payload: response1.data\n                  });\n                } else {\n                  dispatch({\n                    type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n                    payload: false\n                  });\n                  console.log('false');\n                  ERROR('Something went wrong');\n                }\n              } else {\n                dispatch({\n                  type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n                  payload: false\n                });\n                console.log('false');\n                ERROR('Something went wrong');\n              }\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({\n                type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n                payload: error\n              });\n            });\n          } else {\n            dispatch({\n              type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n              payload: false\n            });\n            console.log('false');\n            ERROR('Something went wrong');\n          }\n        } else {\n          dispatch({\n            type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n            payload: false\n          });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      }\n    } else {\n      dispatch({\n        type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n        payload: false\n      });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message);\n    console.log('error.message', error.message); // throw error;\n  }\n}; //stripe account data\n\nexport const getUserAccountDetails = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST,\n        payload: true\n      });\n      const acc_data = {\n        accountId: data.accountId\n      };\n      const response = await axios.post(GET_USER_STRIPE_ACCOUNT_DETAILS, acc_data);\n      console.log('get account ressssss', response);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS,\n          payload: response.data.accountData\n        });\n      } else {\n        dispatch({\n          type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE,\n          payload: false\n        });\n        console.log('false');\n        ERROR('Something went wrong');\n      }\n    } else {\n      dispatch({\n        type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE,\n        payload: false\n      });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE,\n      payload: error.message\n    }); // ERROR(error.message);\n\n    console.log('error.message', error.message); // throw error;\n  }\n}; // create stripe login link\n\nexport const CreateStripeAccountLoginLink = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST,\n        payload: true\n      });\n      const acc_data = {\n        accountId: data.AccountId\n      };\n      const response = await axios.post(GET_USER_STRIPE_ACCOUNT_LOGIN_LINK, acc_data);\n      console.log('get account login  link', response);\n\n      if (response.status === 200) {\n        var _response$data;\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.loginLink) {\n          var _response$data2;\n\n          if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.loginLink.url) {\n            var _response$data3;\n\n            window.location = (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.loginLink.url;\n          }\n        }\n\n        dispatch({\n          type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE,\n          payload: false\n        });\n        console.log('false');\n        ERROR('Something went wrong');\n      }\n    } else {\n      dispatch({\n        type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE,\n        payload: false\n      });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE,\n      payload: error.message\n    }); //ERROR(error.message);\n\n    console.log('error.message', error.message); // throw error;\n  }\n};\nexport const RequestUserPayout = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: POST_USER_PAYOUT_REQUEST,\n        payload: true\n      });\n      const payout_data = {\n        accountId: data.accountId,\n        amount: data.amount,\n        currency: data.currency,\n        transfer_group: data.transfer_group\n      };\n      const response = await axios.post(SEND_PAYOUT_REQUEST, payout_data);\n      console.log('payout response', response);\n\n      if (response.status === 200) {\n        var _response$data4;\n\n        if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.transfer) {\n          var _response$data5;\n\n          if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.transfer) {\n            var transfer_res = response.data.transfer;\n            const milliseconds = transfer_res.created * 1000; // 1575909015000\n\n            var paymentDate = new Date(milliseconds);\n            var payamt = data.amount / 100;\n            var totalValue = payamt + data.revenue * PayoutFees;\n            var remainingAmount = data.revenue - totalValue;\n            var remaining_amt = parseFloat(remainingAmount.toFixed(2));\n            const subscriptiondata = {\n              revenue_monthly: remaining_amt,\n              last_payment: paymentDate\n            };\n            var Payoutdata = {};\n            const payoutRef = firebaseConfig.firestore().collection('transaction_history').doc();\n            var payoutRef_id = payoutRef.id;\n            Payoutdata[payoutRef_id] = {\n              user_id: data.uid,\n              transfer_id: transfer_res.id,\n              transaction_id: transfer_res.balance_transaction,\n              date: paymentDate,\n              payout_amount: payamt,\n              remaining_amount: remaining_amt\n            };\n            firebaseConfig.firestore().collection('transaction_history/').doc(data.uid).set(Payoutdata, {\n              merge: true\n            }).then(function () {\n              firebaseConfig.firestore().collection('users').doc(data.uid).set({\n                subscription: subscriptiondata\n              }, {\n                merge: true\n              }).then(function (docres) {\n                dispatch({\n                  type: GET_USER_PAYOUT_SUCCESS,\n                  payload: transfer_res.balance_transaction\n                });\n                Success('Transfer Successfully');\n              }).catch(function (error) {\n                dispatch({\n                  type: GET_USER_PAYOUT_FAILURE,\n                  payload: error\n                });\n                console.log('false', error.message);\n              });\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({\n                type: GET_USER_PAYOUT_FAILURE,\n                payload: error\n              });\n            });\n          }\n        }\n      } else {\n        dispatch({\n          type: GET_USER_PAYOUT_FAILURE,\n          payload: false\n        });\n        console.log('false');\n        ERROR('Something went wrong');\n      }\n    } else {\n      dispatch({\n        type: GET_USER_PAYOUT_FAILURE,\n        payload: false\n      });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_USER_PAYOUT_FAILURE,\n      payload: error.message\n    });\n    ERROR(error.message);\n    console.log('error.message', error.message); // throw error;\n  }\n};","map":{"version":3,"names":["POST_NEWSLETTER_REQUEST","GET_NEWSLETTER_SUCCESS","GET_NEWSLETTER_FAILURE","POST_SUBSCRIPTION_PAYMENT_REQUEST","GET_SUBSCRIPTION_PAYMENT_SUCCESS","GET_SUBSCRIPTION_PAYMENT_FAILURE","POST_SUBSCRIPTION_EXPIRED_REQUEST","GET_SUBSCRIPTION_EXPIRED_SUCCESS","GET_SUBSCRIPTION_EXPIRED_FAILURE","POST_AUDIENCE_DATA_REQUEST","GET_AUDIENCE_DATA_SUCCESS","GET_AUDIENCE_DATA_FAILURE","POST_SUBSCRIBEUSER_STATUS_REQUEST","GET_SUBSCRIBEUSER_STATUS_SUCCESS","GET_SUBSCRIBEUSER_STATUS_FAILURE","SUBSCRIBED_NOTIFICATION","GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS","POST_USER_SUBSCRIBEUSER_COUNT_REQUEST","GET_USER_SUBSCRIBEUSER_COUNT_FAILURE","POST_CREATE_STRIPE_ACCOUNT_REQUEST","GET_CREATE_STRIPE_ACCOUNT_SUCCESS","GET_CREATE_STRIPE_ACCOUNT_FAILURE","POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST","GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS","GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE","POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST","GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS","GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE","POST_USER_PAYOUT_REQUEST","GET_USER_PAYOUT_SUCCESS","GET_USER_PAYOUT_FAILURE","firebaseConfig","ERROR","Success","moment","axios","PAYMENT_LINK","USER_NOTIFICATION","CREATE_STRIPE_ACCOUNT","CREATE_STRIPE_ACCOUNT_LINK","GET_USER_STRIPE_ACCOUNT_DETAILS","GET_USER_STRIPE_ACCOUNT_LOGIN_LINK","SEND_PAYOUT_REQUEST","PayoutFees","addNewsLetter","data","history","dispatch","type","payload","firestore","collection","doc","set","postedAt","Date","format","subscribeTo","subscribe_to","email","subscribeBy","subscribe_by","then","catch","error","message","UserSubscriptionPayment","console","log","response","post","subid","subscribe_user_id","usrid","user_id","status","post_price","subscribe_type","milliseconds","charge","created","paymentDate","Transactiondata","subscribed_by","recieved_by","charge_id","id","price","date","url","receipt_url","postData","chargeId","subscribed_list","merge","docres","subscribeUserData","sender_user_id","reciever_user_id","revenue_price","transData","updateTransactionHistory","responseRevenue","updateRevenue","sendNotification","res","get","exists","sender_data","subscription","fetch_price","fetch_total_send","fetch_total_recieve","revenue_monthly","total_send_amount","total_recieve_amount","sender_post_data","reciever_data","reciever_post_data","e","transactionData","getUserSubscriptionExpired","resData","subscriberId","query","where","querySnapshot","forEach","subsData","subscribeobj","Object","keys","includes","getAudience","audience_res","UserData","i","recver_arr","getAudienceDetails","val","length","recv_id","Recsubiddata","replace","snapshot1","undefined","aud_arr","username","toLowerCase","search_keyword","audience","aud_id","aud_name","aud_profile","avatarURL","push","Rec_subs_date","rec_checkDate","seconds","rec_cloneDate","setDate","getDate","getTime","recver_arr1","getUserSubscribeStatus","subscribe_id","subiddata","subs_date","checkDate","cloneDate","to_id","from_id","Unread_Notification_Count","Notification_tokens","fromname","fromres","fromdoc","notification_data","Unread_Notification","notification_response","notifypostdata","notification_id","notifydocRef","time","flag","update","getUserSubscriberCount","subscriberCount","map","subkeyid","sub_id","subres","subdoc","CreateStripeAccount","AccountId","acc_data","account","refresh_url","return_url","response1","accountLink","window","location","create_data","userdata","acc_res_data","accountId","resp","uid","getUserAccountDetails","accountData","CreateStripeAccountLoginLink","loginLink","RequestUserPayout","payout_data","amount","currency","transfer_group","transfer","transfer_res","payamt","totalValue","revenue","remainingAmount","remaining_amt","parseFloat","toFixed","subscriptiondata","last_payment","Payoutdata","payoutRef","payoutRef_id","transfer_id","transaction_id","balance_transaction","payout_amount","remaining_amount"],"sources":["/home/asus/dapify/src/Redux/actions/subscriber-actions.js"],"sourcesContent":["import {\n  POST_NEWSLETTER_REQUEST, GET_NEWSLETTER_SUCCESS, GET_NEWSLETTER_FAILURE,\n  POST_SUBSCRIPTION_PAYMENT_REQUEST, GET_SUBSCRIPTION_PAYMENT_SUCCESS, GET_SUBSCRIPTION_PAYMENT_FAILURE,\n  POST_SUBSCRIPTION_EXPIRED_REQUEST, GET_SUBSCRIPTION_EXPIRED_SUCCESS, GET_SUBSCRIPTION_EXPIRED_FAILURE,\n  POST_AUDIENCE_DATA_REQUEST, GET_AUDIENCE_DATA_SUCCESS, GET_AUDIENCE_DATA_FAILURE,\n  POST_SUBSCRIBEUSER_STATUS_REQUEST, GET_SUBSCRIBEUSER_STATUS_SUCCESS, GET_SUBSCRIBEUSER_STATUS_FAILURE,\n  SUBSCRIBED_NOTIFICATION, GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, POST_USER_SUBSCRIBEUSER_COUNT_REQUEST, GET_USER_SUBSCRIBEUSER_COUNT_FAILURE,\n  POST_CREATE_STRIPE_ACCOUNT_REQUEST, GET_CREATE_STRIPE_ACCOUNT_SUCCESS, GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n  POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST, GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS, GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE,\n  POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE,\n  POST_USER_PAYOUT_REQUEST, GET_USER_PAYOUT_SUCCESS, GET_USER_PAYOUT_FAILURE,\n  \n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport axios from 'axios';\n// For firebase registration \nimport {\n  PAYMENT_LINK, USER_NOTIFICATION,\n  CREATE_STRIPE_ACCOUNT,CREATE_STRIPE_ACCOUNT_LINK,GET_USER_STRIPE_ACCOUNT_DETAILS,GET_USER_STRIPE_ACCOUNT_LOGIN_LINK,\n  SEND_PAYOUT_REQUEST,PayoutFees,\n\n} from './api_url';\n\n\nexport const addNewsLetter = (data, history) => async (dispatch) => {\n\n  try {\n\n    dispatch({ type: POST_NEWSLETTER_REQUEST, payload: true });\n\n    firebaseConfig.firestore().collection('news_letter/').doc().set({\n\n      postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n      subscribeTo: data.subscribe_to,\n      email: data.email,\n      subscribeBy: data.subscribe_by,\n\n    }).then(function () {\n\n      dispatch({ type: GET_NEWSLETTER_SUCCESS, payload: true });\n      Success('Added Successfully');\n\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({ type: GET_NEWSLETTER_FAILURE, payload: error });\n\n    })\n  } catch (error) {\n    dispatch({ type: GET_NEWSLETTER_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n//subscription payment\nexport const UserSubscriptionPayment = (data, history) => async (dispatch) => {\n\n  try {\n    console.log('postdata', data);\n\n    dispatch({ type: POST_SUBSCRIPTION_PAYMENT_REQUEST, payload: true });\n\n    const response = await axios.post(PAYMENT_LINK, data);\n    var subid = data.subscribe_user_id;\n    var usrid = data.user_id;\n    console.log('ressssss', response);\n    if (response.status === 200) {\n      var post_price = 0;\n      var subscribe_type = '';\n      if (data.type === 'subscription') {\n        post_price = 3.99;\n        subscribe_type = \"monthly\";\n      } else {\n        post_price = 25;\n        subscribe_type = \"one_time_support\";\n      }\n\n      const milliseconds = response.data.charge.created * 1000 // 1575909015000\n      var paymentDate = new Date(milliseconds)\n\n      const Transactiondata = {\n        subscribed_by: usrid,\n        recieved_by: subid,\n        charge_id: response.data.charge.id,\n        price: post_price,\n        date: paymentDate,\n        url: response.data.charge.receipt_url,\n        subscribe_type: subscribe_type,\n      }\n\n      const postData =\n      {\n        [subid + '_SUBSCRIBER']: {\n\n          chargeId: response.data.charge.id,\n          date: paymentDate,\n          price: post_price,\n          receipt_url: response.data.charge.receipt_url,\n          type: 'subscriber',\n          subscribe_type: subscribe_type,\n        }\n      }\n      await firebaseConfig.firestore().collection('users').doc(usrid).set({\n        subscribed_list: postData\n      }, {\n        merge: true\n      }).then(function (docres) {\n\n        const subscribeUserData =\n        {\n          [usrid + '_RECIEVER']: {\n\n            date: paymentDate,\n            price: post_price,\n            type: 'reciever',\n            subscribe_type: subscribe_type,\n          }\n        }\n\n        firebaseConfig.firestore().collection('users').doc(subid).set({\n          subscribed_list: subscribeUserData\n        }, {\n          merge: true\n        }).then(function (docres) {\n          var sender_user_id = usrid;\n          var reciever_user_id = subid;\n          var revenue_price = post_price;\n\n\n          const transData = updateTransactionHistory(Transactiondata)\n            .then(function () {\n\n              const responseRevenue = updateRevenue(sender_user_id, reciever_user_id, revenue_price)\n                .then(async function () {\n                  await sendNotification(data.subscribe_user_id, data.user_id);\n                  dispatch({ type: GET_SUBSCRIPTION_PAYMENT_SUCCESS, payload: response });\n                  console.log('response', response);\n                  Success('Payment Successfully');\n\n\n                }).catch(function (error) {\n                  ERROR(error.message);\n                  dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error.message });\n                })\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n              dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n            });\n\n        }).catch(function (error) {\n          ERROR(error.message);\n          console.log('false', error.message);\n          dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n        dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n      });\n\n    } else {\n      dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: false });\n      console.log('false', response);\n      ERROR('Something went wrong');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\nasync function updateRevenue(sender_user_id, reciever_user_id, revenue_price) {\n  try {\n\n    if (sender_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(sender_user_id);\n      res.get().then((doc) => {\n\n        if (doc.exists) {\n          var sender_data = doc.data();\n          if (sender_data?.subscription) {\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if (sender_data.subscription?.revenue_monthly) {\n              fetch_price = revenue_price + sender_data.subscription.revenue_monthly;\n            }\n            else {\n              fetch_price = fetch_price + revenue_price;\n            }\n            if (sender_data.subscription?.total_send_amount) {\n              fetch_total_send = revenue_price + sender_data.subscription.total_send_amount;\n            }\n            else {\n              fetch_total_send = fetch_total_send + revenue_price;\n            }\n            if (sender_data.subscription?.total_recieve_amount) {\n              fetch_total_recieve = sender_data.subscription.total_recieve_amount;\n            }\n            else {\n              fetch_total_recieve = 0;\n            }\n\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n          else {\n\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: revenue_price,\n              total_recieve_amount: 0,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n\n      });\n    }\n    if (reciever_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(reciever_user_id);\n      res.get().then((doc) => {\n\n        if (doc.exists) {\n          var reciever_data = doc.data();\n          if (reciever_data?.subscription) {\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if (reciever_data.subscription?.revenue_monthly) {\n              fetch_price = revenue_price + reciever_data.subscription.revenue_monthly;\n            }\n            else {\n              fetch_price = fetch_price + revenue_price;\n            }\n            if (reciever_data.subscription?.total_send_amount) {\n              fetch_total_send = reciever_data.subscription.total_send_amount;\n            }\n            else {\n              fetch_total_send = 0;\n            }\n            if (reciever_data.subscription?.total_recieve_amount) {\n              fetch_total_recieve = reciever_data.subscription?.total_recieve_amount + revenue_price;\n            }\n            else {\n              fetch_total_recieve = fetch_total_recieve + revenue_price;\n            }\n\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n          else {\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: 0,\n              total_recieve_amount: revenue_price,\n            }\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n\n      });\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nasync function updateTransactionHistory(transactionData) {\n  try {\n    firebaseConfig.firestore().collection('subscription_history/').doc().set(transactionData)\n      .then(function () {\n        return true;\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n      })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// For get user media content \nexport const getUserSubscriptionExpired = (data) => async dispatch => {\n  try {\n\n    var resData = '';\n    dispatch({ type: POST_SUBSCRIPTION_EXPIRED_REQUEST, payload: true });\n    if (data.subscriberId) {\n      console.log('sub000000', data);\n      var subid = data.subscriberId + '_SUBSCRIBER';\n      console.log('=============subid==========', subid);\n      var query = firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var subsData = doc.data();\n            var subscribeobj = subsData.subscribed_list;\n\n            if (Object.keys(subscribeobj).includes(subid)) {\n              resData = subscribeobj[subid];\n              dispatch({ type: GET_SUBSCRIPTION_EXPIRED_SUCCESS, payload: resData });\n            } else {\n              dispatch({ type: GET_SUBSCRIPTION_EXPIRED_SUCCESS, payload: resData });\n            }\n          })\n\n        }).catch(function (error) {\n\n          console.log('error===============', error);\n          dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: false });\n        })\n    } else {\n      dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: error });\n  }\n};\n\n\n// export const getAudienceNew = (data) => async dispatch => {\n//   try {\n\n//     dispatch({ type: POST_AUDIENCE_DATA_REQUEST, payload: true });\n//     if (data.user_id) {\n\n//       var subscribeobj = [];\n//       await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n//        .get().then(function (querySnapshot) {\n//         querySnapshot.forEach(doc => {\n//           var UserData = doc.data();\n//           subscribeobj = UserData.subscribed_list;\n//           var audience_res =[];\n//           if(subscribeobj !== ''){\n\n//             Object.keys(subscribeobj).forEach(async (val, index) => {\n//               if(val.includes('_RECIEVER')){\n//                 var  recv_id = val.replace('_RECIEVER', '');\n//                 if(recv_id){\n\n//                     var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id);\n//                     userref.get().then(snapshot1 => {\n\n//                       snapshot1.forEach(doc => {\n\n//                         var aud_arr = doc.data();\n//                         if(data.type === \"search\"){\n\n//                           console.log('audname',aud_arr.username);\n//                           console.log('searchname',data.search_keyword);\n\n//                           if(aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())){\n\n//                             const audience = {\n//                               aud_id : recv_id,\n//                               aud_name :aud_arr.username,\n//                               aud_profile: aud_arr.avatarURL,\n//                             }\n\n//                             audience_res.push(audience);\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }else{\n\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }\n//                         }else{\n//                           const audience = {\n//                             aud_id : recv_id,\n//                             aud_name :aud_arr.username,\n//                             aud_profile: aud_arr.avatarURL,\n//                           } \n\n//                           audience_res.push(audience);\n//                           dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                         }\n\n//                       })\n//                     })\n//                   }\n\n//               }else{\n//                 dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//               }\n//             })\n//             console.log('audienceaudience',audience_res);\n\n\n//           }else{\n//             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//           }\n//         })\n\n//       }).catch(function (error) {\n//         dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n//         ERROR(error.message);\n//       })\n//     } \n\n//   } catch (error) {\n//     dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: error });\n//     ERROR(error.message);\n//   }\n// };\n\n\nexport const getAudience = (data) => async dispatch => {\n  console.log('@@@@@',data);\n  try {\n\n    dispatch({ type: POST_AUDIENCE_DATA_REQUEST, payload: true });\n    if (data.user_id) {\n      var audience_res = [];\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n            subscribeobj = UserData.subscribed_list;\n            var i = 0;\n            if (subscribeobj !== '') {\n\n              if (data.type === \"search\") {\n                var recver_arr = [];\n                getAudienceDetails(i);\n                function getAudienceDetails(i) {\n                  var val = Object.keys(subscribeobj);\n\n                  if (i > Object.keys(subscribeobj).length - 1) {\n\n                    dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res });\n                    return;\n                  }\n\n                  if (val[i]) {\n\n                    var recv_id = '';\n                    var Recsubiddata = '';\n                    if (val[i].includes('_RECIEVER')) {\n                      recv_id = val[i].replace('_RECIEVER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                    }\n                    if (val[i].includes('_SUBSCRIBER')) {\n                      recv_id = val[i].replace('_SUBSCRIBER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                    }\n\n                    if (recv_id !== '') {\n\n                      firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id)\n                        .get().then(snapshot1 => {\n\n                          if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n                                if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n\n                                  const audience = {\n                                    aud_id: recv_id,\n                                    aud_name: aud_arr.username,\n                                    aud_profile: aud_arr.avatarURL,\n                                  }\n\n\n                                  if (!recver_arr.includes(recv_id)) {\n                                    recver_arr.push(recv_id);\n                                    audience_res.push(audience);\n                                  }\n\n                                }\n                              }\n                            })\n                          } else {\n                            if (Recsubiddata.date !== '') {\n                              var Rec_subs_date = Recsubiddata.date;\n                              var rec_checkDate = new Date();\n\n                              const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                              var rec_cloneDate = new Date(milliseconds)\n\n                              //for monthly subscription\n\n                              rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                              if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                                snapshot1.forEach(doc => {\n                                  if (doc.data() !== undefined) {\n                                    var aud_arr = doc.data();\n                                    if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n\n                                      const audience = {\n                                        aud_id: recv_id,\n                                        aud_name: aud_arr.username,\n                                        aud_profile: aud_arr.avatarURL,\n                                      }\n\n\n                                      if (!recver_arr.includes(recv_id)) {\n                                        recver_arr.push(recv_id);\n                                        audience_res.push(audience);\n                                      }\n\n                                    }\n                                  }\n                                })\n                              }\n                            }\n                          }\n\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        }).catch(function (error) {\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        })\n                    } else {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }\n\n                  }\n                }\n              } else {\n                var recver_arr1 = [];\n                getAudienceDetails(i);\n                function getAudienceDetails(i) {\n\n                  var val = Object.keys(subscribeobj);\n\n                  if (i > Object.keys(subscribeobj).length - 1) {\n\n                    dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res });\n                    return;\n                  }\n\n                  if (val[i]) {\n\n                    var recv_id = '';\n                    var Recsubiddata = '';\n\n                    if (val[i].includes('_RECIEVER')) {\n                      recv_id = val[i].replace('_RECIEVER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                    }\n                    if (val[i].includes('_SUBSCRIBER')) {\n                      recv_id = val[i].replace('_SUBSCRIBER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                    }\n\n                    console.log('auddatata=======', Recsubiddata);\n                    if (recv_id !== '') {\n\n                      firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id)\n                        .get().then(snapshot1 => {\n                          if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n\n                                const audience = {\n                                  aud_id: recv_id,\n                                  aud_name: aud_arr.username,\n                                  aud_profile: aud_arr.avatarURL,\n                                }\n                                console.log('recv_id', recv_id);\n                                console.log('recver_arr', recver_arr1);\n                                if (!recver_arr1.includes(recv_id)) {\n                                  recver_arr1.push(recv_id);\n                                  audience_res.push(audience);\n                                }\n                              }\n                            })\n                          }\n                          else {\n                            if (Recsubiddata.date !== '') {\n                              var Rec_subs_date = Recsubiddata.date;\n                              var rec_checkDate = new Date();\n\n                              const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                              var rec_cloneDate = new Date(milliseconds)\n\n                              //for monthly subscription\n\n                              rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                              if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                                snapshot1.forEach(doc => {\n                                  if (doc.data() !== undefined) {\n                                    var aud_arr = doc.data();\n\n                                    const audience = {\n                                      aud_id: recv_id,\n                                      aud_name: aud_arr.username,\n                                      aud_profile: aud_arr.avatarURL,\n                                    }\n                                    console.log('recv_id', recv_id);\n                                    console.log('recver_arr', recver_arr1);\n                                    if (!recver_arr1.includes(recv_id)) {\n                                      recver_arr1.push(recv_id);\n                                      audience_res.push(audience);\n                                    }\n                                  }\n                                })\n                              }\n                            }\n                          }\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        }).catch(function (error) {\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        })\n                    } else {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }\n\n                  }\n                }\n              }\n\n            } else {\n              dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n\n        })\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: error });\n\n  }\n};\n\nexport const getUserSubscribeStatus = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_SUBSCRIBEUSER_STATUS_REQUEST, payload: true });\n    if (data.user_id) {\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n            subscribeobj = UserData.subscribed_list;\n\n            if (Object.keys(subscribeobj).length > 0) {\n\n              if (Object.keys(subscribeobj).includes(data.subscribe_id + '_SUBSCRIBER')) {\n                var subiddata = subscribeobj[data.subscribe_id + '_SUBSCRIBER'];\n              \n                if(subiddata.subscribe_type === \"one_time_support\"){\n                  dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n\n                }else{\n\n                  if (subiddata.date !== '') {\n                    var subs_date = subiddata.date;\n                    var checkDate = new Date();\n  \n                    const milliseconds = subs_date.seconds * 1000 // 1575909015000\n                    var cloneDate = new Date(milliseconds)\n  \n                    //for monthly subscription\n  \n                    cloneDate.setDate(cloneDate.getDate() + 30);\n                    if (cloneDate.getTime() > checkDate.getTime()) {\n  \n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n                    }\n                    else {\n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: 'expired' });\n                    }\n  \n                  } else {\n                    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                  }\n                }\n               \n              } else {\n                if (Object.keys(subscribeobj).includes(data.subscribe_id + '_RECIEVER')) {\n                  var Recsubiddata = subscribeobj[data.subscribe_id + '_RECIEVER'];\n                  if(Recsubiddata.subscribe_type === \"one_time_support\"){\n                    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n  \n                  }else{\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n                        dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n                      }\n                      else {\n                        dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                      }\n\n                    } else {\n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                    }\n                  }\n                } else {\n                  dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                }\n              }\n\n            } else {\n\n              dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: false });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: false });\n\n        })\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: error });\n\n  }\n};\n\n\nasync function sendNotification(to_id, from_id) {\n  try {\n\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n        var Unread_Notification_Count = 0;\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then((fromdoc) => {\n\n              if (!fromdoc.exists) {\n\n                fromname = \"\";\n              }\n              else {\n                fromname = fromdoc.data().username;\n              }\n            });\n            console.log(doc.data().Notification_tokens);\n            const notification_data = {\n\n              \"title\": \"Subscribed\",\n              \"body\": fromname + ' ' + SUBSCRIBED_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens,\n            }\n            if (doc.data()?.Unread_Notification) {\n              Unread_Notification_Count = doc.data().Unread_Notification + 1;\n            } else {\n              Unread_Notification_Count = 1;\n            }\n\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n            if (notification_response.status === 200) {\n\n              var notifypostdata = {};\n              var notification_id = '';\n              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n              console.log('datanotifyyyy', notifydocRef);\n              notification_id = notifydocRef.id;\n\n              notifypostdata[notification_id] = {\n\n                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                type: \"SUBSCRIBED_NOTIFICATION\",\n                user_id: from_id,\n                status: 'unread',\n                flag: true,\n\n              }\n              firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, { merge: true }).then(function () {\n                firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                  'Unread_Notification': Unread_Notification_Count,\n                }).then(function (docres) {\n\n                }).catch(function (error) {\n                  ERROR(error.message);\n\n                });\n              }).catch(function (error) {\n                console.log(error.message);\n              })\n\n            }\n          }\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nexport const getUserSubscriberCount = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_SUBSCRIBEUSER_COUNT_REQUEST, payload: true });\n    if (data.user_id) {\n      var subscriberCount = 0;\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n\n            if (UserData?.subscribed_list) {\n              subscribeobj = UserData.subscribed_list;\n              let i = 0;\n              Object.keys(subscribeobj).map(async function (subkeyid) {\n                if (subkeyid.includes('_RECIEVER')) {\n                  var sub_id = subkeyid.replace('_RECIEVER', '');\n                  const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n                  subres.get().then(async (subdoc) => {\n\n                    if (!subdoc.exists) {\n\n                    }\n                    else {\n                      var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n\n                      if(Recsubiddata.subscribe_type === \"one_time_support\"){\n                        subscriberCount = subscriberCount + 1;\n                        if (i >= Object.keys(subscribeobj).length - 1) {\n                          dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, payload: subscriberCount });\n                        }\n                      }else{\n                        if (Recsubiddata.date !== '') {\n                          var Rec_subs_date = Recsubiddata.date;\n                          var rec_checkDate = new Date();\n  \n                          const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                          var rec_cloneDate = new Date(milliseconds)\n  \n                          //for monthly subscription\n  \n                          rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                          if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                            subscriberCount = subscriberCount + 1;\n                            if (i >= Object.keys(subscribeobj).length - 1) {\n                              dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, payload: subscriberCount });\n                            }\n                          }\n                        }\n                      }\n                    }\n                  })\n                  i = i + 1;\n                } else {\n                  i = i + 1;\n                }\n              })\n\n            } else {\n\n              dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: subscriberCount });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: false });\n        })\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: error });\n\n  }\n};\n\n\n//subscription payment\nexport const CreateStripeAccount = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_CREATE_STRIPE_ACCOUNT_REQUEST, payload: true });\n      \n    if(data.type === 'Update' && data.AccountId !== ''){\n      const acc_data ={\n        account: data.AccountId,\n        refresh_url :data.refresh_url, \n        return_url :data.return_url,\n\n      }\n\n      const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK,acc_data);\n      if(response1.status === 200){\n        if(response1.data.accountLink?.url){\n          window.location = response1.data.accountLink.url;\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS, payload: response1.data});\n        }else{\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      }else{\n        dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n        console.log('false');\n        ERROR('Something went wrong');\n      }\n    }else{\n      \n    \n        const create_data={\n          email: data.userdata.email,\n        }\n        const response = await axios.post(CREATE_STRIPE_ACCOUNT,create_data);\n      \n        console.log('create account ressssss', response);\n        if (response.status === 200) {\n          \n          if(response.data.account.id){\n            \n            const acc_res_data = {\n              accountId :response.data.account.id,\n            }\n            const resp = await firebaseConfig.firestore().collection('users').doc(data.userdata.uid).update({ 'connected_account': acc_res_data })\n            .then(async function (docres) {\n              const acc_data ={\n                account: response.data.account.id,\n                refresh_url :data.refresh_url, \n                return_url :data.return_url,\n        \n              }\n        \n              const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK,acc_data);\n              if(response1.status === 200){\n                if(response1.data.accountLink?.url){\n                  window.location = response1.data.accountLink.url;\n                  dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS, payload: response1.data });\n                }else{\n                  dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n                  console.log('false');\n                  ERROR('Something went wrong');\n                }\n              }else{\n                dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n                console.log('false');\n                ERROR('Something went wrong');\n              }\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: error });\n            });\n            \n          }else {\n            dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n            console.log('false');\n            ERROR('Something went wrong');\n          }\n        } else {\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      }\n  } else {\n    dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\n//stripe account data\nexport const getUserAccountDetails = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST, payload: true });\n  \n    const acc_data={\n      accountId: data.accountId,\n     }\n    const response = await axios.post(GET_USER_STRIPE_ACCOUNT_DETAILS,acc_data);\n   \n    console.log('get account ressssss', response);\n    if (response.status === 200) {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS, payload: response.data.accountData });\n      \n    } else {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: error.message });\n   // ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\n// create stripe login link\nexport const CreateStripeAccountLoginLink = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST, payload: true });\n  \n    const acc_data={\n      accountId: data.AccountId,\n     }\n    const response = await axios.post(GET_USER_STRIPE_ACCOUNT_LOGIN_LINK,acc_data);\n   \n    console.log('get account login  link', response);\n    if (response.status === 200) {\n      if(response.data?.loginLink){\n        if(response.data?.loginLink.url){\n          window.location = response.data?.loginLink.url;\n        }\n      }\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS, payload: response.data });\n      \n    } else {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: error.message });\n    //ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\nexport const RequestUserPayout = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_PAYOUT_REQUEST, payload: true });\n  \n    const payout_data={\n      accountId: data.accountId,\n      amount :  data.amount,\n      currency: data.currency,\n      transfer_group: data.transfer_group,\n     }\n    const response = await axios.post(SEND_PAYOUT_REQUEST,payout_data);\n   \n    console.log('payout response', response);\n    if (response.status === 200) {\n      if(response.data?.transfer){\n        if(response.data?.transfer){\n\n          var transfer_res = response.data.transfer;\n          const milliseconds = transfer_res.created * 1000 ;// 1575909015000\n          var paymentDate = new Date(milliseconds);\n          var payamt = data.amount/100;\n          var totalValue = payamt + data.revenue * PayoutFees;\n          var remainingAmount = (data.revenue - totalValue);\n          var remaining_amt = parseFloat(remainingAmount.toFixed(2));\n\n          const subscriptiondata = {\n           \n            revenue_monthly: remaining_amt,\n            last_payment: paymentDate,\n           \n          }\n          var Payoutdata = {};\n          const payoutRef = firebaseConfig.firestore().collection('transaction_history').doc();\n            \n            var payoutRef_id = payoutRef.id;\n\n            Payoutdata[payoutRef_id] = {\n            user_id: data.uid,\n            transfer_id: transfer_res.id,\n            transaction_id: transfer_res.balance_transaction,\n            date: paymentDate,\n            payout_amount: payamt,\n            remaining_amount : remaining_amt,\n\n          }\n          firebaseConfig.firestore().collection('transaction_history/').doc(data.uid).set(Payoutdata, { merge: true })\n          .then(function () {\n            \n            firebaseConfig.firestore().collection('users').doc(data.uid).set({\n              subscription: subscriptiondata\n            }, {\n              merge: true\n            }).then(function (docres) {\n                dispatch({ type: GET_USER_PAYOUT_SUCCESS, payload: transfer_res.balance_transaction });\n                Success('Transfer Successfully');\n            }).catch(function (error) {\n                dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error });\n                console.log('false', error.message);\n  \n            });\n      \n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error });\n      \n          })\n        }\n      }\n      \n    } else {\n      dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}