{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs3/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs3/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context21;\n\n      _forEachInstanceProperty(_context21 = ownKeys(Object(source), true)).call(_context21, function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context22;\n\n      _forEachInstanceProperty(_context22 = ownKeys(Object(source))).call(_context22, function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport _setInterval from \"@babel/runtime-corejs3/core-js-stable/set-interval\";\nimport _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\";\nimport _Object$defineProperties from \"@babel/runtime-corejs3/core-js-stable/object/define-properties\";\nimport _Object$defineProperty from \"@babel/runtime-corejs3/core-js-stable/object/define-property\";\nimport createEmotion from '@emotion/css/create-instance';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport createCSSKey from '../createCSSKey';\nimport createDebug from '../utils/debug';\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport State1Context from './State1Context';\nimport State2Context from './State2Context';\nimport StateContext from './StateContext';\nimport styleConsole from '../utils/styleConsole';\nimport useStateRef from '../hooks/internal/useStateRef';\n\nvar DEFAULT_SCROLLER = function DEFAULT_SCROLLER() {\n  return Infinity;\n};\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\n\nvar emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return _setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      debugFromProp = _ref2.debug,\n      initialScrollBehavior = _ref2.initialScrollBehavior,\n      mode = _ref2.mode,\n      nonce = _ref2.nonce,\n      scroller = _ref2.scroller;\n  var debug = useMemo(function () {\n    return createDebug(\"<ScrollToBottom>\", {\n      force: debugFromProp\n    });\n  }, [debugFromProp]);\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = useRef(0);\n  var initialScrollBehaviorRef = useRef(initialScrollBehavior);\n\n  var _useStateRef = useStateRef(mode === MODE_TOP ? 0 : '100%'),\n      _useStateRef2 = _slicedToArray(_useStateRef, 3),\n      animateTo = _useStateRef2[0],\n      setAnimateTo = _useStateRef2[1],\n      animateToRef = _useStateRef2[2];\n\n  var _useStateRef3 = useStateRef(null),\n      _useStateRef4 = _slicedToArray(_useStateRef3, 3),\n      target = _useStateRef4[0],\n      setTarget = _useStateRef4[1],\n      targetRef = _useStateRef4[2]; // Internal context\n\n\n  var animateFromRef = useRef(0);\n  var offsetHeightRef = useRef(0);\n  var scrollHeightRef = useRef(0); // State context\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      atBottom = _useState2[0],\n      setAtBottom = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      atEnd = _useState4[0],\n      setAtEnd = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      atTop = _useState6[0],\n      setAtTop = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      atStart = _useState8[0],\n      setAtStart = _useState8[1];\n\n  var _useStateRef5 = useStateRef(true),\n      _useStateRef6 = _slicedToArray(_useStateRef5, 3),\n      sticky = _useStateRef6[0],\n      setSticky = _useStateRef6[1],\n      stickyRef = _useStateRef6[2]; // High-rate state context\n\n\n  var scrollPositionObserversRef = useRef([]);\n  var observeScrollPosition = useCallback(function (fn) {\n    var target = targetRef.current;\n    scrollPositionObserversRef.current.push(fn);\n    target && fn({\n      scrollTop: target.scrollTop\n    });\n    return function () {\n      var scrollPositionObservers = scrollPositionObserversRef.current;\n\n      var index = _indexOfInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, fn);\n\n      ~index && _spliceInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, index, 1);\n    };\n  }, [scrollPositionObserversRef, targetRef]);\n  var handleSpineToEnd = useCallback(function () {\n    var animateTo = animateToRef.current;\n    debug(function () {\n      var _context;\n\n      return _concatInstanceProperty(_context = ['%cSpineTo%c: %conEnd%c is fired.']).call(_context, _toConsumableArray(styleConsole('magenta')), _toConsumableArray(styleConsole('orange')), [{\n        animateTo: animateTo\n      }]);\n    });\n    ignoreScrollEventBeforeRef.current = _Date$now(); // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]); // Function context\n\n  var scrollTo = useCallback(function (nextAnimateTo) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        behavior = _ref3.behavior;\n\n    var target = targetRef.current;\n\n    if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n      return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n    } // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n\n    debug(function () {\n      var _context2;\n\n      return [_concatInstanceProperty(_context2 = [\"%cscrollTo%c: Will scroll to %c\".concat(typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c\")]).call(_context2, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), {\n        behavior: behavior,\n        nextAnimateTo: nextAnimateTo,\n        target: target\n      }];\n    });\n\n    if (behavior === 'auto') {\n      // Stop any existing animation\n      handleSpineToEnd();\n\n      if (target) {\n        // Jump to the scroll position\n        target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n      }\n    } else {\n      behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n      setAnimateTo(nextAnimateTo);\n    } // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n\n\n    if (isEnd(nextAnimateTo, mode)) {\n      debug(function () {\n        var _context3;\n\n        return [_concatInstanceProperty(_context3 = [\"%cscrollTo%c: Scrolling to end, will set sticky to %ctrue%c.\"]).call(_context3, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), [{\n          mode: mode,\n          nextAnimateTo: nextAnimateTo\n        }]];\n      });\n      setSticky(true);\n    }\n  }, [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, targetRef]);\n  var scrollToBottom = useCallback(function () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref4.behavior;\n\n    debug(function () {\n      var _context4;\n\n      return _concatInstanceProperty(_context4 = ['%cscrollToBottom%c: Called']).call(_context4, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo('100%', {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToTop = useCallback(function () {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref5.behavior;\n\n    debug(function () {\n      var _context5;\n\n      return _concatInstanceProperty(_context5 = ['%cscrollToTop%c: Called']).call(_context5, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo(0, {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToEnd = useCallback(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref6.behavior;\n\n    debug(function () {\n      var _context6;\n\n      return _concatInstanceProperty(_context6 = ['%cscrollToEnd%c: Called']).call(_context6, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = useCallback(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref7.behavior;\n\n    debug(function () {\n      var _context7;\n\n      return _concatInstanceProperty(_context7 = ['%cscrollToStart%c: Called']).call(_context7, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToSticky = useCallback(function () {\n    var target = targetRef.current;\n\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(function () {\n          var _context8;\n\n          return _concatInstanceProperty(_context8 = [\"%ctarget changed%c: Initial scroll\"]).call(_context8, _toConsumableArray(styleConsole('blue')));\n        });\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n        return;\n      } // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n\n      var animateFrom = animateFromRef.current;\n      var offsetHeight = target.offsetHeight,\n          scrollHeight = target.scrollHeight,\n          scrollTop = target.scrollTop;\n      var maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      var minValue = Math.max(0, animateFrom - scrollTop);\n      var rawNextValue = scroller({\n        maxValue: maxValue,\n        minValue: minValue,\n        offsetHeight: offsetHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n      var nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n      var nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(function () {\n        var _context9, _context10, _context11;\n\n        return [_concatInstanceProperty(_context9 = [_concatInstanceProperty(_context10 = _concatInstanceProperty(_context11 = \"%cscrollToSticky%c: Will animate from %c\".concat(animateFrom, \"px%c to %c\")).call(_context11, typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c (%c\")).call(_context10, (nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom, \"px%c)\")]).call(_context9, _toConsumableArray(styleConsole('orange')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple'))), {\n          animateFrom: animateFrom,\n          maxValue: maxValue,\n          minValue: minValue,\n          nextAnimateTo: nextAnimateTo,\n          nextValue: nextValue,\n          offsetHeight: offsetHeight,\n          rawNextValue: rawNextValue,\n          scrollHeight: scrollHeight,\n          scrollTop: scrollTop\n        }];\n      });\n      scrollTo(nextAnimateTo, {\n        behavior: 'smooth'\n      });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, targetRef]);\n  var handleScroll = useCallback(function (_ref8) {\n    var _context17;\n\n    var timeStampLow = _ref8.timeStampLow;\n    var animateTo = animateToRef.current;\n    var target = targetRef.current;\n    var animating = animateTo !== null; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    var _computeViewState = computeViewState({\n      mode: mode,\n      target: target\n    }),\n        atBottom = _computeViewState.atBottom,\n        atEnd = _computeViewState.atEnd,\n        atStart = _computeViewState.atStart,\n        atTop = _computeViewState.atTop;\n\n    setAtBottom(atBottom);\n    setAtEnd(atEnd);\n    setAtStart(atStart);\n    setAtTop(atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n    // We need to ignore these \"synthetic\" events\n    // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n    //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n\n    var nextOffsetHeight = target.offsetHeight,\n        nextScrollHeight = target.scrollHeight;\n    var offsetHeight = offsetHeightRef.current;\n    var scrollHeight = scrollHeightRef.current;\n    var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n    var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n    if (offsetHeightChanged) {\n      offsetHeightRef.current = nextOffsetHeight;\n    }\n\n    if (scrollHeightChanged) {\n      scrollHeightRef.current = nextScrollHeight;\n    } // Sticky means:\n    // - If it is scrolled programatically, we are still in sticky mode\n    // - If it is scrolled by the user, then sticky means if we are at the end\n    // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n\n    if (!offsetHeightChanged && !scrollHeightChanged) {\n      // We are sticky if we are animating to the end, or we are already at the end.\n      // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n      var nextSticky = animating && isEnd(animateTo, mode) || atEnd;\n\n      if (stickyRef.current !== nextSticky) {\n        debug(function () {\n          var _context12, _context13, _context14, _context15;\n\n          return [_concatInstanceProperty(_context12 = [\"%conScroll%c: %csetSticky%c(%c\".concat(nextSticky, \"%c)\")]).call(_context12, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('purple'))), _concatInstanceProperty(_context13 = [_concatInstanceProperty(_context14 = _concatInstanceProperty(_context15 = \"(animating = %c\".concat(animating, \"%c && isEnd = %c\")).call(_context15, isEnd(animateTo, mode), \"%c) || atEnd = %c\")).call(_context14, atEnd, \"%c\")]).call(_context13, _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), [{\n            animating: animating,\n            animateTo: animateTo,\n            atEnd: atEnd,\n            mode: mode,\n            offsetHeight: target.offsetHeight,\n            scrollHeight: target.scrollHeight,\n            sticky: stickyRef.current,\n            nextSticky: nextSticky\n          }])];\n        });\n        setSticky(nextSticky);\n      }\n    } else if (stickyRef.current) {\n      debug(function () {\n        var _context16;\n\n        return [_concatInstanceProperty(_context16 = [\"%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c\"]).call(_context16, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('orange')), [{\n          offsetHeightChanged: offsetHeightChanged,\n          scrollHeightChanged: scrollHeightChanged\n        }]), {\n          nextOffsetHeight: nextOffsetHeight,\n          prevOffsetHeight: offsetHeight,\n          nextScrollHeight: nextScrollHeight,\n          prevScrollHeight: scrollHeight\n        }];\n      });\n      scrollToSticky();\n    }\n\n    var actualScrollTop = target.scrollTop;\n\n    _forEachInstanceProperty(_context17 = scrollPositionObserversRef.current).call(_context17, function (observer) {\n      return observer({\n        scrollTop: actualScrollTop\n      });\n    });\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, offsetHeightRef, scrollHeightRef, scrollPositionObserversRef, scrollToSticky, setAtBottom, setAtEnd, setAtStart, setAtTop, setSticky, stickyRef, targetRef]);\n  useEffect(function () {\n    if (target) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        var target = targetRef.current;\n        var animating = animateToRef.current !== null;\n\n        if (stickyRef.current) {\n          if (!computeViewState({\n            mode: mode,\n            target: target\n          }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = _Date$now();\n            } else if (_Date$now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n                debug(function () {\n                  var _context18;\n\n                  return _concatInstanceProperty(_context18 = [\"%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll\"]).call(_context18, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('orange')));\n                });\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !stickyRef.current) {\n          // When the container is emptied, we will set sticky back to true.\n          debug(function () {\n            var _context19;\n\n            return [_concatInstanceProperty(_context19 = [\"%cInterval check%c: Container is emptied, setting sticky back to %ctrue%c\"]).call(_context19, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('purple'))), [{\n              offsetHeight: target.offsetHeight,\n              scrollHeight: target.scrollHeight,\n              sticky: stickyRef.current\n            }]];\n          });\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animateToRef, checkInterval, debug, mode, scrollToSticky, setSticky, stickyRef, target, targetRef]);\n  var styleToClassName = useMemo(function () {\n    var emotion = emotionPool[nonce] || (emotionPool[nonce] = createEmotion({\n      key: 'react-scroll-to-bottom--css-' + createCSSKey(),\n      nonce: nonce\n    }));\n    return function (style) {\n      return emotion.css(style) + '';\n    };\n  }, [nonce]);\n  var internalContext = useMemo(function () {\n    return {\n      observeScrollPosition: observeScrollPosition,\n      setTarget: setTarget,\n      styleToClassName: styleToClassName\n    };\n  }, [observeScrollPosition, setTarget, styleToClassName]);\n  var state1Context = useMemo(function () {\n    return {\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode\n    };\n  }, [atBottom, atEnd, atStart, atTop, mode]);\n  var state2Context = useMemo(function () {\n    var animating = animateTo !== null;\n    return {\n      animating: animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky: sticky\n    };\n  }, [animateTo, mode, sticky]);\n  var combinedStateContext = useMemo(function () {\n    return _objectSpread(_objectSpread({}, state1Context), state2Context);\n  }, [state1Context, state2Context]);\n  var functionContext = useMemo(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  useEffect(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  debug(function () {\n    var _context20;\n\n    return [_concatInstanceProperty(_context20 = [\"%cRender%c: Render\"]).call(_context20, _toConsumableArray(styleConsole('cyan', ''))), {\n      animateTo: animateTo,\n      animating: animateTo !== null,\n      sticky: sticky,\n      target: target\n    }];\n  });\n  return /*#__PURE__*/React.createElement(InternalContext.Provider, {\n    value: internalContext\n  }, /*#__PURE__*/React.createElement(FunctionContext.Provider, {\n    value: functionContext\n  }, /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: combinedStateContext\n  }, /*#__PURE__*/React.createElement(State1Context.Provider, {\n    value: state1Context\n  }, /*#__PURE__*/React.createElement(State2Context.Provider, {\n    value: state2Context\n  }, children, target && /*#__PURE__*/React.createElement(EventSpy, {\n    debounce: debounce,\n    name: \"scroll\",\n    onEvent: handleScroll,\n    target: target\n  }), target && animateTo !== null && /*#__PURE__*/React.createElement(SpineTo, {\n    name: \"scrollTop\",\n    onEnd: handleSpineToEnd,\n    target: target,\n    value: animateTo\n  }))))));\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: undefined,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  debug: PropTypes.bool,\n  initialScrollBehavior: PropTypes.oneOf(['auto', 'smooth']),\n  mode: PropTypes.oneOf(['bottom', 'top']),\n  nonce: PropTypes.string,\n  scroller: PropTypes.func\n};\nexport default Composer;","map":{"version":3,"sources":["../../../src/ScrollToBottom/Composer.js"],"names":["DEFAULT_SCROLLER","MIN_CHECK_INTERVAL","MODE_BOTTOM","MODE_TOP","NEAR_END_THRESHOLD","SCROLL_DECISION_DURATION","emotionPool","fn","mode","target","offsetHeight","scrollHeight","scrollTop","atBottom","atTop","atEnd","atStart","animateTo","Composer","checkInterval","children","debounce","debug","debugFromProp","initialScrollBehavior","nonce","scroller","useMemo","createDebug","force","ignoreScrollEventBeforeRef","useRef","initialScrollBehaviorRef","setAnimateTo","animateToRef","useStateRef","setTarget","targetRef","animateFromRef","offsetHeightRef","scrollHeightRef","setAtBottom","useState","setAtEnd","setAtTop","setAtStart","sticky","setSticky","stickyRef","scrollPositionObserversRef","observeScrollPosition","useCallback","scrollPositionObservers","index","handleSpineToEnd","styleConsole","isEnd","scrollTo","behavior","nextAnimateTo","console","scrollToBottom","scrollToTop","scrollToEnd","options","scrollToStart","scrollToSticky","animateFrom","maxValue","Math","minValue","rawNextValue","nextValue","handleScroll","timeStampLow","animating","computeViewState","nextOffsetHeight","nextScrollHeight","offsetHeightChanged","scrollHeightChanged","nextSticky","prevOffsetHeight","prevScrollHeight","actualScrollTop","observer","useEffect","stickyButNotAtEndSince","timeout","setImmediateInterval","current","clearInterval","styleToClassName","emotion","createEmotion","key","createCSSKey","internalContext","state1Context","state2Context","animatingToEnd","combinedStateContext","functionContext","handleFocus","capture","passive","PropTypes","func"],"mappings":"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","sourcesContent":["import createEmotion from '@emotion/css/create-instance';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport createCSSKey from '../createCSSKey';\nimport createDebug from '../utils/debug';\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport State1Context from './State1Context';\nimport State2Context from './State2Context';\nimport StateContext from './StateContext';\nimport styleConsole from '../utils/styleConsole';\nimport useStateRef from '../hooks/internal/useStateRef';\n\nconst DEFAULT_SCROLLER = () => Infinity;\nconst MIN_CHECK_INTERVAL = 17; // 1 frame\nconst MODE_BOTTOM = 'bottom';\nconst MODE_TOP = 'top';\nconst NEAR_END_THRESHOLD = 1;\nconst SCROLL_DECISION_DURATION = 34; // 2 frames\n\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\nconst emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState({ mode, target: { offsetHeight, scrollHeight, scrollTop } }) {\n  const atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  const atTop = scrollTop < NEAR_END_THRESHOLD;\n\n  const atEnd = mode === MODE_TOP ? atTop : atBottom;\n  const atStart = mode !== MODE_TOP ? atTop : atBottom;\n\n  return {\n    atBottom,\n    atEnd,\n    atStart,\n    atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nconst Composer = ({\n  checkInterval,\n  children,\n  debounce,\n  debug: debugFromProp,\n  initialScrollBehavior,\n  mode,\n  nonce,\n  scroller\n}) => {\n  const debug = useMemo(() => createDebug(`<ScrollToBottom>`, { force: debugFromProp }), [debugFromProp]);\n\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n\n  const ignoreScrollEventBeforeRef = useRef(0);\n  const initialScrollBehaviorRef = useRef(initialScrollBehavior);\n  const [animateTo, setAnimateTo, animateToRef] = useStateRef(mode === MODE_TOP ? 0 : '100%');\n  const [target, setTarget, targetRef] = useStateRef(null);\n\n  // Internal context\n  const animateFromRef = useRef(0);\n  const offsetHeightRef = useRef(0);\n  const scrollHeightRef = useRef(0);\n\n  // State context\n  const [atBottom, setAtBottom] = useState(true);\n  const [atEnd, setAtEnd] = useState(true);\n  const [atTop, setAtTop] = useState(true);\n  const [atStart, setAtStart] = useState(false);\n  const [sticky, setSticky, stickyRef] = useStateRef(true);\n\n  // High-rate state context\n  const scrollPositionObserversRef = useRef([]);\n  const observeScrollPosition = useCallback(\n    fn => {\n      const { current: target } = targetRef;\n\n      scrollPositionObserversRef.current.push(fn);\n      target && fn({ scrollTop: target.scrollTop });\n\n      return () => {\n        const { current: scrollPositionObservers } = scrollPositionObserversRef;\n        const index = scrollPositionObservers.indexOf(fn);\n\n        ~index && scrollPositionObservers.splice(index, 1);\n      };\n    },\n    [scrollPositionObserversRef, targetRef]\n  );\n\n  const handleSpineToEnd = useCallback(() => {\n    const { current: animateTo } = animateToRef;\n\n    debug(() => [\n      '%cSpineTo%c: %conEnd%c is fired.',\n      ...styleConsole('magenta'),\n      ...styleConsole('orange'),\n      { animateTo }\n    ]);\n\n    ignoreScrollEventBeforeRef.current = Date.now();\n\n    // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]);\n\n  // Function context\n  const scrollTo = useCallback(\n    (nextAnimateTo, { behavior } = {}) => {\n      const { current: target } = targetRef;\n\n      if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n        return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n      }\n\n      // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n      debug(() => [\n        [\n          `%cscrollTo%c: Will scroll to %c${\n            typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/gu, '%%')\n          }%c`,\n          ...styleConsole('lime', ''),\n          ...styleConsole('purple')\n        ],\n        {\n          behavior,\n          nextAnimateTo,\n          target\n        }\n      ]);\n\n      if (behavior === 'auto') {\n        // Stop any existing animation\n        handleSpineToEnd();\n\n        if (target) {\n          // Jump to the scroll position\n          target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n        }\n      } else {\n        behavior !== 'smooth' &&\n          console.warn(\n            'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n          );\n\n        setAnimateTo(nextAnimateTo);\n      }\n\n      // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n      if (isEnd(nextAnimateTo, mode)) {\n        debug(() => [\n          [\n            `%cscrollTo%c: Scrolling to end, will set sticky to %ctrue%c.`,\n            ...styleConsole('lime', ''),\n            ...styleConsole('purple')\n          ],\n          [{ mode, nextAnimateTo }]\n        ]);\n\n        setSticky(true);\n      }\n    },\n    [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, targetRef]\n  );\n\n  const scrollToBottom = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToBottom%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      scrollTo('100%', { behavior: behavior || 'smooth' });\n    },\n    [debug, scrollTo]\n  );\n\n  const scrollToTop = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToTop%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      scrollTo(0, { behavior: behavior || 'smooth' });\n    },\n    [debug, scrollTo]\n  );\n\n  const scrollToEnd = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToEnd%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      const options = { behavior: behavior || 'smooth' };\n\n      mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n    },\n    [debug, mode, scrollToBottom, scrollToTop]\n  );\n\n  const scrollToStart = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToStart%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      const options = { behavior: behavior || 'smooth' };\n\n      mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n    },\n    [debug, mode, scrollToBottom, scrollToTop]\n  );\n\n  const scrollToSticky = useCallback(() => {\n    const { current: target } = targetRef;\n\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(() => [`%ctarget changed%c: Initial scroll`, ...styleConsole('blue')]);\n\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n\n        return;\n      }\n\n      // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n      const { current: animateFrom } = animateFromRef;\n      const { offsetHeight, scrollHeight, scrollTop } = target;\n\n      const maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      const minValue = Math.max(0, animateFrom - scrollTop);\n\n      const rawNextValue = scroller({ maxValue, minValue, offsetHeight, scrollHeight, scrollTop });\n\n      const nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n\n      let nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(() => [\n        [\n          `%cscrollToSticky%c: Will animate from %c${animateFrom}px%c to %c${\n            typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/gu, '%%')\n          }%c (%c${(nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom}px%c)`,\n          ...styleConsole('orange'),\n          ...styleConsole('purple'),\n          ...styleConsole('purple'),\n          ...styleConsole('purple')\n        ],\n        {\n          animateFrom,\n          maxValue,\n          minValue,\n          nextAnimateTo,\n          nextValue,\n          offsetHeight,\n          rawNextValue,\n          scrollHeight,\n          scrollTop\n        }\n      ]);\n\n      scrollTo(nextAnimateTo, { behavior: 'smooth' });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, targetRef]);\n\n  const handleScroll = useCallback(\n    ({ timeStampLow }) => {\n      const { current: animateTo } = animateToRef;\n      const { current: target } = targetRef;\n\n      const animating = animateTo !== null;\n\n      // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n      // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n      if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n        // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n        // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n\n        return;\n      }\n\n      const { atBottom, atEnd, atStart, atTop } = computeViewState({ mode, target });\n\n      setAtBottom(atBottom);\n      setAtEnd(atEnd);\n      setAtStart(atStart);\n      setAtTop(atTop);\n\n      // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n      // We need to ignore these \"synthetic\" events\n      // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n      //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n      const { offsetHeight: nextOffsetHeight, scrollHeight: nextScrollHeight } = target;\n      const { current: offsetHeight } = offsetHeightRef;\n      const { current: scrollHeight } = scrollHeightRef;\n      const offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n      const scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n      if (offsetHeightChanged) {\n        offsetHeightRef.current = nextOffsetHeight;\n      }\n\n      if (scrollHeightChanged) {\n        scrollHeightRef.current = nextScrollHeight;\n      }\n\n      // Sticky means:\n      // - If it is scrolled programatically, we are still in sticky mode\n      // - If it is scrolled by the user, then sticky means if we are at the end\n\n      // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n      if (!offsetHeightChanged && !scrollHeightChanged) {\n        // We are sticky if we are animating to the end, or we are already at the end.\n        // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n        const nextSticky = (animating && isEnd(animateTo, mode)) || atEnd;\n\n        if (stickyRef.current !== nextSticky) {\n          debug(() => [\n            [\n              `%conScroll%c: %csetSticky%c(%c${nextSticky}%c)`,\n              ...styleConsole('red'),\n              ...styleConsole('red'),\n              ...styleConsole('purple')\n            ],\n            [\n              `(animating = %c${animating}%c && isEnd = %c${isEnd(animateTo, mode)}%c) || atEnd = %c${atEnd}%c`,\n              ...styleConsole('purple'),\n              ...styleConsole('purple'),\n              ...styleConsole('purple'),\n              {\n                animating,\n                animateTo,\n                atEnd,\n                mode,\n                offsetHeight: target.offsetHeight,\n                scrollHeight: target.scrollHeight,\n                sticky: stickyRef.current,\n                nextSticky\n              }\n            ]\n          ]);\n\n          setSticky(nextSticky);\n        }\n      } else if (stickyRef.current) {\n        debug(() => [\n          [\n            `%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c`,\n            ...styleConsole('red'),\n            ...styleConsole('orange'),\n            {\n              offsetHeightChanged,\n              scrollHeightChanged\n            }\n          ],\n          {\n            nextOffsetHeight,\n            prevOffsetHeight: offsetHeight,\n            nextScrollHeight,\n            prevScrollHeight: scrollHeight\n          }\n        ]);\n\n        scrollToSticky();\n      }\n\n      const { scrollTop: actualScrollTop } = target;\n\n      scrollPositionObserversRef.current.forEach(observer => observer({ scrollTop: actualScrollTop }));\n    },\n    [\n      animateToRef,\n      debug,\n      ignoreScrollEventBeforeRef,\n      mode,\n      offsetHeightRef,\n      scrollHeightRef,\n      scrollPositionObserversRef,\n      scrollToSticky,\n      setAtBottom,\n      setAtEnd,\n      setAtStart,\n      setAtTop,\n      setSticky,\n      stickyRef,\n      targetRef\n    ]\n  );\n\n  useEffect(() => {\n    if (target) {\n      let stickyButNotAtEndSince = false;\n\n      const timeout = setImmediateInterval(() => {\n        const { current: target } = targetRef;\n        const animating = animateToRef.current !== null;\n\n        if (stickyRef.current) {\n          if (!computeViewState({ mode, target }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = Date.now();\n            } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n\n                debug(() => [\n                  `%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll`,\n                  ...styleConsole('navy'),\n                  ...styleConsole('orange')\n                ]);\n\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !stickyRef.current) {\n          // When the container is emptied, we will set sticky back to true.\n\n          debug(() => [\n            [\n              `%cInterval check%c: Container is emptied, setting sticky back to %ctrue%c`,\n              ...styleConsole('navy'),\n              ...styleConsole('purple')\n            ],\n            [\n              {\n                offsetHeight: target.offsetHeight,\n                scrollHeight: target.scrollHeight,\n                sticky: stickyRef.current\n              }\n            ]\n          ]);\n\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n\n      return () => clearInterval(timeout);\n    }\n  }, [animateToRef, checkInterval, debug, mode, scrollToSticky, setSticky, stickyRef, target, targetRef]);\n\n  const styleToClassName = useMemo(() => {\n    const emotion =\n      emotionPool[nonce] ||\n      (emotionPool[nonce] = createEmotion({ key: 'react-scroll-to-bottom--css-' + createCSSKey(), nonce }));\n\n    return style => emotion.css(style) + '';\n  }, [nonce]);\n\n  const internalContext = useMemo(\n    () => ({\n      observeScrollPosition,\n      setTarget,\n      styleToClassName\n    }),\n    [observeScrollPosition, setTarget, styleToClassName]\n  );\n\n  const state1Context = useMemo(\n    () => ({\n      atBottom,\n      atEnd,\n      atStart,\n      atTop,\n      mode\n    }),\n    [atBottom, atEnd, atStart, atTop, mode]\n  );\n\n  const state2Context = useMemo(() => {\n    const animating = animateTo !== null;\n\n    return {\n      animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky\n    };\n  }, [animateTo, mode, sticky]);\n\n  const combinedStateContext = useMemo(\n    () => ({\n      ...state1Context,\n      ...state2Context\n    }),\n    [state1Context, state2Context]\n  );\n\n  const functionContext = useMemo(\n    () => ({\n      scrollTo,\n      scrollToBottom,\n      scrollToEnd,\n      scrollToStart,\n      scrollToTop\n    }),\n    [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]\n  );\n\n  useEffect(() => {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      const handleFocus = () => {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, { capture: true, passive: true });\n\n      return () => target.removeEventListener('focus', handleFocus);\n    }\n  }, [target]);\n\n  debug(() => [\n    [`%cRender%c: Render`, ...styleConsole('cyan', '')],\n    {\n      animateTo,\n      animating: animateTo !== null,\n      sticky,\n      target\n    }\n  ]);\n\n  return (\n    <InternalContext.Provider value={internalContext}>\n      <FunctionContext.Provider value={functionContext}>\n        <StateContext.Provider value={combinedStateContext}>\n          <State1Context.Provider value={state1Context}>\n            <State2Context.Provider value={state2Context}>\n              {children}\n              {target && <EventSpy debounce={debounce} name=\"scroll\" onEvent={handleScroll} target={target} />}\n              {target && animateTo !== null && (\n                <SpineTo name=\"scrollTop\" onEnd={handleSpineToEnd} target={target} value={animateTo} />\n              )}\n            </State2Context.Provider>\n          </State1Context.Provider>\n        </StateContext.Provider>\n      </FunctionContext.Provider>\n    </InternalContext.Provider>\n  );\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: undefined,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\n\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  debug: PropTypes.bool,\n  initialScrollBehavior: PropTypes.oneOf(['auto', 'smooth']),\n  mode: PropTypes.oneOf(['bottom', 'top']),\n  nonce: PropTypes.string,\n  scroller: PropTypes.func\n};\n\nexport default Composer;\n"]},"metadata":{},"sourceType":"module"}