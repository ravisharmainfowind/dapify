{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\nimport { useCallback, useRef, useState } from 'react';\nexport default function useStateRef(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var ref = useRef();\n  var setValue = useCallback(function (nextValue) {\n    if (typeof nextValue === 'function') {\n      setValue(function (state) {\n        nextValue = nextValue(state);\n        ref.current = nextValue;\n        return nextValue;\n      });\n    } else {\n      ref.current = nextValue;\n      setValue(nextValue);\n    }\n  }, [ref]);\n  ref.current = state;\n  return [state, setState, ref];\n}","map":{"version":3,"sources":["../../../../src/hooks/internal/useStateRef.js"],"names":["state","setState","useState","ref","useRef","setValue","useCallback","nextValue"],"mappings":";AAAA,SAAA,WAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AAEA,eAAe,SAAA,WAAA,CAAA,YAAA,EAAmC;EAChD,IAAA,SAAA,GAA0BE,QAAQ,CAAlC,YAAkC,CAAlC;EAAA,IAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;EAAA,IAAOF,KAAP,GAAA,UAAA,CAAA,CAAA,CAAA;EAAA,IAAcC,QAAd,GAAA,UAAA,CAAA,CAAA,CAAA;;EACA,IAAME,GAAG,GAAGC,MAAZ,EAAA;EACA,IAAMC,QAAQ,GAAGC,WAAW,CAC1B,UAAA,SAAA,EAAa;IACX,IAAI,OAAA,SAAA,KAAJ,UAAA,EAAqC;MACnCD,QAAQ,CAAC,UAAA,KAAA,EAAS;QAChBE,SAAS,GAAGA,SAAS,CAArBA,KAAqB,CAArBA;QAEAJ,GAAG,CAAHA,OAAAA,GAAAA,SAAAA;QAEA,OAAA,SAAA;MALFE,CAAQ,CAARA;IADF,CAAA,MAQO;MACLF,GAAG,CAAHA,OAAAA,GAAAA,SAAAA;MAEAE,QAAQ,CAARA,SAAQ,CAARA;IACD;EAduB,CAAA,EAgB1B,CAhBF,GAgBE,CAhB0B,CAA5B;EAmBAF,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;EAEA,OAAO,CAAA,KAAA,EAAA,QAAA,EAAP,GAAO,CAAP;AACD","sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport default function useStateRef(initialState) {\n  const [state, setState] = useState(initialState);\n  const ref = useRef();\n  const setValue = useCallback(\n    nextValue => {\n      if (typeof nextValue === 'function') {\n        setValue(state => {\n          nextValue = nextValue(state);\n\n          ref.current = nextValue;\n\n          return nextValue;\n        });\n      } else {\n        ref.current = nextValue;\n\n        setValue(nextValue);\n      }\n    },\n    [ref]\n  );\n\n  ref.current = state;\n\n  return [state, setState, ref];\n}\n"]},"metadata":{},"sourceType":"module"}