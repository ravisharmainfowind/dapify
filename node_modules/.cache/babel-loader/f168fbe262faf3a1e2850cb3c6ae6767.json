{"ast":null,"code":"import { POST_CONVERSATION_REQUEST, GET_CONVERSATION_SUCCESS, GET_CONVERSATION_FAILURE, POST_MESSAGES_REQUEST, GET_MESSAGES_SUCCESS, GET_MESSAGES_FAILURE, POST_ADD_CONVERSATION_REQUEST, GET_ADD_CONVERSATION_SUCCESS, GET_ADD_CONVERSATION_FAILURE, SEND_MESSAGE_REQUEST, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE, POST_GROUP_MESSAGES_REQUEST, GET_GROUP_MESSAGES_SUCCESS, GET_GROUP_MESSAGES_FAILURE, SEND_GROUP_MESSAGE_REQUEST, SEND_GROUP_MESSAGE_SUCCESS, SEND_GROUP_MESSAGE_FAILURE, UNREAD_MESSAGE_COUNT_REQUEST, UNREAD_MESSAGE_COUNT_SUCCESS, UNREAD_MESSAGE_COUNT_FAILURE, MESSAGE_NOTIFICATION } from './type';\nimport * as moment from 'moment';\nimport firebaseConfig from \"../../firebase\";\nimport { auth } from \"../auth-service\";\nimport { ERROR, Success } from '../../utils/errors';\nimport { USER_NOTIFICATION } from './api_url';\nimport axios from 'axios'; // ------------------------------FOR GET MESSAGE\n\nvar CurrentChatId = '';\nexport const getConversation = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_CONVERSATION_REQUEST,\n      payload: true\n    }); // ============ FOR BAck Button Condition ===========\n    // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n    // console.log(\"CHatIdData====\", CHatIdData)\n    // const CurrenmsgrefListner = firebaseConfig.database().ref('conversations/')\n    // if(CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined){\n    //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n    // } else {\n    // }\n\n    await firebaseConfig.database().ref('conversations/').on('value', resp => {\n      var returnArr = [];\n      resp.forEach(childSnapshot => {\n        var unreadCount = 0;\n        var chatarr = childSnapshot.val();\n        var lastChat = '';\n\n        if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n          var other_uid = '';\n\n          if (chatarr.reciever_id === data.uid) {\n            other_uid = chatarr.sender_id;\n          } else {\n            other_uid = chatarr.reciever_id;\n          }\n\n          var Readingcount = 0;\n\n          if (chatarr[`${other_uid}`]) {\n            if (chatarr[`${data.uid}_receive_By`]) {\n              Readingcount = chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n            } else {\n              Readingcount = chatarr[`${other_uid}`];\n            }\n          }\n\n          firebaseConfig.database().ref('chats/').child(childSnapshot.key).limitToLast(1).on('value', resp => {\n            resp.forEach(chatSnapshot => {\n              lastChat = chatSnapshot.val();\n            });\n          }); // console.log('unreadCount-----+++', unreadCount);\n\n          const res = firebaseConfig.firestore().collection(\"users\").doc(other_uid);\n          res.get().then(doc => {\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n                const item = chatarr;\n                item.receiverDetails = doc.data();\n                item.lastConversation = lastChat;\n                item.unread_msg = unreadCount;\n                item.key = childSnapshot.key;\n                item.Readingcount = Readingcount;\n                returnArr.push(item);\n                dispatch({\n                  type: GET_CONVERSATION_SUCCESS,\n                  payload: returnArr\n                });\n              }\n            }\n          });\n        }\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: GET_CONVERSATION_FAILURE,\n        payload: false\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_CONVERSATION_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getUnreadMessageCount = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: UNREAD_MESSAGE_COUNT_REQUEST,\n        payload: true\n      }); // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n\n      var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n      CurrentChatId = data.chat_id;\n\n      if (CurrentChatId) {\n        CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      } else {\n        await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n          if (resp.exists()) {\n            const usrUnreadCount = resp.val();\n\n            if (usrUnreadCount !== undefined) {\n              console.log('-----check unread message----', usrUnreadCount);\n              dispatch({\n                type: UNREAD_MESSAGE_COUNT_SUCCESS,\n                payload: usrUnreadCount\n              });\n            }\n          } else {\n            dispatch({\n              type: UNREAD_MESSAGE_COUNT_FAILURE,\n              payload: false\n            });\n          }\n        });\n      }\n\n      ; // if (CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined) {\n      //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      // } else {\n      //   await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n      //     if (resp.exists()) {\n      //       const usrUnreadCount = resp.val();\n      //       if (usrUnreadCount !== undefined) {\n      //         console.log('-----check unread message----', usrUnreadCount);\n      //         dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n      //       }\n      //     } else {\n      //       dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: false });\n      //     }\n      //   })\n      // }\n\n      await firebaseConfig.database().ref('conversations/').on('value', resp => {\n        var Readingcount = 0;\n        resp.forEach(childSnapshot => {\n          var chatarr = childSnapshot.val();\n\n          if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n            var other_uid = '';\n\n            if (chatarr.reciever_id === data.uid) {\n              other_uid = chatarr.sender_id;\n            } else {\n              other_uid = chatarr.reciever_id;\n            }\n\n            if (chatarr[`${other_uid}`]) {\n              if (chatarr[`${data.uid}_receive_By`]) {\n                Readingcount += chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n              } else {\n                Readingcount += chatarr[`${other_uid}`];\n              }\n            }\n          }\n\n          console.log('Readingcount', Readingcount);\n          dispatch({\n            type: UNREAD_MESSAGE_COUNT_SUCCESS,\n            payload: Readingcount\n          });\n        });\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: UNREAD_MESSAGE_COUNT_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getMessages = data => async dispatch => {\n  try {\n    var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n    CurrentChatId = data.chat_id;\n    localStorage.setItem(\"lestener_Chat_id\", data.chat_id);\n    dispatch({\n      type: POST_MESSAGES_REQUEST,\n      payload: true\n    }); // console.log('########## CurrentChatId', CurrentChatId);\n    // console.log('########## Chatid', data.chat_id);\n    // console.log('data get outer', data);\n\n    if (data !== \"\") {\n      var reciever_uid = '';\n\n      if (data.chat_id !== undefined) {\n        var returnArr = [];\n        var unreadcount = 0;\n        await CurrenmsgrefListner.child(data.chat_id).on('child_added', async snapshot => {\n          // console.log('resp_recent', snapshot.val());\n          // console.log('resp_recentssss', snapshot.key);\n          // console.log('datachat_id', data.chat_id);\n          // console.log('########## inner CurrentChatId', CurrentChatId);\n          // console.log('data get inner', data);\n          var msgarr_1 = '';\n          msgarr_1 = snapshot.val();\n          const item = msgarr_1;\n          item.key = snapshot.key;\n          returnArr.push(item);\n\n          if (item.status === 'unread') {\n            unreadcount = unreadcount + 1;\n          }\n\n          if (CurrentChatId === data.chat_id) {\n            await firebaseConfig.database().ref('chats/').child(CurrentChatId).orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n              var recieveCount = snapshot.numChildren(); // console.log('recieveCount CurrentChatId', CurrentChatId);\n              // console.log('data.uid', data.uid);\n              // console.log('data get', data);\n\n              var updatedata = {\n                [`${data.uid}_receive_By`]: recieveCount\n              }; // console.log('chatchat-id', data.chat_id);\n\n              await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n            });\n          } // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n\n        });\n\n        if (data.recv_id !== \"\") {\n          reciever_uid = data.recv_id;\n          const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n          recv.get().then(async doc => {\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n                dispatch({\n                  type: GET_MESSAGES_SUCCESS,\n                  payload: returnArr,\n                  listenerData: CurrenmsgrefListner\n                });\n              }\n            }\n          });\n        } else {\n          dispatch({\n            type: GET_MESSAGES_FAILURE,\n            payload: false\n          });\n        }\n      }\n    } else {\n      dispatch({\n        type: GET_MESSAGES_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_MESSAGES_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getMessages_original = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_MESSAGES_REQUEST,\n      payload: true\n    });\n    console.log('##########chatid', data.chat_id);\n\n    if (data !== \"\") {\n      var reciever_uid = '';\n\n      if (data.chat_id !== undefined) {\n        await firebaseConfig.database().ref('chats/').child(data.chat_id).on('value', resp => {\n          var returnArr = [];\n          var unreadcount = 0;\n          resp.forEach(msgSnapshot => {\n            var msgarr = '';\n            msgarr = msgSnapshot.val();\n            const item = msgarr;\n            console.log('itemis', item);\n            item.key = msgSnapshot.key;\n            returnArr.push(item);\n\n            if (item.status === 'unread') {\n              unreadcount = unreadcount + 1;\n            }\n          });\n          console.log('checkreturn------', returnArr);\n\n          if (data.recv_id !== \"\") {\n            reciever_uid = data.recv_id;\n            const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n            recv.get().then(async doc => {\n              if (doc.exists) {\n                if (doc.data().user_active === true) {\n                  returnArr['receiverData'] = doc.data();\n                  console.log('check-chat-id', data.chat_id);\n                  await updateUnreadStatus(data.chat_id, data.uid, unreadcount).then(async function () {\n                    // await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n                    //   if (resp.exists()) {\n                    //     const usrUnreadCount = resp.val();\n                    //     if (usrUnreadCount !== undefined) {\n                    //       console.log('-----check unread message----',usrUnreadCount);\n                    //       dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n                    //     }\n                    //   }\n                    // })\n                    await firebaseConfig.database().ref('chats/').child(data.chat_id).orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n                      var recieveCount = snapshot.numChildren();\n                      var updatedata = {\n                        [`${data.uid}_receive_By`]: recieveCount\n                      };\n                      await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n                    });\n                    dispatch({\n                      type: GET_MESSAGES_SUCCESS,\n                      payload: returnArr\n                    });\n                  }).catch(function (error) {\n                    ERROR(error.message);\n                    dispatch({\n                      type: GET_MESSAGES_FAILURE,\n                      payload: false\n                    });\n                  });\n                }\n              }\n            });\n          } else {\n            dispatch({\n              type: GET_MESSAGES_FAILURE,\n              payload: false\n            });\n          }\n        }).catch(function (error) {\n          dispatch({\n            type: GET_MESSAGES_FAILURE,\n            payload: false\n          });\n        });\n      }\n    } else {\n      dispatch({\n        type: GET_MESSAGES_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_MESSAGES_FAILURE,\n      payload: error\n    });\n  }\n};\nexport const getGroupMessages = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_GROUP_MESSAGES_REQUEST,\n      payload: true\n    });\n\n    if (data !== \"\") {\n      await firebaseConfig.database().ref('GroupChats/').child(data.chat_id).on('value', resp => {\n        var returnArr = [];\n        resp.forEach(msgSnapshot => {\n          var msgarr = '';\n          msgarr = msgSnapshot.val();\n          const item = msgarr;\n          item.key = msgSnapshot.key;\n          returnArr.push(item);\n          dispatch({\n            type: GET_GROUP_MESSAGES_SUCCESS,\n            payload: returnArr\n          });\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: GET_GROUP_MESSAGES_FAILURE,\n          payload: false\n        });\n      });\n    } else {\n      dispatch({\n        type: GET_GROUP_MESSAGES_FAILURE,\n        payload: false\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_GROUP_MESSAGES_FAILURE,\n      payload: error\n    });\n  }\n};\n\nasync function updateUnreadStatus(chatid, uid, unreadcount) {\n  try {\n    var list = 0;\n    await firebaseConfig.database().ref('chats/').child(chatid).orderByChild('reciever_id').equalTo(uid).once('value', async function (snapshot) {\n      snapshot.forEach(function (child) {\n        if (child.val().status === 'unread') {\n          //unreadCount = unreadCount +1;\n          child.ref.update({\n            status: 'read'\n          });\n          list = list + 1;\n        }\n      });\n      await DecreementUnreadCountByUser(uid, unreadcount);\n      console.log('decreement', unreadcount);\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} // ------------------------------FOR ADD MESSAGE\n\n\nexport const addConversation = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_ADD_CONVERSATION_REQUEST,\n      payload: true\n    });\n    var room_id = data.recvid + '_' + data.uid;\n    var room_id2 = data.uid + '_' + data.recvid;\n    await firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n      if (snapshot.exists()) {\n        dispatch({\n          type: GET_ADD_CONVERSATION_SUCCESS,\n          payload: room_id\n        });\n      } else {\n        firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot => {\n          if (snapshot.exists()) {\n            dispatch({\n              type: GET_ADD_CONVERSATION_SUCCESS,\n              payload: room_id2\n            });\n          } else {\n            firebaseConfig.database().ref('conversations/').child(room_id).set({\n              reciever_id: data.recvid,\n              sender_id: data.uid,\n              time: firebaseConfig.firestore.FieldValue.serverTimestamp()\n            }).then(() => {}).catch(function (error) {\n              ERROR(error.message);\n            });\n            dispatch({\n              type: GET_ADD_CONVERSATION_SUCCESS,\n              payload: room_id\n            });\n          }\n        }, errorObject => {\n          dispatch({\n            type: GET_ADD_CONVERSATION_FAILURE,\n            payload: false\n          });\n          console.log('errorObject', errorObject);\n        });\n      }\n    }, errorObject => {\n      dispatch({\n        type: GET_ADD_CONVERSATION_FAILURE,\n        payload: false\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ADD_CONVERSATION_FAILURE,\n      payload: error\n    });\n  }\n}; // ------------------------------FOR SEND MESSAGE\n\nexport const sendMessage = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: SEND_MESSAGE_REQUEST,\n        payload: true\n      });\n      var senderid = data.sender_id;\n      const msgData = {\n        reciever_id: data.reciever_id,\n        sender_id: data.sender_id,\n        date: data.date,\n        time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n        message: data.message,\n        type: data.type,\n        status: 'unread'\n      };\n      await firebaseConfig.database().ref('chats/' + data.chat_id).push(msgData).then(async () => {\n        var updatedata = {\n          [`${senderid}`]: firebaseConfig.database.ServerValue.increment(1),\n          \"messageCount\": firebaseConfig.database.ServerValue.increment(1)\n        };\n        await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n        await IncreementUnreadCountByUser(data.reciever_id).then(async function () {\n          await sendMessageNotification(data.reciever_id);\n          dispatch({\n            type: SEND_MESSAGE_SUCCESS,\n            payload: true\n          });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({\n            type: SEND_MESSAGE_FAILURE,\n            payload: error\n          });\n        });\n      }).catch(function (error) {\n        dispatch({\n          type: SEND_MESSAGE_FAILURE,\n          payload: error\n        });\n        ERROR(error.message);\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: SEND_MESSAGE_FAILURE,\n      payload: error\n    });\n  } // await firebaseConfig.database().ref('chats/' + data.chat_id).on('child_added');\n  // var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n  // CurrentChatId = data.chat_id;\n  // CurrenmsgrefListner.child(data.chat_id).on('child_added','');\n  // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n  // getMessages(data);\n\n};\nexport const sendGroupMessage = data => async dispatch => {\n  try {\n    if (data) {\n      dispatch({\n        type: SEND_GROUP_MESSAGE_REQUEST,\n        payload: true\n      });\n      console.log('groupmsg-----', data);\n      var subs_id = [];\n\n      if (data.allSubscriber.length > 0) {\n        data.allSubscriber.forEach((user, indx) => {\n          subs_id.push(user.aud_id);\n          var room_id = user.aud_id + '_' + data.sender_id;\n          var room_id2 = data.sender_id + '_' + user.aud_id;\n          firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n            if (snapshot.exists()) {\n              const msgData = {\n                reciever_id: user.aud_id,\n                sender_id: data.sender_id,\n                date: data.date,\n                time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                message: data.message,\n                type: data.type,\n                status: 'unread'\n              };\n              firebaseConfig.database().ref('chats/' + room_id).push(msgData);\n              IncreementUnreadCountByUser(user.aud_id).then(function () {\n                return true;\n              });\n            } else {\n              firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot2 => {\n                if (snapshot2.exists()) {\n                  const msgData = {\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    date: data.date,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                    message: data.message,\n                    type: data.type,\n                    status: 'unread'\n                  };\n                  firebaseConfig.database().ref('chats/' + room_id2).push(msgData);\n                  IncreementUnreadCountByUser(user.aud_id).then(function () {\n                    return true;\n                  });\n                } else {\n                  firebaseConfig.database().ref('conversations/').child(room_id).set({\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp()\n                  }).then(() => {\n                    const msgData = {\n                      reciever_id: user.aud_id,\n                      sender_id: data.sender_id,\n                      date: data.date,\n                      time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                      message: data.message,\n                      type: data.type,\n                      status: 'unread'\n                    };\n                    firebaseConfig.database().ref('chats/' + room_id).push(msgData);\n                    IncreementUnreadCountByUser(user.aud_id).then(function () {\n                      return true;\n                    });\n                  }).catch(function (error) {\n                    dispatch({\n                      type: SEND_GROUP_MESSAGE_FAILURE,\n                      payload: error\n                    });\n                    ERROR(error.message);\n                  });\n                }\n              }, errorObject => {\n                dispatch({\n                  type: SEND_GROUP_MESSAGE_FAILURE,\n                  payload: false\n                });\n              });\n            }\n          }, errorObject => {\n            dispatch({\n              type: SEND_GROUP_MESSAGE_FAILURE,\n              payload: false\n            });\n          });\n        });\n\n        if (subs_id.length > 0) {\n          const msggroupData = {\n            sender_id: data.sender_id,\n            date: data.date,\n            time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n            message: data.message,\n            type: data.type,\n            subscriberId: subs_id\n          };\n          await firebaseConfig.database().ref('GroupChats/' + data.sender_id).push(msggroupData).then(async () => {\n            await sendMessageNotificationAllSubscriber(data.sender_id);\n            dispatch({\n              type: SEND_GROUP_MESSAGE_SUCCESS,\n              payload: true\n            });\n          }).catch(function (error) {\n            dispatch({\n              type: SEND_GROUP_MESSAGE_FAILURE,\n              payload: error\n            });\n            ERROR(error.message);\n          });\n        }\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: SEND_GROUP_MESSAGE_FAILURE,\n      payload: error\n    });\n  }\n};\n\nasync function sendMessageNotification(id) {\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(id);\n    res.get().then(async doc => {\n      if (!doc.exists) {//dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      } else {\n        var _doc$data;\n\n        if ((_doc$data = doc.data()) !== null && _doc$data !== void 0 && _doc$data.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n            const notification_data = {\n              \"title\": \"Message\",\n              \"body\": MESSAGE_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens\n            };\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n\n            if (notification_response.status === 200) {}\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nasync function sendMessageNotificationAllSubscriber(uid) {\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async doc => {\n      if (!doc.exists) {} else {\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n\n        if (subscribeobj !== '') {\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n            var sub_id = '';\n            var Recsubiddata = '';\n\n            if (subkeyid.includes('_RECIEVER')) {\n              sub_id = subkeyid.replace('_RECIEVER', '');\n              Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n            }\n\n            if (subkeyid.includes('_SUBSCRIBER')) {\n              sub_id = subkeyid.replace('_SUBSCRIBER', '');\n              Recsubiddata = subscribeobj[sub_id + '_SUBSCRIBER'];\n            }\n\n            if (sub_id !== '') {\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async subdoc => {\n                if (!subdoc.exists) {} else {\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                    var _subdoc$data;\n\n                    if ((_subdoc$data = subdoc.data()) !== null && _subdoc$data !== void 0 && _subdoc$data.Notification_tokens) {\n                      if (subdoc.data().Notification_tokens.length > 0) {\n                        console.log(subdoc.data().Notification_tokens);\n                        const notification_data = {\n                          \"title\": \"Message\",\n                          \"body\": MESSAGE_NOTIFICATION,\n                          \"to\": subdoc.data().Notification_tokens\n                        };\n                        const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                        console.log('notification_response', notification_response);\n\n                        if (notification_response.status === 200) {}\n                      }\n                    }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n                      const milliseconds = Rec_subs_date.seconds * 1000; // 1575909015000\n\n                      var rec_cloneDate = new Date(milliseconds); //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                        var _subdoc$data2;\n\n                        if ((_subdoc$data2 = subdoc.data()) !== null && _subdoc$data2 !== void 0 && _subdoc$data2.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n                              \"title\": \"Message\",\n                              \"body\": MESSAGE_NOTIFICATION,\n                              \"to\": subdoc.data().Notification_tokens\n                            };\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n\n                            if (notification_response.status === 200) {}\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              });\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n} // ------------------------------FOR INCREMENt & DECREMENT MESSAGE\n\n\nasync function IncreementUnreadCountByUser(recv_id) {\n  try {\n    var unreadCountVal = 0;\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n        const usrUnreadCount = resp.val();\n\n        if (usrUnreadCount !== undefined) {\n          unreadCountVal = usrUnreadCount.unreadCount + 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal\n          });\n        } else {\n          unreadCountVal = 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal\n          });\n        }\n      } else {\n        unreadCountVal = 1;\n        firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n          unreadCount: unreadCountVal\n        });\n      }\n    }); // await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).on('value', resp => {\n    //   resp.forEach((msgSnapshot) => {\n    //     var msgarr ='';\n    //     msgarr = msgSnapshot.val();\n    //     console.log('msgarr',msgarr);\n    //   })\n    // })\n    // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n    //   if (doc.exists) {\n    //     var unreadMsg = 0;\n    //     var usrData = doc.data()\n    //     if(usrData?.unreadMsgCount){\n    //       unreadMsg = usrData?.unreadMsgCount +1;\n    //     }\n    //     else{\n    //       unreadMsg =1;\n    //     }\n    //     const updatedata = {\n    //       unreadMsgCount: unreadMsg,\n    //     };\n    //     firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //     .then(function (docres) {\n    //     return true;\n    //     })\n    //   }\n    // })\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\n_c = IncreementUnreadCountByUser;\n\nasync function DecreementUnreadCountByUser(recv_id, count) {\n  try {\n    console.log('checkcount', count);\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n        const usrUnreadCount = resp.val();\n\n        if (usrUnreadCount !== undefined) {\n          if (usrUnreadCount.unreadCount >= count) {\n            var unreadCountVal = usrUnreadCount.unreadCount - count;\n            firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n              unreadCount: unreadCountVal\n            });\n          }\n        }\n      }\n    }); // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n    //   if (doc.exists) {\n    //     console.log('dfdfgdfgdf',count);\n    //     if(count !== 0){\n    //       var unreadMsg = 0;\n    //       var usrData = doc.data()\n    //       if(usrData?.unreadMsgCount){\n    //         if(usrData?.unreadMsgCount >= count){\n    //           unreadMsg = usrData?.unreadMsgCount - count;\n    //           const updatedata = {\n    //             unreadMsgCount: unreadMsg,\n    //           };\n    //           firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //           .then(function (docres) {\n    //           return true;\n    //           })\n    //         }\n    //       }\n    //     }else{\n    //       return true;\n    //     }\n    //   }\n    // })\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\n_c2 = DecreementUnreadCountByUser;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IncreementUnreadCountByUser\");\n$RefreshReg$(_c2, \"DecreementUnreadCountByUser\");","map":{"version":3,"names":["POST_CONVERSATION_REQUEST","GET_CONVERSATION_SUCCESS","GET_CONVERSATION_FAILURE","POST_MESSAGES_REQUEST","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","POST_ADD_CONVERSATION_REQUEST","GET_ADD_CONVERSATION_SUCCESS","GET_ADD_CONVERSATION_FAILURE","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILURE","POST_GROUP_MESSAGES_REQUEST","GET_GROUP_MESSAGES_SUCCESS","GET_GROUP_MESSAGES_FAILURE","SEND_GROUP_MESSAGE_REQUEST","SEND_GROUP_MESSAGE_SUCCESS","SEND_GROUP_MESSAGE_FAILURE","UNREAD_MESSAGE_COUNT_REQUEST","UNREAD_MESSAGE_COUNT_SUCCESS","UNREAD_MESSAGE_COUNT_FAILURE","MESSAGE_NOTIFICATION","moment","firebaseConfig","auth","ERROR","Success","USER_NOTIFICATION","axios","CurrentChatId","getConversation","data","dispatch","type","payload","database","ref","on","resp","returnArr","forEach","childSnapshot","unreadCount","chatarr","val","lastChat","reciever_id","uid","sender_id","other_uid","Readingcount","child","key","limitToLast","chatSnapshot","res","firestore","collection","doc","get","then","exists","user_active","item","receiverDetails","lastConversation","unread_msg","push","catch","error","getUnreadMessageCount","CurrenmsgrefListner","chat_id","off","usrUnreadCount","undefined","console","log","getMessages","localStorage","setItem","reciever_uid","unreadcount","snapshot","msgarr_1","status","orderByChild","equalTo","once","recieveCount","numChildren","updatedata","update","recv_id","recv","listenerData","getMessages_original","msgSnapshot","msgarr","updateUnreadStatus","message","getGroupMessages","chatid","list","DecreementUnreadCountByUser","e","addConversation","room_id","recvid","room_id2","set","time","FieldValue","serverTimestamp","errorObject","sendMessage","senderid","msgData","date","ServerValue","increment","IncreementUnreadCountByUser","sendMessageNotification","sendGroupMessage","subs_id","allSubscriber","length","user","indx","aud_id","snapshot2","msggroupData","subscriberId","sendMessageNotificationAllSubscriber","id","Notification_tokens","notification_data","notification_response","post","subscribeobj","UserData","subscribed_list","i","Object","keys","map","subkeyid","sub_id","Recsubiddata","includes","replace","subres","subdoc","subscribe_type","Rec_subs_date","rec_checkDate","Date","milliseconds","seconds","rec_cloneDate","setDate","getDate","getTime","unreadCountVal","count"],"sources":["/home/asus/dapify/src/Redux/actions/chat-actions.js"],"sourcesContent":["import {\n  POST_CONVERSATION_REQUEST, GET_CONVERSATION_SUCCESS, GET_CONVERSATION_FAILURE,\n  POST_MESSAGES_REQUEST, GET_MESSAGES_SUCCESS, GET_MESSAGES_FAILURE,\n  POST_ADD_CONVERSATION_REQUEST, GET_ADD_CONVERSATION_SUCCESS, GET_ADD_CONVERSATION_FAILURE,\n  SEND_MESSAGE_REQUEST, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE,\n  POST_GROUP_MESSAGES_REQUEST, GET_GROUP_MESSAGES_SUCCESS, GET_GROUP_MESSAGES_FAILURE,\n  SEND_GROUP_MESSAGE_REQUEST, SEND_GROUP_MESSAGE_SUCCESS, SEND_GROUP_MESSAGE_FAILURE,\n  UNREAD_MESSAGE_COUNT_REQUEST, UNREAD_MESSAGE_COUNT_SUCCESS, UNREAD_MESSAGE_COUNT_FAILURE,\n  MESSAGE_NOTIFICATION\n} from './type';\nimport * as moment from 'moment';\nimport firebaseConfig from \"../../firebase\";\nimport { auth } from \"../auth-service\";\nimport { ERROR, Success } from '../../utils/errors';\nimport {\n  USER_NOTIFICATION\n\n} from './api_url';\nimport axios from 'axios';\n\n// ------------------------------FOR GET MESSAGE\n\nvar CurrentChatId = '';\n\n\nexport const getConversation = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_CONVERSATION_REQUEST, payload: true });\n\n    // ============ FOR BAck Button Condition ===========\n\n    // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n    // console.log(\"CHatIdData====\", CHatIdData)\n\n    // const CurrenmsgrefListner = firebaseConfig.database().ref('conversations/')\n\n    // if(CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined){\n    //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n    // } else {\n    // }\n\n    await firebaseConfig.database().ref('conversations/').on('value', resp => {\n      var returnArr = [];\n\n      resp.forEach((childSnapshot) => {\n        var unreadCount = 0;\n        var chatarr = childSnapshot.val();\n        var lastChat = '';\n\n        if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n          var other_uid = '';\n          if (chatarr.reciever_id === data.uid) {\n            other_uid = chatarr.sender_id;\n          }\n          else {\n            other_uid = chatarr.reciever_id\n          }\n\n          var Readingcount = 0;\n          if (chatarr[`${other_uid}`]) {\n            if (chatarr[`${data.uid}_receive_By`]) {\n              Readingcount = chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n            }\n            else {\n              Readingcount = chatarr[`${other_uid}`];\n            }\n          }\n\n          firebaseConfig.database().ref('chats/').child(childSnapshot.key).limitToLast(1).on('value', resp => {\n\n            resp.forEach((chatSnapshot) => {\n              lastChat = chatSnapshot.val();\n            })\n          })\n\n          // console.log('unreadCount-----+++', unreadCount);\n\n          const res = firebaseConfig.firestore().collection(\"users\").doc(other_uid);\n          res.get().then((doc) => {\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n                const item = chatarr;\n                item.receiverDetails = doc.data();\n                item.lastConversation = lastChat;\n                item.unread_msg = unreadCount;\n                item.key = childSnapshot.key;\n                item.Readingcount = Readingcount;\n                returnArr.push(item);\n                dispatch({ type: GET_CONVERSATION_SUCCESS, payload: returnArr });\n              }\n            }\n          })\n        }\n      })\n\n    }).catch(function (error) {\n      dispatch({ type: GET_CONVERSATION_FAILURE, payload: false });\n    })\n  } catch (error) {\n    dispatch({ type: GET_CONVERSATION_FAILURE, payload: error });\n  }\n};\n\n\nexport const getUnreadMessageCount = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: UNREAD_MESSAGE_COUNT_REQUEST, payload: true });\n\n      // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n\n      var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n      CurrentChatId = data.chat_id;\n\n      if(CurrentChatId){\n        CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      } else {\n         await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n        if (resp.exists()) {\n          const usrUnreadCount = resp.val();\n          if (usrUnreadCount !== undefined) {\n            console.log('-----check unread message----', usrUnreadCount);\n            dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n          }\n        } else {\n          dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: false });\n        }\n      })\n      };\n\n      \n      // if (CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined) {\n      //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      // } else {\n      //   await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n      //     if (resp.exists()) {\n      //       const usrUnreadCount = resp.val();\n      //       if (usrUnreadCount !== undefined) {\n      //         console.log('-----check unread message----', usrUnreadCount);\n      //         dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n      //       }\n      //     } else {\n      //       dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: false });\n      //     }\n      //   })\n      // }\n\n     \n\n      await firebaseConfig.database().ref('conversations/').on('value', resp => {\n\n        var Readingcount = 0;\n        resp.forEach((childSnapshot) => {\n\n          var chatarr = childSnapshot.val();\n\n          if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n            var other_uid = '';\n            if (chatarr.reciever_id === data.uid) {\n              other_uid = chatarr.sender_id;\n            }\n            else {\n              other_uid = chatarr.reciever_id\n            }\n\n            if (chatarr[`${other_uid}`]) {\n              if (chatarr[`${data.uid}_receive_By`]) {\n                Readingcount += chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n              }\n              else {\n                Readingcount += chatarr[`${other_uid}`];\n              }\n            }\n          }\n\n          console.log('Readingcount', Readingcount);\n          dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: Readingcount });\n\n        })\n\n      })\n    }\n  } catch (error) {\n    dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: error });\n  }\n};\n\n\nexport const getMessages = (data) => async dispatch => {\n\n  try {\n    var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n    CurrentChatId = data.chat_id;\n\n    localStorage.setItem(\"lestener_Chat_id\", data.chat_id);\n\n\n    dispatch({ type: POST_MESSAGES_REQUEST, payload: true });\n\n    // console.log('########## CurrentChatId', CurrentChatId);\n    // console.log('########## Chatid', data.chat_id);\n    // console.log('data get outer', data);\n\n    if (data !== \"\") {\n\n      var reciever_uid = '';\n      if (data.chat_id !== undefined) {\n        var returnArr = [];\n        var unreadcount = 0;\n\n        await CurrenmsgrefListner.child(data.chat_id).on('child_added', async (snapshot) => {\n\n          // console.log('resp_recent', snapshot.val());\n          // console.log('resp_recentssss', snapshot.key);\n          // console.log('datachat_id', data.chat_id);\n          // console.log('########## inner CurrentChatId', CurrentChatId);\n          // console.log('data get inner', data);\n\n          var msgarr_1 = '';\n          msgarr_1 = snapshot.val();\n          const item = msgarr_1;\n          item.key = snapshot.key;\n          returnArr.push(item);\n\n          if (item.status === 'unread') {\n            unreadcount = unreadcount + 1;\n          }\n\n          if (CurrentChatId === data.chat_id) {\n\n            await firebaseConfig.database().ref('chats/').child(CurrentChatId)\n              .orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n                var recieveCount = snapshot.numChildren();\n\n                // console.log('recieveCount CurrentChatId', CurrentChatId);\n                // console.log('data.uid', data.uid);\n                // console.log('data get', data);\n\n                var updatedata = {\n\n                  [`${data.uid}_receive_By`]: recieveCount,\n                };\n                // console.log('chatchat-id', data.chat_id);\n                await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n              })\n          }\n\n          // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n\n        });\n\n        if (data.recv_id !== \"\") {\n          reciever_uid = data.recv_id;\n          const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n          recv.get().then(async (doc) => {\n\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n\n                dispatch({ type: GET_MESSAGES_SUCCESS, payload: returnArr, listenerData: CurrenmsgrefListner });\n\n              }\n            }\n          })\n\n        } else {\n          dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n        }\n      }\n\n    } else {\n      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_MESSAGES_FAILURE, payload: error });\n  }\n};\n\n\nexport const getMessages_original = (data) => async dispatch => {\n\n\n  try {\n\n    dispatch({ type: POST_MESSAGES_REQUEST, payload: true });\n    console.log('##########chatid', data.chat_id);\n    if (data !== \"\") {\n\n      var reciever_uid = '';\n      if (data.chat_id !== undefined) {\n\n        await firebaseConfig.database().ref('chats/').child(data.chat_id).on('value', resp => {\n          var returnArr = [];\n          var unreadcount = 0;\n\n          resp.forEach((msgSnapshot) => {\n            var msgarr = '';\n            msgarr = msgSnapshot.val();\n\n            const item = msgarr;\n            console.log('itemis', item);\n            item.key = msgSnapshot.key;\n\n            returnArr.push(item);\n\n            if (item.status === 'unread') {\n              unreadcount = unreadcount + 1;\n            }\n\n          })\n\n          console.log('checkreturn------', returnArr);\n          if (data.recv_id !== \"\") {\n            reciever_uid = data.recv_id;\n            const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n            recv.get().then(async (doc) => {\n              if (doc.exists) {\n                if (doc.data().user_active === true) {\n                  returnArr['receiverData'] = doc.data();\n                  console.log('check-chat-id', data.chat_id);\n\n\n                  await updateUnreadStatus(data.chat_id, data.uid, unreadcount)\n                    .then(async function () {\n\n                      // await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n                      //   if (resp.exists()) {\n                      //     const usrUnreadCount = resp.val();\n                      //     if (usrUnreadCount !== undefined) {\n                      //       console.log('-----check unread message----',usrUnreadCount);\n                      //       dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n                      //     }\n                      //   }\n                      // })\n\n                      await firebaseConfig.database().ref('chats/').child(data.chat_id)\n                        .orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n                          var recieveCount = snapshot.numChildren();\n                          var updatedata = {\n\n                            [`${data.uid}_receive_By`]: recieveCount,\n                          };\n\n                          await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n                        })\n\n                      dispatch({ type: GET_MESSAGES_SUCCESS, payload: returnArr });\n\n                    }).catch(function (error) {\n                      ERROR(error.message);\n                      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n                    })\n                }\n              }\n            })\n          } else {\n            dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n          }\n\n\n        }).catch(function (error) {\n          dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n        })\n\n      }\n\n\n    } else {\n      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_MESSAGES_FAILURE, payload: error });\n  }\n};\n\n\nexport const getGroupMessages = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_GROUP_MESSAGES_REQUEST, payload: true });\n\n    if (data !== \"\") {\n\n      await firebaseConfig.database().ref('GroupChats/').child(data.chat_id).on('value', resp => {\n        var returnArr = [];\n        resp.forEach((msgSnapshot) => {\n          var msgarr = '';\n          msgarr = msgSnapshot.val();\n\n          const item = msgarr;\n          item.key = msgSnapshot.key;\n          returnArr.push(item);\n          dispatch({ type: GET_GROUP_MESSAGES_SUCCESS, payload: returnArr });\n        })\n\n      }).catch(function (error) {\n        dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: error });\n  }\n};\n\nasync function updateUnreadStatus(chatid, uid, unreadcount) {\n\n  try {\n\n    var list = 0;\n\n    await firebaseConfig.database().ref('chats/').child(chatid)\n      .orderByChild('reciever_id').equalTo(uid).once('value', async function (snapshot) {\n        snapshot.forEach(function (child) {\n\n          if (child.val().status === 'unread') {\n\n            //unreadCount = unreadCount +1;\n            child.ref.update({ status: 'read' });\n\n            list = list + 1;\n          }\n        });\n\n        await DecreementUnreadCountByUser(uid, unreadcount)\n        console.log('decreement', unreadcount);\n\n      });\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// ------------------------------FOR ADD MESSAGE\n\nexport const addConversation = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_ADD_CONVERSATION_REQUEST, payload: true });\n    var room_id = data.recvid + '_' + data.uid;\n    var room_id2 = data.uid + '_' + data.recvid;\n\n    await firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n      if (snapshot.exists()) {\n\n        dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id });\n      } else {\n        firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot => {\n          if (snapshot.exists()) {\n\n            dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id2 });\n          } else {\n            firebaseConfig.database().ref('conversations/').child(room_id).set({\n              reciever_id: data.recvid,\n              sender_id: data.uid,\n              time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n\n            }).then(() => {\n\n            }).catch(function (error) {\n              ERROR(error.message);\n\n            })\n            dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id });\n          }\n        }, (errorObject) => {\n\n          dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: false });\n          console.log('errorObject', errorObject);\n        });\n      }\n    }, (errorObject) => {\n\n      dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: false });\n\n    });\n  } catch (error) {\n\n    dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: error });\n  }\n};\n\n\n// ------------------------------FOR SEND MESSAGE\n\nexport const sendMessage = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: SEND_MESSAGE_REQUEST, payload: true });\n      var senderid = data.sender_id;\n      const msgData = {\n        reciever_id: data.reciever_id,\n        sender_id: data.sender_id,\n        date: data.date,\n        time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n        message: data.message,\n        type: data.type,\n        status: 'unread',\n      }\n\n      await firebaseConfig.database().ref('chats/' + data.chat_id).push(msgData).then(async () => {\n\n        var updatedata = {\n\n          [`${senderid}`]: firebaseConfig.database.ServerValue.increment(1),\n          \"messageCount\": firebaseConfig.database.ServerValue.increment(1),\n        };\n\n        await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n\n        await IncreementUnreadCountByUser(data.reciever_id).then(async function () {\n          await sendMessageNotification(data.reciever_id);\n          dispatch({ type: SEND_MESSAGE_SUCCESS, payload: true });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n        })\n\n      }).catch(function (error) {\n        dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n    }\n\n  } catch (error) {\n    dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n  }\n\n  // await firebaseConfig.database().ref('chats/' + data.chat_id).on('child_added');\n\n  // var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n  // CurrentChatId = data.chat_id;\n  // CurrenmsgrefListner.child(data.chat_id).on('child_added','');\n\n  // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n\n  // getMessages(data);\n\n};\n\n\nexport const sendGroupMessage = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: SEND_GROUP_MESSAGE_REQUEST, payload: true });\n      console.log('groupmsg-----', data);\n      var subs_id = [];\n      if (data.allSubscriber.length > 0) {\n\n        data.allSubscriber.forEach((user, indx) => {\n\n          subs_id.push(user.aud_id);\n          var room_id = user.aud_id + '_' + data.sender_id;\n          var room_id2 = data.sender_id + '_' + user.aud_id;\n\n\n          firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n            if (snapshot.exists()) {\n\n              const msgData = {\n                reciever_id: user.aud_id,\n                sender_id: data.sender_id,\n                date: data.date,\n                time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                message: data.message,\n                type: data.type,\n                status: 'unread',\n              }\n              firebaseConfig.database().ref('chats/' + room_id).push(msgData)\n              IncreementUnreadCountByUser(user.aud_id).then(function () {\n                return true;\n              })\n\n            } else {\n              firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot2 => {\n                if (snapshot2.exists()) {\n                  const msgData = {\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    date: data.date,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                    message: data.message,\n                    type: data.type,\n                    status: 'unread',\n                  }\n                  firebaseConfig.database().ref('chats/' + room_id2).push(msgData)\n                  IncreementUnreadCountByUser(user.aud_id).then(function () {\n                    return true;\n                  })\n                } else {\n\n                  firebaseConfig.database().ref('conversations/').child(room_id).set({\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n\n                  }).then(() => {\n                    const msgData = {\n                      reciever_id: user.aud_id,\n                      sender_id: data.sender_id,\n                      date: data.date,\n                      time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                      message: data.message,\n                      type: data.type,\n                      status: 'unread',\n                    }\n                    firebaseConfig.database().ref('chats/' + room_id).push(msgData)\n                    IncreementUnreadCountByUser(user.aud_id).then(function () {\n                      return true;\n                    })\n\n                  }).catch(function (error) {\n                    dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n                    ERROR(error.message);\n                  })\n                }\n\n              }, (errorObject) => {\n\n                dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: false });\n\n              });\n            }\n          }, (errorObject) => {\n\n            dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: false });\n\n          });\n\n        })\n\n        if (subs_id.length > 0) {\n          const msggroupData = {\n\n            sender_id: data.sender_id,\n            date: data.date,\n            time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n            message: data.message,\n            type: data.type,\n            subscriberId: subs_id,\n\n          }\n          await firebaseConfig.database().ref('GroupChats/' + data.sender_id).push(msggroupData).then(async () => {\n            await sendMessageNotificationAllSubscriber(data.sender_id);\n            dispatch({ type: SEND_GROUP_MESSAGE_SUCCESS, payload: true });\n          }).catch(function (error) {\n            dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n            ERROR(error.message);\n          })\n        }\n      }\n    }\n  } catch (error) {\n    dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n  }\n};\n\n\nasync function sendMessageNotification(id) {\n\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            const notification_data = {\n\n              \"title\": \"Message\",\n              \"body\": MESSAGE_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens,\n            }\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n            if (notification_response.status === 200) {\n            }\n          }\n\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nasync function sendMessageNotificationAllSubscriber(uid) {\n\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n      }\n      else {\n\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n        if (subscribeobj !== '') {\n\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n\n            var sub_id = '';\n            var Recsubiddata = '';\n            if (subkeyid.includes('_RECIEVER')) {\n              sub_id = subkeyid.replace('_RECIEVER', '');\n              Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n            }\n            if (subkeyid.includes('_SUBSCRIBER')) {\n              sub_id = subkeyid.replace('_SUBSCRIBER', '');\n              Recsubiddata = subscribeobj[sub_id + '_SUBSCRIBER'];\n            }\n\n            if (sub_id !== '') {\n\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async (subdoc) => {\n\n                if (!subdoc.exists) {\n\n                }\n                else {\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                    if (subdoc.data()?.Notification_tokens) {\n                      if (subdoc.data().Notification_tokens.length > 0) {\n\n                        console.log(subdoc.data().Notification_tokens);\n                        const notification_data = {\n\n                          \"title\": \"Message\",\n                          \"body\": MESSAGE_NOTIFICATION,\n                          \"to\": subdoc.data().Notification_tokens,\n                        }\n\n\n                        const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                        console.log('notification_response', notification_response);\n                        if (notification_response.status === 200) {\n                        }\n                      }\n                    }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n\n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"Message\",\n                              \"body\": MESSAGE_NOTIFICATION,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              })\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// ------------------------------FOR INCREMENt & DECREMENT MESSAGE\n\nasync function IncreementUnreadCountByUser(recv_id) {\n\n  try {\n    var unreadCountVal = 0;\n\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n        const usrUnreadCount = resp.val();\n\n        if (usrUnreadCount !== undefined) {\n          unreadCountVal = usrUnreadCount.unreadCount + 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal,\n\n          })\n        }\n        else {\n          unreadCountVal = 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal,\n\n          })\n        }\n      } else {\n        unreadCountVal = 1;\n        firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n          unreadCount: unreadCountVal,\n\n        })\n      }\n    })\n\n    // await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).on('value', resp => {\n\n    //   resp.forEach((msgSnapshot) => {\n    //     var msgarr ='';\n    //     msgarr = msgSnapshot.val();\n\n    //     console.log('msgarr',msgarr);\n    //   })\n\n    // })\n\n\n    // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n\n    //   if (doc.exists) {\n    //     var unreadMsg = 0;\n    //     var usrData = doc.data()\n    //     if(usrData?.unreadMsgCount){\n    //       unreadMsg = usrData?.unreadMsgCount +1;\n    //     }\n    //     else{\n    //       unreadMsg =1;\n    //     }\n\n    //     const updatedata = {\n    //       unreadMsgCount: unreadMsg,\n    //     };\n    //     firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //     .then(function (docres) {\n    //     return true;\n    //     })\n    //   }\n    // })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nasync function DecreementUnreadCountByUser(recv_id, count) {\n\n  try {\n    console.log('checkcount', count);\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n\n        const usrUnreadCount = resp.val();\n        if (usrUnreadCount !== undefined) {\n\n          if (usrUnreadCount.unreadCount >= count) {\n            var unreadCountVal = usrUnreadCount.unreadCount - count;\n            firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n              unreadCount: unreadCountVal,\n\n            })\n          }\n        }\n      }\n    })\n\n    // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n\n    //   if (doc.exists) {\n    //     console.log('dfdfgdfgdf',count);\n    //     if(count !== 0){\n    //       var unreadMsg = 0;\n    //       var usrData = doc.data()\n    //       if(usrData?.unreadMsgCount){\n    //         if(usrData?.unreadMsgCount >= count){\n    //           unreadMsg = usrData?.unreadMsgCount - count;\n    //           const updatedata = {\n    //             unreadMsgCount: unreadMsg,\n    //           };\n\n    //           firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //           .then(function (docres) {\n    //           return true;\n    //           })\n    //         }\n    //       }\n    //     }else{\n    //       return true;\n    //     }\n    //   }\n    // })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}