[{"/home/asus/dapify/src/index.js":"1","/home/asus/dapify/src/App.js":"2","/home/asus/dapify/src/reportWebVitals.js":"3","/home/asus/dapify/src/serviceWorker.js":"4","/home/asus/dapify/src/Redux/store.js":"5","/home/asus/dapify/src/private-route.js":"6","/home/asus/dapify/src/notification.js":"7","/home/asus/dapify/src/Redux/actions/auth-actions.js":"8","/home/asus/dapify/src/templates/view/stripeReturn.js":"9","/home/asus/dapify/src/templates/view/stripeReauth.js":"10","/home/asus/dapify/src/templates/view/PrivacyPolicy.js":"11","/home/asus/dapify/src/templates/view/Content/AddVideo.js":"12","/home/asus/dapify/src/templates/view/Content/AddImage.js":"13","/home/asus/dapify/src/templates/view/Content/AddAudio.js":"14","/home/asus/dapify/src/templates/view/Home/userProfile.js":"15","/home/asus/dapify/src/templates/view/Chat_Inbox/index.js":"16","/home/asus/dapify/src/templates/view/Content/index.js":"17","/home/asus/dapify/src/templates/view/Home/index.js":"18","/home/asus/dapify/src/templates/view/Subscription/index.js":"19","/home/asus/dapify/src/templates/view/Payment/index.js":"20","/home/asus/dapify/src/templates/view/Signup/index.js":"21","/home/asus/dapify/src/templates/view/Login/index.js":"22","/home/asus/dapify/src/templates/view/ForgotPassword/index.js":"23","/home/asus/dapify/src/templates/view/Settings/index.js":"24","/home/asus/dapify/src/templates/view/Content_Bookmark/index.js":"25","/home/asus/dapify/src/templates/view/Audience/index.js":"26","/home/asus/dapify/src/templates/view/Notifications/index.js":"27","/home/asus/dapify/src/templates/view/Insights/index.js":"28","/home/asus/dapify/src/Redux/reducers/index.js":"29","/home/asus/dapify/src/Redux/auth-service.js":"30","/home/asus/dapify/src/Redux/actions/type.js":"31","/home/asus/dapify/src/firebase.js":"32","/home/asus/dapify/src/Redux/actions/api_url.js":"33","/home/asus/dapify/src/templates/view/Navbar.js":"34","/home/asus/dapify/src/templates/view/footer.js":"35","/home/asus/dapify/src/Redux/actions/media-actions.js":"36","/home/asus/dapify/src/utils/errors.js":"37","/home/asus/dapify/src/utils/Loader.js":"38","/home/asus/dapify/src/templates/view/Chat_Inbox/ConversationView.js":"39","/home/asus/dapify/src/templates/view/Home/homeVideoAndImage.js":"40","/home/asus/dapify/src/templates/view/Home/homeAudio.js":"41","/home/asus/dapify/src/templates/view/Home/homeAbout.js":"42","/home/asus/dapify/src/templates/view/Home/homeProfile.js":"43","/home/asus/dapify/src/templates/view/Home/homePage.js":"44","/home/asus/dapify/src/templates/components/userProfile.js":"45","/home/asus/dapify/src/templates/components/videoplayer.js":"46","/home/asus/dapify/src/templates/view/Subscription/SubscriptionDetails.js":"47","/home/asus/dapify/src/templates/view/Payment/CheckoutForm.js":"48","/home/asus/dapify/src/templates/components/calendar_date.js":"49","/home/asus/dapify/src/Redux/reducers/insights-instagramReducer.js":"50","/home/asus/dapify/src/Redux/reducers/notificationsReducer.js":"51","/home/asus/dapify/src/Redux/reducers/chatReducer.js":"52","/home/asus/dapify/src/Redux/reducers/subscriberReducer.js":"53","/home/asus/dapify/src/Redux/reducers/mediaReducer.js":"54","/home/asus/dapify/src/Redux/reducers/authReducer.js":"55","/home/asus/dapify/src/templates/view/Insights/insightsView.js":"56","/home/asus/dapify/src/templates/view/Insights/facebookConnect.js":"57","/home/asus/dapify/src/templates/view/Notifications/Notification_view.js":"58","/home/asus/dapify/src/Redux/actions/subscriber-actions.js":"59","/home/asus/dapify/src/templates/components/encryptProfileUrl.js":"60","/home/asus/dapify/src/templates/components/musicComponent.js":"61","/home/asus/dapify/src/templates/view/Settings/linkSetting.js":"62","/home/asus/dapify/src/templates/view/Settings/revenueSetting.js":"63","/home/asus/dapify/src/templates/view/Settings/socialLinksSetting.js":"64","/home/asus/dapify/src/templates/view/Settings/bioSetting.js":"65","/home/asus/dapify/src/templates/view/Chat_Inbox/groupMessages.js":"66","/home/asus/dapify/src/templates/view/Chat_Inbox/defaultMessagesScreen.js":"67","/home/asus/dapify/src/templates/view/Chat_Inbox/messages.js":"68","/home/asus/dapify/src/templates/components/readMore.js":"69","/home/asus/dapify/src/templates/components/subscriptionExpiryDate.js":"70","/home/asus/dapify/src/Redux/actions/chat-actions.js":"71","/home/asus/dapify/src/templates/view/Home/shareMediaContent.js":"72","/home/asus/dapify/src/Redux/actions/notification-actions.js":"73","/home/asus/dapify/src/templates/view/Navhead.js":"74","/home/asus/dapify/src/templates/view/Settings/subscriptionSetting.js":"75","/home/asus/dapify/src/templates/view/Settings/accountSetting.js":"76","/home/asus/dapify/src/templates/view/Settings/infoSetting.js":"77","/home/asus/dapify/src/templates/view/Settings/helpSetting.js":"78","/home/asus/dapify/src/templates/view/Settings/imageSetting.js":"79","/home/asus/dapify/src/templates/components/numberToAbbreviated.js":"80","/home/asus/dapify/src/Redux/actions/insights-Instagram-actions.js":"81","/home/asus/dapify/src/templates/components/mediaLike.js":"82","/home/asus/dapify/src/templates/components/mediaBookmark.js":"83","/home/asus/dapify/src/templates/components/mediaDuration.js":"84","/home/asus/dapify/src/templates/components/shareMediaMusic.js":"85","/home/asus/dapify/src/templates/components/customPlayPause.js":"86","/home/asus/dapify/src/templates/view/Settings/paidContent.js":"87","/home/asus/dapify/src/templates/view/Settings/support.js":"88","/home/asus/dapify/src/templates/view/Settings/FAQ.js":"89","/home/asus/dapify/src/templates/components/encryptShareUrl.js":"90"},{"size":497,"mtime":1643971162000,"results":"91","hashOfConfig":"92"},{"size":3554,"mtime":1655472155000,"results":"93","hashOfConfig":"92"},{"size":362,"mtime":1636462808000,"results":"94","hashOfConfig":"92"},{"size":4084,"mtime":1651747444000,"results":"95","hashOfConfig":"92"},{"size":619,"mtime":1640153268000,"results":"96","hashOfConfig":"92"},{"size":1010,"mtime":1648118139000,"results":"97","hashOfConfig":"92"},{"size":4178,"mtime":1651477267000,"results":"98","hashOfConfig":"92"},{"size":29402,"mtime":1663240300000,"results":"99","hashOfConfig":"92"},{"size":192,"mtime":1646141578000,"results":"100","hashOfConfig":"92"},{"size":198,"mtime":1646133968000,"results":"101","hashOfConfig":"92"},{"size":41233,"mtime":1648198455000,"results":"102","hashOfConfig":"92"},{"size":14392,"mtime":1648277451000,"results":"103","hashOfConfig":"92"},{"size":9954,"mtime":1648277451000,"results":"104","hashOfConfig":"92"},{"size":15084,"mtime":1648277451000,"results":"105","hashOfConfig":"92"},{"size":5448,"mtime":1648286467000,"results":"106","hashOfConfig":"92"},{"size":1561,"mtime":1651471128000,"results":"107","hashOfConfig":"92"},{"size":2739,"mtime":1648277451000,"results":"108","hashOfConfig":"92"},{"size":2715,"mtime":1651469225000,"results":"109","hashOfConfig":"92"},{"size":2972,"mtime":1644576590000,"results":"110","hashOfConfig":"92"},{"size":863,"mtime":1646730659000,"results":"111","hashOfConfig":"92"},{"size":13201,"mtime":1665564474228,"results":"112","hashOfConfig":"92"},{"size":4283,"mtime":1655385999000,"results":"113","hashOfConfig":"92"},{"size":3215,"mtime":1646142615000,"results":"114","hashOfConfig":"92"},{"size":6966,"mtime":1648216583000,"results":"115","hashOfConfig":"92"},{"size":5319,"mtime":1665567161429,"results":"116","hashOfConfig":"92"},{"size":5588,"mtime":1665574430442,"results":"117","hashOfConfig":"92"},{"size":2912,"mtime":1665655091931,"results":"118","hashOfConfig":"92"},{"size":3484,"mtime":1655386175000,"results":"119","hashOfConfig":"92"},{"size":487,"mtime":1645189374000,"results":"120","hashOfConfig":"92"},{"size":833,"mtime":1655371445000,"results":"121","hashOfConfig":"92"},{"size":13328,"mtime":1646910747000,"results":"122","hashOfConfig":"92"},{"size":2197,"mtime":1655385978000,"results":"123","hashOfConfig":"92"},{"size":1281,"mtime":1665495094740,"results":"124","hashOfConfig":"92"},{"size":7204,"mtime":1663250559000,"results":"125","hashOfConfig":"92"},{"size":161,"mtime":1640153268000,"results":"126","hashOfConfig":"92"},{"size":40179,"mtime":1648555214000,"results":"127","hashOfConfig":"92"},{"size":696,"mtime":1640153268000,"results":"128","hashOfConfig":"92"},{"size":578,"mtime":1640153268000,"results":"129","hashOfConfig":"92"},{"size":14366,"mtime":1665573002636,"results":"130","hashOfConfig":"92"},{"size":11583,"mtime":1650463430000,"results":"131","hashOfConfig":"92"},{"size":5047,"mtime":1648447991000,"results":"132","hashOfConfig":"92"},{"size":2651,"mtime":1650460017000,"results":"133","hashOfConfig":"92"},{"size":10360,"mtime":1651469343000,"results":"134","hashOfConfig":"92"},{"size":4397,"mtime":1650460455000,"results":"135","hashOfConfig":"92"},{"size":1123,"mtime":1650524697000,"results":"136","hashOfConfig":"92"},{"size":1979,"mtime":1650519507000,"results":"137","hashOfConfig":"92"},{"size":4554,"mtime":1648216585000,"results":"138","hashOfConfig":"92"},{"size":5692,"mtime":1648216578000,"results":"139","hashOfConfig":"92"},{"size":6639,"mtime":1665489213042,"results":"140","hashOfConfig":"92"},{"size":3584,"mtime":1645793656000,"results":"141","hashOfConfig":"92"},{"size":2234,"mtime":1651476136000,"results":"142","hashOfConfig":"92"},{"size":4477,"mtime":1652077228000,"results":"143","hashOfConfig":"92"},{"size":6593,"mtime":1646816801000,"results":"144","hashOfConfig":"92"},{"size":5228,"mtime":1647344394000,"results":"145","hashOfConfig":"92"},{"size":8339,"mtime":1648119436000,"results":"146","hashOfConfig":"92"},{"size":26020,"mtime":1650532351000,"results":"147","hashOfConfig":"92"},{"size":2213,"mtime":1665491904727,"results":"148","hashOfConfig":"92"},{"size":6432,"mtime":1665567343617,"results":"149","hashOfConfig":"92"},{"size":44162,"mtime":1665573990792,"results":"150","hashOfConfig":"92"},{"size":309,"mtime":1640778230000,"results":"151","hashOfConfig":"92"},{"size":8330,"mtime":1648448232000,"results":"152","hashOfConfig":"92"},{"size":9923,"mtime":1643958707000,"results":"153","hashOfConfig":"92"},{"size":19062,"mtime":1648119549000,"results":"154","hashOfConfig":"92"},{"size":5573,"mtime":1646142615000,"results":"155","hashOfConfig":"92"},{"size":2255,"mtime":1640238896000,"results":"156","hashOfConfig":"92"},{"size":8188,"mtime":1648277451000,"results":"157","hashOfConfig":"92"},{"size":1868,"mtime":1651755781000,"results":"158","hashOfConfig":"92"},{"size":9617,"mtime":1665497546386,"results":"159","hashOfConfig":"92"},{"size":950,"mtime":1641453554000,"results":"160","hashOfConfig":"92"},{"size":524,"mtime":1640691563000,"results":"161","hashOfConfig":"92"},{"size":29957,"mtime":1652175173000,"results":"162","hashOfConfig":"92"},{"size":2191,"mtime":1646829178000,"results":"163","hashOfConfig":"92"},{"size":10387,"mtime":1651477287000,"results":"164","hashOfConfig":"92"},{"size":1367,"mtime":1640238896000,"results":"165","hashOfConfig":"92"},{"size":3310,"mtime":1643889639000,"results":"166","hashOfConfig":"92"},{"size":5029,"mtime":1647508123000,"results":"167","hashOfConfig":"92"},{"size":7187,"mtime":1648547044000,"results":"168","hashOfConfig":"92"},{"size":4202,"mtime":1646643552000,"results":"169","hashOfConfig":"92"},{"size":4939,"mtime":1642082173000,"results":"170","hashOfConfig":"92"},{"size":572,"mtime":1645609123000,"results":"171","hashOfConfig":"92"},{"size":13205,"mtime":1665493169267,"results":"172","hashOfConfig":"92"},{"size":3519,"mtime":1647328213000,"results":"173","hashOfConfig":"92"},{"size":3017,"mtime":1647328211000,"results":"174","hashOfConfig":"92"},{"size":583,"mtime":1647257341000,"results":"175","hashOfConfig":"92"},{"size":2855,"mtime":1648286462000,"results":"176","hashOfConfig":"92"},{"size":807,"mtime":1648277451000,"results":"177","hashOfConfig":"92"},{"size":1006,"mtime":1648119549000,"results":"178","hashOfConfig":"92"},{"size":764,"mtime":1640238896000,"results":"179","hashOfConfig":"92"},{"size":1918,"mtime":1646816795000,"results":"180","hashOfConfig":"92"},{"size":312,"mtime":1646830754000,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"31dp7s",{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"184"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"184"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"184"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"208","usedDeprecatedRules":"184"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"184"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"184"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"184"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"184"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"184"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"184"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"184"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"184"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"184"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"184"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"184"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"184"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"184"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"184"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"184"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"184"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"184"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"184"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"184"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"184"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"184"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"184"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"184"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"184"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"184"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"184"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"184"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"184"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"184"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"184"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"184"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"184"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"184"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"184"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"184"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"184"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"184"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"184"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"184"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"184"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"184"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"184"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"184"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"184"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"184"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"184"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"184"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"184"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"184"},"/home/asus/dapify/src/index.js",[],["417","418"],"/home/asus/dapify/src/App.js",["419","420"],"import React,{useLayoutEffect,useEffect} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './assets/css/style.css';\nimport './assets/css/responsive.css'\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Home from './templates/view/Home';\nimport Subscription from './templates/view/Subscription';\nimport Payment from './templates/view/Payment';\nimport SignUp from './templates/view/Signup';\nimport LogIn from './templates/view/Login';\nimport ForgotPassword from './templates/view/ForgotPassword';\nimport Settings from './templates/view/Settings';\nimport AddContent from './templates/view/Content';\nimport AddVideo from './templates/view/Content/AddVideo';\nimport AddImage from './templates/view/Content/AddImage';\nimport AddAudio from './templates/view/Content/AddAudio';\nimport UserProfile from './templates/view/Home/userProfile';\nimport ContentBookmark from './templates/view/Content_Bookmark';\nimport Audience from './templates/view/Audience';\nimport './App.css';\nimport PrivateRoute from \"./private-route\";\nimport { fetchUser } from \"./Redux/actions/auth-actions\";\nimport { connect } from \"react-redux\";\nimport ChatInbox from \"./templates/view/Chat_Inbox/\";\nimport Notification from './notification';\nimport NotificationsList from './templates/view/Notifications';\nimport Insights from './templates/view/Insights';\nimport StripeReturn from './templates/view/stripeReturn';\nimport StripeReauth from './templates/view/stripeReauth';\nimport PrivacyPolicy from './templates/view/PrivacyPolicy';\n\nfunction App({ fetchUser }) {\n\n    useLayoutEffect(() => {\n     fetchUser();\n    }, []);\n   \n\n  return (\n      <div className=\"App\">\n      \n       <Router>\n            <Switch>\n              <PrivateRoute component={Home} path=\"/dashboard\" exact/>\n              <PrivateRoute component={Payment} path=\"/payment\" exact/>\n              <PrivateRoute component={StripeReauth} path=\"/stripeReauth\" exact/>\n              <PrivateRoute component={StripeReturn} path=\"/stripeReturn\" exact/>\n              \n              <PrivateRoute component={Subscription} path=\"/subscription/:subscibe_user_id\"/>\n              <PrivateRoute component={Settings} path=\"/settings\" exact/>\n              <PrivateRoute component={AddContent} path=\"/addContent\" exact/>\n              <PrivateRoute component={AddVideo} path=\"/addVideo\" exact/>\n              <PrivateRoute component={AddImage} path=\"/addImage\" exact/>\n              <PrivateRoute component={AddAudio} path=\"/addAudio\" exact/>\n              <PrivateRoute component={ContentBookmark} path=\"/saves\"/>\n              <PrivateRoute component={Audience} path=\"/audience\"/>\n              <PrivateRoute component={ChatInbox} path=\"/inbox\"/>\n              <PrivateRoute component={UserProfile} path=\"/userProfile/:user_id/:type?/:mediaId?\"/>\n              <PrivateRoute component={NotificationsList} path=\"/notifications\"/>\n              <PrivateRoute component={Insights} path=\"/insights\"/>\n              <Route path=\"/signup\" component={SignUp} />\n              <Route path=\"/\" component={LogIn} exact/> \n              <Route path=\"/privacyPolicy\" component={PrivacyPolicy} />\n              <Route exact path=\"/forgot_password\" component={ForgotPassword} />\n              <Route path=\"/*\" component={LogIn} />\n\n            </Switch>\n            <ToastContainer autoClose={5000} hideProgressBar />\n            <Notification/>\n        </Router>\n        \n      </div>\n  );\n}\nexport default connect(null, { fetchUser })(App);\n\n\n","/home/asus/dapify/src/reportWebVitals.js",[],"/home/asus/dapify/src/serviceWorker.js",[],"/home/asus/dapify/src/Redux/store.js",[],"/home/asus/dapify/src/private-route.js",[],"/home/asus/dapify/src/notification.js",["421","422","423","424"],"import React, {useState, useEffect} from 'react'\nimport toast, { Toaster } from 'react-hot-toast';\nimport { onMessageListener } from './firebase';\nimport { useDispatch,useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, fetchUser } from \"./Redux/actions/auth-actions\";\nimport {\n   UNREAD_NOTIFICATION_COUNT_SUCCESS,UNREAD_MESSAGE_COUNT_SUCCESS,\n} from './Redux/actions/type';\nimport firebaseConfig from \"../src/firebase\";\n\nconst Notification = (props) => {\n\n  const dispatch = useDispatch();\n  const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n  const [notification, setNotification] = useState({title: '', body: ''});\n  const [msgNotification, setMsgNotification] = useState({title: '', body: ''});\n  const notify = () =>  toast(<ToastDisplay/>); \n  function ToastDisplay() {\n    return (\n      <div>\n        <p><b>{notification?.title}</b></p>\n        <p>{notification?.body}</p>\n      </div>\n    );\n  };\n\n\n  useEffect(() => {\n    if (notification?.title !==\"\" ){\n     notify()\n     async function fetchdata() {\n\n        if (notification.title !== 'Message'){              \n          console.log('check4');\n        const res = await firebaseConfig.firestore().collection(\"users\").doc(authuser.uid);\n        res.get().then((doc) => {\n          \n          if (!doc.exists) {\n          }\n          else {\n            const usrUnreadNotfcn = doc.data();\n            console.log('usrUnreadNotfcnuserrrrrrr',usrUnreadNotfcn);\n            if (usrUnreadNotfcn.Unread_Notification !== undefined) {\n              dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: usrUnreadNotfcn.Unread_Notification + 1 });\n            }else{\n              dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: 1 });\n            }\n          }\n        })\n      }\n\n      //   if(msgNotification.title === 'Message'){\n      //     const res1 = await firebaseConfig.database().ref('UserUnreadCount/').child(authuser.uid).on(\"child_added\", resp => {\n      //       if (resp.exists()) {\n      //         const usrUnreadCount = resp.val();\n      //         if (usrUnreadCount !== undefined) {\n      //           dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n      //         }\n      //       }\n      //   })\n      // }\n      \n      }\n      fetchdata();\n     \n    }\n  }, [notification])\n\n  // useEffect(() => {\n  \n  //    async function fetchdata() {\n\n  //       if(msgNotification.title === 'Message'){\n  //         console.log('check3');\n  //         const res1 = await firebaseConfig.database().ref('UserUnreadCount/').child(authuser.uid).on(\"child_added\", resp => {\n  //           if (resp.exists()) {\n  //             const usrUnreadCount = resp.val();\n  //             if (usrUnreadCount !== undefined) {\n  //               dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n  //             }\n  //           }\n  //       })\n  //     }\n      \n  //     }\n  //     fetchdata();\n     \n  // }, [msgNotification])\n\n  // useEffect(() => {\n    \n  // }, [userDetailsById])\n\n  onMessageListener()\n    .then(async(payload) => {\n      console.log('notificationpayload',payload);\n      const path = window.location.pathname;\n     console.log('path',path);\n   \n     \n    if( path !== '/inbox' && payload?.notification.title !== 'Message')\n    {\n      console.log('check1');\n      setNotification({title: payload?.notification?.title, body: payload?.notification?.body}); \n    }\n    else{\n      if(path !== '/inbox' && payload?.notification.title === 'Message'){\n        console.log('check2');\n        setMsgNotification({title: payload?.notification?.title, body: payload?.notification?.body}); \n       // setNotification({title: payload?.notification?.title, body: payload?.notification?.body});  \n      }\n    }\n\n    })\n    .catch((err) => console.log('failed: ', err));\n\n  return (\n    <Toaster/>\n  )\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n      userDetailsById: state.authReducer.userDetailsById,\n      authuser: state.authReducer.authuser,\n  }\n}\n\nconst actionCreators = { getUserProfileById, fetchUser };\nexport default connect(mapStateToProps, actionCreators)(Notification);\n\n\n\n","/home/asus/dapify/src/Redux/actions/auth-actions.js",["425","426","427","428","429","430","431","432","433","434"],"import {\n  POST_REGISTER_REQUEST, GET_REGISTER_SUCCESS, GET_REGISTER_FAILURE,\n  POST_LOGIN_REQUEST, GET_LOGIN_SUCCESS, GET_LOGIN_FAILURE,\n  POST_LOG_OUT_REQUEST, GET_LOG_OUT_SUCCESS, GET_LOG_OUT_FAILURE,\n  POST_USER_AUTH_REQUEST, GET_USER_AUTH_SUCCESS, GET_USER_AUTH_FAILURE,\n  POST_USER_PROFILE_BY_ID_REQUEST, GET_USER_PROFILE_BY_ID_SUCCESS, GET_USER_PROFILE_BY_ID_FAILURE,\n  POST_OTHER_USER_PROFILE_BY_ID_REQUEST, GET_OTHER_USER_PROFILE_BY_ID_SUCCESS, GET_OTHER_USER_PROFILE_BY_ID_FAILURE,\n  POST_FORGET_PASSWORD_REQUEST, GET_FORGET_PASSWORD_SUCCESS, GET_FORGET_PASSWORD_FAILURE,\n  POST_UPDATE_PROFILE_IMAGE_REQUEST, GET_UPDATE_PROFILE_IMAGE_SUCCESS, GET_UPDATE_PROFILE_IMAGE_FAILURE,\n  POST_UPDATE_PROFILE_REQUEST, GET_UPDATE_PROFILE_SUCCESS, GET_UPDATE_PROFILE_FAILURE,\n  POST_CHANGE_PASSWORD_REQUEST, GET_CHANGE_PASSWORD_SUCCESS, GET_CHANGE_PASSWORD_FAILURE,\n  POST_USER_SUBSCRIPTION_REQUEST, GET_USER_SUBSCRIPTION_SUCCESS, GET_USER_SUBSCRIPTION_FAILURE,\n  POST_DISABLE_USER_REQUEST, GET_DISABLE_USER_SUCCESS, GET_DISABLE_USER_FAILURE,\n  //POST_UPDATE_LINK_THUMBNAIL_IMAGE_REQUEST, GET_UPDATE_LINK_THUMBNAIL_IMAGE_SUCCESS, GET_UPDATE_LINK_THUMBNAIL_IMAGE_FAILURE,\n\n} from './type';\nimport {\n  DISABLE_USER, LongLiveAccessToken, InstagramBusinessAccount\n\n} from './api_url';\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\";\n//import { toast } from \"react-toastify\";\nimport { googleProvider, facebookProvider, auth } from \"../auth-service\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport { Redirect } from 'react-router-dom';\n\n// For firebase registration \nexport const register = (data, history) => async (dispatch) => {\n  try {\n\n    // const token = firebaseConfig.messaging();\n    dispatch({ type: POST_REGISTER_REQUEST, payload: true });\n    // For username unique check \n    //  const uniquecheck = await isUsernameUnique('username', data.username, 'users');\n\n    // if (uniquecheck) {\n\n    // For firebase authentication (signup) \n    const response = await auth.createUserWithEmailAndPassword(data.email, data.password);\n    if (response.user) {\n\n      // response.user.sendEmailVerification().then(() => {\n      dispatch({ type: GET_REGISTER_SUCCESS, payload: response.user.toJSON() });\n      const user_data = response.user.toJSON()\n\n      // For user other details (firebase collection) \n      firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n        createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n        uid: user_data.uid,\n        username: data.username,\n        dob: data.dob,\n        // user_type: data.user_type,\n        email: data.email,\n        privacy_policy: data.privacy_policy,\n        terms_condition: data.terms_condition,\n        avatarURL: '',\n        slug_name: data.username.toLowerCase(),\n        provider_type: 'normal',\n        user_active: true,\n\n      }).then(() => {\n        // For user profile image (firebase storage) \n\n        imageUpload(data.user_image, user_data.uid, 'avatars/', 'users', 'avatarURL');\n        // firebaseConfig.firestore().collection('users').doc(response.user.uid).collection('device_tokens').doc(response.user+'_1').set({\n\n        //   name: 'test',\n\n        // })\n\n        Success(\"Registration successful. Check your emails for a confirmation email\");\n        history.push(\"/\");\n\n      }).catch(function (error) {\n        dispatch({ type: GET_REGISTER_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n\n      // }).catch(function (error) {\n      //   dispatch({ type: GET_REGISTER_FAILURE, payload: error });\n      //   ERROR(error.message);\n      // })\n    } else {\n      dispatch({ type: GET_REGISTER_FAILURE, payload: false });\n      ERROR(\"Registration failed\");\n    }\n    // } else {\n    //   console.log('not unique');\n    //   dispatch({ type: GET_REGISTER_FAILURE, payload: false });\n    //   ERROR(\"User name is already taken\");\n    // }\n  } catch (error) {\n    dispatch({ type: GET_REGISTER_FAILURE, payload: error.message });\n    ERROR(error.message);\n    //throw error;\n  }\n};\n\nasync function UserToken(uid, type) {\n\n\n  const tokenres = firebaseConfig.messaging();\n  console.log('tokenres', tokenres)\n  await tokenres.getToken({ vapidKey: 'BMojzVLMq7lcRZRFLrhhDu03Pz1nvxuA8g5BtOoKwssL2Rt2LcjSoBTPeflpQceuQYc7AQGIup_FksjMe_ei-Q4' }).then(function (refreshedToken) {\n\n    if (refreshedToken) {\n      if (type === 'login') {\n\n        const rescheck =  firebaseConfig.firestore().collection('users/').where('Notification_tokens', 'array-contains',refreshedToken).get().then((snapshot) => {\n\n          snapshot.forEach(async (totalDoc) => {\n            console.log('totalDoc',totalDoc.data());\n            if(totalDoc.data().uid !== uid){\n              const upnotifydata = {\n                Notification_tokens: [],\n              }\n              firebaseConfig.firestore().collection('users/').doc(totalDoc.data().uid).update(upnotifydata).then(function (docres) {\n\n              }).catch(function (error) {\n                // ERROR(error.message);\n                console.log('token error', error);\n\n              });\n            }\n            // console.log('westCoastCities',totalDoc.data());\n          })\n        })\n\n\n        console.log('tokennnnnn');\n        const notifydata = {\n          Notification_tokens: [refreshedToken],\n        }\n        firebaseConfig.firestore().collection('users/').doc(uid).update(notifydata).then(function (docres) {\n\n        }).catch(function (error) {\n          // ERROR(error.message);\n\n        });\n        // firebaseConfig.firestore().collection('users/').doc(uid).update({\n        //   Notification_tokens: firebaseConfig.firestore.FieldValue.arrayUnion(refreshedToken),\n        // }).then(function (docres) {\n        //   console.log('tokkkkeeennn', refreshedToken);\n        // }).catch(function (error) {\n        //  // ERROR(error.message);\n\n        // });\n      }\n\n      if (type === 'logout') {\n        const upnotifydata = {\n          Notification_tokens: [],\n        }\n        firebaseConfig.firestore().collection('users/').doc(uid).update(upnotifydata).then(function (docres) {\n          console.log('tokkkkeeennn', refreshedToken);\n        }).catch(function (error) {\n          // ERROR(error.message);\n          console.log('token error', error);\n\n        });\n      }\n      // if (type === 'logout') {\n      //   firebaseConfig.firestore().collection('users/').doc(uid).update({\n      //     Notification_tokens: firebaseConfig.firestore.FieldValue.arrayRemove(refreshedToken),\n      //   }).then(function (docres) {\n      //     console.log('tokkkkeeennn', refreshedToken);\n      //   }).catch(function (error) {\n      //     // ERROR(error.message);\n\n      //   });\n      // }\n    }\n  }).catch(function (error) {\n    // ERROR(error.message);\n\n  });\n\n}\n\nasync function getInsightToken(uid, token) {\n  console.log('instatoken',token);\n  const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n  res.get().then(async(doc) => {\n\n    if (!doc.exists) {\n      console.log('nodata');\n    }\n    else {\n      const udata = doc.data();\n      if (udata.InsightsTokenData) {\n        var newDate = new Date();\n        var newDateCheck = moment(newDate).format('MM/DD/YYYY HH:mm:ss');\n        console.log('instadate', udata.InsightsTokenData.date);\n        console.log('newDateCheck', newDateCheck);\n        if (udata.InsightsTokenData.date > newDateCheck) {\n          console.log('true');\n          return true;\n        } else {\n          const data = {\n            token: token\n          }\n\n          console.log('tokennnndata', data);\n          const response = await axios.post(LongLiveAccessToken, data);\n          console.log('insresponse', response);\n          if (response.status === 200) {\n            if (response.data?.access_token) {\n              const expiredate = new Date();\n              expiredate.setDate(expiredate.getDate() + 59);\n              var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n              const accData = {\n                token: response.data.access_token,\n              }\n              console.log('accData', accData);\n              const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n              console.log('Accountresponse', Accountresponse);\n              if (Accountresponse.status === 200) {\n                console.log('checkoutaccountresss1', Accountresponse.data.data);\n                if (Accountresponse.data.data.length !== 0) {\n                  if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                    const Tokendata =\n                    {\n                      'InsightsTokenData': {\n                        'token': response.data.access_token,\n                        'date': newexpiredate,\n                      },\n\n                      'InsightsUserData': {\n                        'username': Accountresponse.data.data[0].instagram_business_account.username,\n                        'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                        'name': Accountresponse.data.data[0].name,\n                        'id': Accountresponse.data.data[0].id,\n                      }\n                    }\n\n                    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {\n\n                    }).catch(function (error) {\n\n                    })\n                    console.log('ressssss', response);\n                  } else {\n                    ERROR(\"Instagram business account not connected.\");\n                  }\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {\n\n              }\n            }\n          }\n        }\n      } else {\n        const data = {\n          token: token\n        }\n        console.log('tokennnndata22', data);\n        const response = await axios.post(LongLiveAccessToken, data);\n        console.log('insresponse', response);\n        if (response.status === 200) {\n          if (response.data?.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate1 = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n            const accData = {\n              token: response.data.access_token,\n            }\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n            if (Accountresponse.status === 200) {\n              console.log('checkoutaccountresss1', Accountresponse.data.data);\n              if (Accountresponse.data.data.length !== 0) {\n                if (Accountresponse.data.data[0].instagram_business_account !== undefined) {\n                  const Tokendata =\n                  {\n                    'InsightsTokenData': {\n                      'token': response.data.access_token,\n                      'date': newexpiredate1,\n                    },\n\n                    'InsightsUserData': {\n                      'username': Accountresponse.data.data[0].instagram_business_account.username,\n                      'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                      'name': Accountresponse.data.data[0].name,\n                      'id': Accountresponse.data.data[0].id,\n                    }\n                  }\n\n                  const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(function (docres) {\n\n                  }).catch(function (error) {\n\n                  })\n                  console.log('ressssss', response);\n                } else {\n                  ERROR(\"Instagram business account not connected.\");\n                }\n              } else {\n                ERROR(\"Instagram business account not connected.\");\n              }\n            } else {\n\n            }\n          }\n        }\n      }\n    }\n  })\n}\n\n// For firebase login \nexport const login = (email, password, history, profile_url) => async (dispatch) => {\n\n  console.log('login history', history);\n\n  try {\n    dispatch({ type: POST_LOGIN_REQUEST, payload: true });\n\n    const response = await auth.signInWithEmailAndPassword(email, password)\n\n    if (response.user) {\n      console.log('rs-ty----------------', response.user);\n      if (response.user.emailVerified === true) {\n\n        await UserToken(response.user.uid, 'login');\n        if (profile_url !== '') {\n          dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n          window.location = window.location.origin + profile_url;\n\n        } else {\n          dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", response.user.uid);\n          history.push(\"/addContent\");\n\n        }\n      } else {\n\n        dispatch({ type: GET_LOGIN_FAILURE, payload: \"Please verify your email, Check your emails for a confirmation email\" });\n        ERROR(\"Please verify your email, Check your emails for a confirmation email\");\n        // response.user.sendEmailVerification()\n        // .then(function(response) {\n        //   dispatch({ type: GET_LOGIN_FAILURE, payload: \"Please verify your email, Check your emails for a confirmation email\" });\n        //   ERROR(\"Please verify your email, Check your emails for a confirmation email\");\n        // })\n        // .catch(function (error) {\n        //   ERROR(error.message);\n        // });\n\n      }\n\n    } else {\n      dispatch({ type: GET_LOGIN_FAILURE, payload: false });\n      ERROR(\"Invalid email and password\");\n    }\n\n  } catch (error) {\n\n    dispatch({ type: GET_LOGIN_FAILURE, payload: error.message });\n    ERROR(\"Invalid email and password\");\n    console.log('login errorrrr', error.message);\n    //throw error;\n  }\n};\n// Social login.\nexport const socialLogin = (data, history, profile_url) => async dispatch => {\n\n  try {\n    var provider_type = '';\n    var uname = '';\n    if (data === 'google') {\n      provider_type = googleProvider;\n    }\n    else if (data === 'facebook') {\n      provider_type = facebookProvider;\n    }\n    dispatch({ type: POST_LOGIN_REQUEST, payload: true });\n\n    const response = await auth.signInWithPopup(provider_type)\n\n    console.log('rs-ty----------------', response.user);\n    console.log('fbresp', response);\n    if (response.user) {\n\n      console.log('social login response', response);\n      console.log('accesstokennnn', response.credential.accessToken)\n      const user_data = response.user.toJSON()\n      console.log('myuserrr', user_data);\n      if (user_data.displayName !== '') {\n        uname = user_data.displayName\n      }\n\n      await UserToken(response.user.uid, 'login');\n\n      dispatch({ type: GET_LOGIN_SUCCESS, payload: response.user.toJSON() });\n      const userexist = firebaseConfig.firestore().collection('users').doc(user_data.uid)\n      userexist.get().then(async (doc) => {\n        if (!doc.exists) {\n\n          // For user other details (firebase collection) \n          firebaseConfig.firestore().collection('users').doc(user_data.uid).set({\n            createdAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n            uid: user_data.uid,\n            // email: user_data.providerData[0].email,\n            email: user_data.email,\n            provider_type: data,\n            username: uname,\n            slug_name: uname.toLowerCase(),\n            avatarURL: '',\n            user_active: true,\n\n          }).then(async function () {\n            if (data === \"facebook\") {\n\n              if (response?.credential.accessToken) {\n\n                await getInsightToken(response.user.uid, response.credential.accessToken);\n              }\n            }\n          }).catch(function (error) {\n\n          })\n        } else {\n          if (data === \"facebook\") {\n\n            if (response?.credential.accessToken) {\n\n              await getInsightToken(response.user.uid, response.credential.accessToken);\n            }\n          }\n        }\n      })\n\n      if (profile_url !== '') {\n        window.location = window.location.origin + profile_url;\n      } else {\n        console.log('checkkkkkkk', history);\n        history.push(\"/addContent\");\n      }\n    } else {\n      dispatch({ type: GET_LOGIN_FAILURE, payload: false });\n      ERROR(\"Invalid email and password\");\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_LOGIN_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n// For firebase logout \nexport const logout = (history) => async (dispatch) => {\n  try {\n    dispatch({ type: POST_LOG_OUT_REQUEST, payload: true });\n    await UserToken(auth.currentUser.uid, 'logout');\n    await auth.signOut()\n    dispatch({ type: GET_LOG_OUT_SUCCESS, payload: true });\n    history.push('/');\n  } catch (error) {\n    dispatch({ type: GET_LOG_OUT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n// For checking user login \nexport const fetchUser = () => async (dispatch) => {\n\n  console.log('fetch user----');\n  try {\n\n    dispatch({ type: POST_USER_AUTH_REQUEST, payload: true });\n    await auth.onAuthStateChanged((currentUser) => {\n      console.log('checkkkkkcurrent', currentUser);\n      if (currentUser) {\n        console.log('-----igi', currentUser.providerData[0].emailVerified);\n        if (currentUser.emailVerified === true) {\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"user_id\", currentUser.uid);\n          dispatch({\n            type: GET_USER_AUTH_SUCCESS,\n            payload: currentUser.toJSON(),\n          });\n        } else {\n          if (currentUser.providerData[0].providerId === 'facebook.com') {\n            localStorage.setItem(\"isAuthenticated\", true);\n            localStorage.setItem(\"user_id\", currentUser.uid);\n            dispatch({\n              type: GET_USER_AUTH_SUCCESS,\n              payload: currentUser.toJSON(),\n            });\n          } else {\n            currentUser.sendEmailVerification();\n            localStorage.removeItem(\"isAuthenticated\");\n            localStorage.removeItem(\"user_id\");\n            dispatch({\n              type: GET_USER_AUTH_FAILURE,\n              currentUser: null,\n            });\n          }\n        }\n      } else {\n        localStorage.removeItem(\"isAuthenticated\");\n        localStorage.removeItem(\"user_id\");\n        dispatch({\n          type: GET_USER_AUTH_FAILURE,\n          currentUser: null,\n        });\n      }\n    });\n  } catch (error) {\n    dispatch({ type: GET_USER_AUTH_FAILURE, payload: error.message });\n    //throw error;\n  }\n};\n\n// For get user collection data \nexport const getUserProfileById = (userid) => async dispatch => {\n  try {\n\n    console.log('userid', userid);\n    dispatch({ type: POST_USER_PROFILE_BY_ID_REQUEST, payload: true });\n    //await auth.onAuthStateChanged((currentUser) => {\n    if (userid) {\n\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then((doc) => {\n\n        if (!doc.exists) {\n\n          dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: false });\n        }\n        else {\n          dispatch({ type: GET_USER_PROFILE_BY_ID_SUCCESS, payload: doc.data() });\n\n        }\n      });\n    } else {\n\n      dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: false });\n\n    }\n    //  })\n  } catch (error) {\n\n    dispatch({ type: GET_USER_PROFILE_BY_ID_FAILURE, payload: error });\n  }\n};\n\n// For unique check\nasync function isUsernameUnique(field_name, value, collection_name) {\n  try {\n    const nameDoc = await firebaseConfig.firestore().collection(collection_name).where(field_name, \"==\", value).get()\n      .then(snapshot => {\n        if (snapshot.empty) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n    return nameDoc;\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n//For forgot password\nexport const forgotPassword = (email, history) => (dispatch) => {\n  try {\n    dispatch({ type: POST_FORGET_PASSWORD_REQUEST, payload: true });\n    const response = auth.sendPasswordResetEmail(email)\n      .then(function () {\n        dispatch({ type: GET_FORGET_PASSWORD_SUCCESS, payload: response.data });\n        Success(\"Email sent\");\n        history.push('/');\n      }).catch(function (error) {\n        dispatch({ type: GET_FORGET_PASSWORD_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n  } catch (error) {\n    dispatch({ type: GET_FORGET_PASSWORD_FAILURE, payload: error });\n    ERROR(error.message);\n    //throw error;\n  }\n};\n\n// Update profile image.\nexport const updateUserProfileOrCoverImage = (data, history) => async dispatch => {\n  try {\n    console.log('all history', history);\n    dispatch({ type: POST_UPDATE_PROFILE_IMAGE_REQUEST, payload: true });\n    const uid = localStorage.getItem(\"user_id\");\n    if (uid) {\n\n      if (data.type === \"user image\") {\n\n        const response = imageUpload(data.image, uid, 'avatars/', 'users', 'avatarURL')\n          .then(function () {\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_SUCCESS, payload: data });\n            Success(\"Profile image successfully updated\");\n            // history.push('/settings');\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error.message });\n          })\n      }\n      else {\n        const response = imageUpload(data.image, uid, 'covers/', 'users', 'coverURL')\n          .then(function () {\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_SUCCESS, payload: data });\n            Success(\"Cover image successfully updated\");\n            // history.push('/settings');\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error.message });\n          })\n      }\n    }\n  } catch (error) {\n    dispatch({ type: GET_UPDATE_PROFILE_IMAGE_FAILURE, payload: error });\n  }\n};\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname) {\n  try {\n\n    // For user profile image (firebase storage) \n    if (image !== null) {\n\n      // const img_ext = image.type.split('/').pop();\n      // const imagename = id + '.'+img_ext;\n      const imagename = id + '.png';\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n\n        data.ref.getDownloadURL().then(url => {\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url,\n          })\n\n        })\n        return true;\n      })\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n//update user info\nexport const updateUserProfile = (data) => async dispatch => {\n  try {\n    console.log('infodata', data);\n    var postdata = {};\n    const uid = localStorage.getItem(\"user_id\");\n\n    dispatch({ type: POST_UPDATE_PROFILE_REQUEST, payload: true });\n    if (data.update_type === \"info\") {\n\n\n      postdata =\n      {\n        username: data.username,\n        dob: data.dob,\n        //user_type: data.user_type,\n        slug_name: data.username.toLowerCase(),\n      }\n\n    }\n    else if (data.update_type === \"bio\") {\n      var bioval = data.bio.replace(/\\n/g, \"\\\\n\");\n      postdata =\n      {\n        bio: bioval,\n      }\n    } else if (data.update_type === \"social_links\") {\n      postdata =\n      {\n        'social_links': {\n          'facebook': data.facebook,\n          'instagram': data.instagram,\n          'tiktok': data.tiktok,\n          'twitter': data.twitter,\n          'youtube': data.youtube,\n        }\n      }\n    } else if (data.update_type === \"links\") {\n\n      const listen_link = data.listen_links;\n      if (listen_link !== '') {\n        postdata =\n        {\n          'listen_now_link': listen_link,\n          'links': data.links\n        }\n      } else {\n        postdata =\n        {\n          'links': data.links\n        }\n      }\n    }\n\n    const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(postdata).then(function (docres) {\n      dispatch({ type: GET_UPDATE_PROFILE_SUCCESS, payload: true });\n      Success('Updated Successfully');\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({ type: GET_UPDATE_PROFILE_FAILURE, payload: error });\n    })\n  } catch (error) {\n    dispatch({ type: GET_UPDATE_PROFILE_FAILURE, payload: error });\n  }\n};\n\n//Change Password\n\n//  export const changePassword = (data) => async dispatch => {\n//   try {\n//     var users = auth.currentUser;\n\n//     dispatch({ type: POST_CHANGE_PASSWORD_REQUEST, payload: true });\n//     await users.updatePassword(data.new_password).then(function() {\n//         Success('Successfully changed password');\n//         dispatch({ type: GET_CHANGE_PASSWORD_SUCCESS, payload: true });\n//      }).catch(function(error) {\n//         ERROR(error.message);\n//         console.log('qqqfb change pass',error);\n//         dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//      });\n\n//   } catch (error) {\n//     ERROR(error.message);\n\n//     console.log('fb change pass',error);\n//     dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n//   }\n// };\nexport const changePassword = (data) => async dispatch => {\n  try {\n    var users = auth.currentUser;\n\n    dispatch({ type: POST_CHANGE_PASSWORD_REQUEST, payload: true });\n    await auth.signInWithEmailAndPassword(users.email, data.password)\n      .then(function (user) {\n\n        users.updatePassword(data.new_password).then(function () {\n          Success('Successfully changed password');\n          dispatch({ type: GET_CHANGE_PASSWORD_SUCCESS, payload: true });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('error----error', error);\n        dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n      });\n\n  } catch (error) {\n    ERROR(error.message);\n    console.log('error----error11', error);\n    dispatch({ type: GET_CHANGE_PASSWORD_FAILURE, payload: error });\n  }\n};\n\n// user subscription\n\nexport const userSubscription = (data) => async dispatch => {\n  try {\n\n    var users = auth.currentUser;\n    dispatch({ type: POST_USER_SUBSCRIPTION_REQUEST, payload: true });\n\n    const resp = await firebaseConfig.firestore().collection('users').doc(users.uid).update({ 'subscription': data })\n      .then(function (docres) {\n        Success(\"Successfully Updated\");\n        dispatch({ type: GET_USER_SUBSCRIPTION_SUCCESS, payload: true });\n      }).catch(function (error) {\n        ERROR(error.message);\n        dispatch({ type: GET_USER_SUBSCRIPTION_FAILURE, payload: error });\n      });\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_USER_SUBSCRIPTION_FAILURE, payload: error });\n  }\n};\n\n//disable User (cancel account)\nexport const DisableUser = (data, history) => async dispatch => {\n  try {\n    if (data) {\n      dispatch({ type: POST_DISABLE_USER_REQUEST, payload: true });\n      const response = await axios.get(DISABLE_USER + '/' + data.uid, {}, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      console.log('ressssss', response);\n      if (response.status === 200) {\n        const updatedata = {\n          user_active: false,\n        };\n        await firebaseConfig.firestore().collection('users').doc(data.uid).update(updatedata)\n          .then(function (docres) {\n\n            dispatch(logout(history));\n            dispatch({ type: GET_DISABLE_USER_SUCCESS, payload: response.data });\n            console.log('ressssss', response.data);\n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_DISABLE_USER_FAILURE, payload: error });\n          });\n\n      } else {\n        dispatch({ type: GET_DISABLE_USER_FAILURE, payload: false });\n        console.log('false', false);\n      }\n\n    } else {\n      dispatch({ type: GET_DISABLE_USER_FAILURE, payload: false });\n      console.log('false', false);\n    }\n  } catch (error) {\n    dispatch({ type: GET_DISABLE_USER_FAILURE, payload: error });\n    console.log('error------', error.message);\n  }\n};\n\n\nexport const getOtherUserProfileById = (userid) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_OTHER_USER_PROFILE_BY_ID_REQUEST, payload: true });\n    //await auth.onAuthStateChanged((currentUser) => {\n    if (userid) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(userid);\n      res.get().then((doc) => {\n\n        if (!doc.exists) {\n\n          dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n        }\n        else {\n\n          dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_SUCCESS, payload: doc.data() });\n\n        }\n      });\n    } else {\n      dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n    }\n    //  })\n  } catch (error) {\n    dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: error });\n  }\n};\n\n","/home/asus/dapify/src/templates/view/stripeReturn.js",[],"/home/asus/dapify/src/templates/view/stripeReauth.js",[],"/home/asus/dapify/src/templates/view/PrivacyPolicy.js",["435","436","437","438"],"import React from 'react'\nimport {useHistory} from \"react-router-dom\";\nimport left_arrow_img from '../../assets/images/Arrow-Left.svg';\n\nfunction PrivacyPolicy(props,{ history }) {\n\n  const history_back = useHistory();\n  const handleBack = (event) => {\n\n    if (props.location?.prevPath) {\n      const path = props.location.prevPath.substring(0, props.location.prevPath.lastIndexOf(\"/\") + 1);\n\n      if (path === '/userProfile/') {\n        window.location = window.location.origin + props.location.prevPath;\n      }\n      else {\n        history_back.goBack();\n      }\n    } else {\n      history_back.goBack();\n    }\n  };\n\n  return (\n\n    <div className=\"privacyPolicy-content\">\n      <div className=\"back-arrow\">\n        <span className=\"btn\" onClick={handleBack}><img src={left_arrow_img} alt='' />Back</span>\n      </div>\n      <div className=\"container\">\n        <div className=\"translations-content-item\">\n          <h1>Privacy Policy</h1>\n          <p>Last updated: January 28, 2021</p>\n          <p>This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.</p>\n          <p>We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy.</p>\n          <h1>Interpretation and Definitions</h1>\n          <h2>Interpretation</h2>\n          <p>The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.</p>\n          <h2>Definitions</h2>\n          <p>For the purposes of this Privacy Policy:</p>\n          <ul>\n            <li>\n              <p><strong>Account</strong> means a unique account created for You to access our Service or parts of our Service.</p>\n            </li>\n            <li>\n              <p><strong>Affiliate</strong> means an entity that controls, is controlled by or is under common control with a party, where \"control\" means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.</p>\n            </li>\n            <li>\n              <p><strong>Application</strong> means the software program provided by the Company downloaded by You on any electronic device, named Dapify</p>\n            </li>\n            <li>\n              <p><strong>Business</strong>, for the purpose of the CCPA (California Consumer Privacy Act), refers to the Company as the legal entity that collects Consumers' personal information and determines the purposes and means of the processing of Consumers' personal information, or on behalf of which such information is collected and that alone, or jointly with others, determines the purposes and means of the processing of consumers' personal information, that does business in the State of California.</p>\n            </li>\n            <li>\n              <p><strong>Company</strong> (referred to as either \"the Company\", \"We\", \"Us\" or \"Our\" in this Agreement) refers to Osiris Complex, LLC, P.o. box 43134 Montclair, NJ 07043.</p>\n            </li>\n            <li>\n              <p><strong>Consumer</strong>, for the purpose of the CCPA (California Consumer Privacy Act), means a natural person who is a California resident. A resident, as defined in the law, includes (1) every individual who is in the USA for other than a temporary or transitory purpose, and (2) every individual who is domiciled in the USA who is outside the USA for a temporary or transitory purpose.</p>\n            </li>\n            <li>\n              <p><strong>Country</strong> refers to: New Jersey, United States</p>\n            </li>\n            <li>\n              <p><strong>Device</strong> means any device that can access the Service such as a computer, a cellphone or a digital tablet.</p>\n            </li>\n            <li>\n              <p><strong>Personal Data</strong> is any information that relates to an identified or identifiable individual.</p>\n              <p>For the purposes of the CCPA, Personal Data means any information that identifies, relates to, describes or is capable of being associated with, or could reasonably be linked, directly or indirectly, with You.</p>\n            </li>\n            <li>\n              <p><strong>Sale</strong>, for the purpose of the CCPA (California Consumer Privacy Act), means selling, renting, releasing, disclosing, disseminating, making available, transferring, or otherwise communicating orally, in writing, or by electronic or other means, a Consumer's personal information to another business or a third party for monetary or other valuable consideration.</p>\n            </li>\n            <li>\n              <p><strong>Service</strong> refers to the Application.</p>\n            </li>\n            <li>\n              <p><strong>Service Provider</strong> means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.</p>\n            </li>\n            <li>\n              <p><strong>Third-party Social Media Service</strong> refers to any website or any social network website through which a User can log in or create an account to use the Service.</p>\n            </li>\n            <li>\n              <p><strong>Usage Data</strong> refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).</p>\n            </li>\n            <li>\n              <p><strong>You</strong> means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.</p>\n            </li>\n          </ul>\n          <h1>Collecting and Using Your Personal Data</h1>\n          <h2>Types of Data Collected</h2>\n          <h3>Personal Data</h3>\n          <p>While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:</p>\n          <ul>\n            <li>\n              <p>Email address</p>\n            </li>\n            <li>\n              <p>First name and last name</p>\n            </li>\n            <li>\n              <p>Usage Data</p>\n            </li>\n          </ul>\n          <h3>Usage Data</h3>\n          <p>Usage Data is collected automatically when using the Service.</p>\n          <p>Usage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.</p>\n          <p>When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.</p>\n          <p>We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.</p>\n          <h3>Information Collected while Using the Application</h3>\n          <p>While using Our Application, in order to provide features of Our Application, We may collect, with Your prior permission:</p>\n          <ul>\n            <li>Pictures and other information from your Device's camera and photo library</li>\n          </ul>\n          <p>We use this information to provide features of Our Service, to improve and customize Our Service. The information may be uploaded to the Company's servers and/or a Service Provider's server or it may be simply stored on Your device.</p>\n          <p>You can enable or disable access to this information at any time, through Your Device settings.</p>\n          <h2>Use of Your Personal Data</h2>\n          <p>The Company may use Personal Data for the following purposes:</p>\n          <ul>\n            <li>\n              <p><strong>To provide and maintain our Service</strong>, including to monitor the usage of our Service.</p>\n            </li>\n            <li>\n              <p><strong>To manage Your Account:</strong> to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.</p>\n            </li>\n            <li>\n              <p><strong>For the performance of a contract:</strong> the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.</p>\n            </li>\n            <li>\n              <p><strong>To contact You:</strong> To contact You by email, telephone calls, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.</p>\n            </li>\n            <li>\n              <p><strong>To provide You</strong> with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.</p>\n            </li>\n            <li>\n              <p><strong>To manage Your requests:</strong> To attend and manage Your requests to Us.</p>\n            </li>\n            <li>\n              <p><strong>For business transfers:</strong> We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.</p>\n            </li>\n            <li>\n              <p><strong>For other purposes</strong>: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.</p>\n            </li>\n          </ul>\n          <p>We may share Your personal information in the following situations:</p>\n          <ul>\n            <li><strong>With Service Providers:</strong> We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to show advertisements to You to help support and maintain Our Service, for payment processing, to contact You.</li>\n            <li><strong>For business transfers:</strong> We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.</li>\n            <li><strong>With Affiliates:</strong> We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.</li>\n            <li><strong>With business partners:</strong> We may share Your information with Our business partners to offer You certain products, services or promotions.</li>\n            <li><strong>With other users:</strong> when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside. If You interact with other users or register through a Third-Party Social Media Service, Your contacts on the Third-Party Social Media Service may see Your name, profile, pictures and description of Your activity. Similarly, other users will be able to view descriptions of Your activity, communicate with You and view Your profile.</li>\n            <li><strong>With Your consent</strong>: We may disclose Your personal information for any other purpose with Your consent.</li>\n          </ul>\n          <h2>Retention of Your Personal Data</h2>\n          <p>The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.</p>\n          <p>The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.</p>\n          <h2>Transfer of Your Personal Data</h2>\n          <p>Your information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.</p>\n          <p>Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.</p>\n          <p>The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.</p>\n          <h2>Disclosure of Your Personal Data</h2>\n          <h3>Business Transactions</h3>\n          <p>If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.</p>\n          <h3>Law enforcement</h3>\n          <p>Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).</p>\n          <h3>Other legal requirements</h3>\n          <p>The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:</p>\n          <ul>\n            <li>Comply with a legal obligation</li>\n            <li>Protect and defend the rights or property of the Company</li>\n            <li>Prevent or investigate possible wrongdoing in connection with the Service</li>\n            <li>Protect the personal safety of Users of the Service or the public</li>\n            <li>Protect against legal liability</li>\n          </ul>\n          <h2>Security of Your Personal Data</h2>\n          <p>The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.</p>\n          <h1>Detailed Information on the Processing of Your Personal Data</h1>\n          <p>The Service Providers We use may have access to Your Personal Data. These third-party vendors collect, store, use, process and transfer information about Your activity on Our Service in accordance with their Privacy Policies.</p>\n          <h2>Advertising</h2>\n          <p>We may use Service Providers to show advertisements to You to help support and maintain Our Service.</p>\n          <ul>\n            <li>\n              <p><strong>Google AdSense &amp; DoubleClick Cookie</strong></p>\n              <p>Google, as a third party vendor, uses cookies to serve ads on our Service. Google's use of the DoubleClick cookie enables it and its partners to serve ads to our users based on their visit to our Service or other websites on the Internet.</p>\n              <p>You may opt out of the use of the DoubleClick Cookie for interest-based advertising by visiting the Google Ads Settings web page: <a href=\"http://www.google.com/ads/preferences/\" rel=\"external nofollow noopener\" target=\"_blank\">http://www.google.com/ads/preferences/</a></p>\n            </li>\n          </ul>\n          <h2>Email Marketing</h2>\n          <p>We may use Your Personal Data to contact You with newsletters, marketing or promotional materials and other information that may be of interest to You. You may opt-out of receiving any, or all, of these communications from Us by following the unsubscribe link or instructions provided in any email We send or by contacting Us.</p>\n          <p>We may use Email Marketing Service Providers to manage and send emails to You.</p>\n          <ul>\n            <li>\n              <p><strong>Mailchimp</strong></p>\n              <p>Mailchimp is an email marketing sending service provided by The Rocket Science Group LLC.</p>\n              <p>For more information on the privacy practices of Mailchimp, please visit their Privacy policy: <a href=\"https://mailchimp.com/legal/privacy/\" rel=\"external nofollow noopener\" target=\"_blank\">https://mailchimp.com/legal/privacy/</a></p>\n            </li>\n          </ul>\n          <h2>Payments</h2>\n          <p>We may provide paid products and/or services within the Service. In that case, we may use third-party services for payment processing (e.g. payment processors).</p>\n          <p>We will not store or collect Your payment card details. That information is provided directly to Our third-party payment processors whose use of Your personal information is governed by their Privacy Policy. These payment processors adhere to the standards set by PCI-DSS as managed by the PCI Security Standards Council, which is a joint effort of brands like Visa, Mastercard, American Express and Discover. PCI-DSS requirements help ensure the secure handling of payment information.</p>\n          <ul>\n            <li>\n              <p><strong>Apple Store In-App Payments</strong></p>\n              <p>Their Privacy Policy can be viewed at <a href=\"https://www.apple.com/legal/privacy/en-ww/\" rel=\"external nofollow noopener\" target=\"_blank\">https://www.apple.com/legal/privacy/en-ww/</a></p>\n            </li>\n            <li>\n              <p><strong>Stripe</strong></p>\n              <p>Their Privacy Policy can be viewed at <a href=\"https://stripe.com/us/privacy\" rel=\"external nofollow noopener\" target=\"_blank\">https://stripe.com/us/privacy</a></p>\n            </li>\n          </ul>\n          <h1>CCPA Privacy</h1>\n          <p>This privacy notice section for California residents supplements the information contained in Our Privacy Policy and it applies solely to all visitors, users, and others who reside in the State of California.</p>\n          <h2>Categories of Personal Information Collected</h2>\n          <p>We collect information that identifies, relates to, describes, references, is capable of being associated with, or could reasonably be linked, directly or indirectly, with a particular Consumer or Device. The following is a list of categories of personal information which we may collect or may have been collected from California residents within the last twelve (12) months.</p>\n          <p>Please note that the categories and examples provided in the list below are those defined in the CCPA. This does not mean that all examples of that category of personal information were in fact collected by Us, but reflects our good faith belief to the best of our knowledge that some of that information from the applicable category may be and may have been collected. For example, certain categories of personal information would only be collected if You provided such personal information directly to Us.</p>\n          <ul>\n            <li>\n              <p><strong>Category A: Identifiers.</strong></p>\n              <p>Examples: A real name, alias, postal address, unique personal identifier, online identifier, Internet Protocol address, email address, account name, driver's license number, passport number, or other similar identifiers.</p>\n              <p>Collected: Yes.</p>\n            </li>\n            <li>\n              <p><strong>Category B: Personal information categories listed in the California Customer Records statute (Cal. Civ. Code § 1798.80(e)).</strong></p>\n              <p>Examples: A name, signature, Social Security number, physical characteristics or description, address, telephone number, passport number, driver's license or state identification card number, insurance policy number, education, employment, employment history, bank account number, credit card number, debit card number, or any other financial information, medical information, or health insurance information. Some personal information included in this category may overlap with other categories.</p>\n              <p>Collected: Yes.</p>\n            </li>\n            <li>\n              <p><strong>Category C: Protected classification characteristics under California or federal law.</strong></p>\n              <p>Examples: Age (40 years or older), race, color, ancestry, national origin, citizenship, religion or creed, marital status, medical condition, physical or mental disability, sex (including gender, gender identity, gender expression, pregnancy or childbirth and related medical conditions), sexual orientation, veteran or military status, genetic information (including familial genetic information).</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category D: Commercial information.</strong></p>\n              <p>Examples: Records and history of products or services purchased or considered.</p>\n              <p>Collected: Yes.</p>\n            </li>\n            <li>\n              <p><strong>Category E: Biometric information.</strong></p>\n              <p>Examples: Genetic, physiological, behavioral, and biological characteristics, or activity patterns used to extract a template or other identifier or identifying information, such as, fingerprints, faceprints, and voiceprints, iris or retina scans, keystroke, gait, or other physical patterns, and sleep, health, or exercise data.</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category F: Internet or other similar network activity.</strong></p>\n              <p>Examples: Interaction with our Service or advertisement.</p>\n              <p>Collected: Yes.</p>\n            </li>\n            <li>\n              <p><strong>Category G: Geolocation data.</strong></p>\n              <p>Examples: Approximate physical location.</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category H: Sensory data.</strong></p>\n              <p>Examples: Audio, electronic, visual, thermal, olfactory, or similar information.</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category I: Professional or employment-related information.</strong></p>\n              <p>Examples: Current or past job history or performance evaluations.</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category J: Non-public education information (per the Family Educational Rights and Privacy Act (20 U.S.C. Section 1232g, 34 C.F.R. Part 99)).</strong></p>\n              <p>Examples: Education records directly related to a student maintained by an educational institution or party acting on its behalf, such as grades, transcripts, class lists, student schedules, student identification codes, student financial information, or student disciplinary records.</p>\n              <p>Collected: No.</p>\n            </li>\n            <li>\n              <p><strong>Category K: Inferences drawn from other personal information.</strong></p>\n              <p>Examples: Profile reflecting a person's preferences, characteristics, psychological trends, predispositions, behavior, attitudes, intelligence, abilities, and aptitudes.</p>\n              <p>Collected: No.</p>\n            </li>\n          </ul>\n          <p>Under CCPA, personal information does not include:</p>\n          <ul>\n            <li>Publicly available information from government records</li>\n            <li>Deidentified or aggregated consumer information</li>\n            <li>Information excluded from the CCPA's scope, such as:\n              <ul>\n                <li>Health or medical information covered by the Health Insurance Portability and Accountability Act of 1996 (HIPAA) and the California Confidentiality of Medical Information Act (CMIA) or clinical trial data</li>\n                <li>Personal Information covered by certain sector-specific privacy laws, including the Fair Credit Reporting Act (FRCA), the Gramm-Leach-Bliley Act (GLBA) or California Financial Information Privacy Act (FIPA), and the Driver's Privacy Protection Act of 1994</li>\n              </ul>\n            </li>\n          </ul>\n          <h2>Sources of Personal Information</h2>\n          <p>We obtain the categories of personal information listed above from the following categories of sources:</p>\n          <ul>\n            <li><strong>Directly from You</strong>. For example, from the forms You complete on our Service, preferences You express or provide through our Service, or from Your purchases on our Service.</li>\n            <li><strong>Indirectly from You</strong>. For example, from observing Your activity on our Service.</li>\n            <li><strong>Automatically from You</strong>. For example, through cookies We or our Service Providers set on Your Device as You navigate through our Service.</li>\n            <li><strong>From Service Providers</strong>. For example, third-party vendors to provide advertising on our Service, third-party vendors for payment processing, or other third-party vendors that We use to provide the Service to You.</li>\n          </ul>\n          <h2>Use of Personal Information for Business Purposes or Commercial Purposes</h2>\n          <p>We may use or disclose personal information We collect for \"business purposes\" or \"commercial purposes\" (as defined under the CCPA), which may include the following examples:</p>\n          <ul>\n            <li>To operate our Service and provide You with our Service.</li>\n            <li>To provide You with support and to respond to Your inquiries, including to investigate and address Your concerns and monitor and improve our Service.</li>\n            <li>To fulfill or meet the reason You provided the information. For example, if You share Your contact information to ask a question about our Service, We will use that personal information to respond to Your inquiry. If You provide Your personal information to purchase a product or service, We will use that information to process Your payment and facilitate delivery.</li>\n            <li>To respond to law enforcement requests and as required by applicable law, court order, or governmental regulations.</li>\n            <li>As described to You when collecting Your personal information or as otherwise set forth in the CCPA.</li>\n            <li>For internal administrative and auditing purposes.</li>\n            <li>To detect security incidents and protect against malicious, deceptive, fraudulent or illegal activity, including, when necessary, to prosecute those responsible for such activities.</li>\n          </ul>\n          <p>Please note that the examples provided above are illustrative and not intended to be exhaustive. For more details on how we use this information, please refer to the \"Use of Your Personal Data\" section.</p>\n          <p>If We decide to collect additional categories of personal information or use the personal information We collected for materially different, unrelated, or incompatible purposes We will update this Privacy Policy.</p>\n          <h2>Disclosure of Personal Information for Business Purposes or Commercial Purposes</h2>\n          <p>We may use or disclose and may have used or disclosed in the last twelve (12) months the following categories of personal information for business or commercial purposes:</p>\n          <ul>\n            <li>Category A: Identifiers</li>\n            <li>Category B: Personal information categories listed in the California Customer Records statute (Cal. Civ. Code § 1798.80(e))</li>\n            <li>Category D: Commercial information</li>\n            <li>Category F: Internet or other similar network activity</li>\n          </ul>\n          <p>Please note that the categories listed above are those defined in the CCPA. This does not mean that all examples of that category of personal information were in fact disclosed, but reflects our good faith belief to the best of our knowledge that some of that information from the applicable category may be and may have been disclosed.</p>\n          <p>When We disclose personal information for a business purpose or a commercial purpose, We enter a contract that describes the purpose and requires the recipient to both keep that personal information confidential and not use it for any purpose except performing the contract.</p>\n          <h2>Sale of Personal Information</h2>\n          <p>As defined in the CCPA, \"sell\" and \"sale\" mean selling, renting, releasing, disclosing, disseminating, making available, transferring, or otherwise communicating orally, in writing, or by electronic or other means, a consumer's personal information by the business to a third party for valuable consideration. This means that We may have received some kind of benefit in return for sharing personal Iinformation, but not necessarily a monetary benefit.</p>\n          <p>Please note that the categories listed below are those defined in the CCPA. This does not mean that all examples of that category of personal information were in fact sold, but reflects our good faith belief to the best of our knowledge that some of that information from the applicable category may be and may have been shared for value in return.</p>\n          <p>We may sell and may have sold in the last twelve (12) months the following categories of personal information:</p>\n          <ul>\n            <li>Category A: Identifiers</li>\n            <li>Category B: Personal information categories listed in the California Customer Records statute (Cal. Civ. Code § 1798.80(e))</li>\n            <li>Category D: Commercial information</li>\n            <li>Category F: Internet or other similar network activity</li>\n          </ul>\n          <h2>Share of Personal Information</h2>\n          <p>We may share Your personal information identified in the above categories with the following categories of third parties:</p>\n          <ul>\n            <li>Service Providers</li>\n            <li>Payment processors</li>\n            <li>Our affiliates</li>\n            <li>Our business partners</li>\n            <li>Third party vendors to whom You or Your agents authorize Us to disclose Your personal information in connection with products or services We provide to You</li>\n          </ul>\n          <h2>Sale of Personal Information of Minors Under 16 Years of Age</h2>\n          <p>We do not sell the personal information of Consumers We actually know are less than 16 years of age, unless We receive affirmative authorization (the \"right to opt-in\") from either the Consumer who is between 13 and 16 years of age, or the parent or guardian of a Consumer less than 13 years of age. Consumers who opt-in to the sale of personal information may opt-out of future sales at any time. To exercise the right to opt-out, You (or Your authorized representative) may submit a request to Us by contacting Us.</p>\n          <p>If You have reason to believe that a child under the age of 13 (or 16) has provided Us with personal information, please contact Us with sufficient detail to enable Us to delete that information.</p>\n          <h2>Your Rights under the CCPA</h2>\n          <p>The CCPA provides California residents with specific rights regarding their personal information. If You are a resident of California, You have the following rights:</p>\n          <ul>\n            <li><strong>The right to notice.</strong> You have the right to be notified which categories of Personal Data are being collected and the purposes for which the Personal Data is being used.</li>\n            <li><strong>The right to request.</strong> Under CCPA, You have the right to request that We disclose information to You about Our collection, use, sale, disclosure for business purposes and share of personal information. Once We receive and confirm Your request, We will disclose to You:\n              <ul>\n                <li>The categories of personal information We collected about You</li>\n                <li>The categories of sources for the personal information We collected about You</li>\n                <li>Our business or commercial purpose for collecting or selling that personal information</li>\n                <li>The categories of third parties with whom We share that personal information</li>\n                <li>The specific pieces of personal information We collected about You</li>\n                <li>If we sold Your personal information or disclosed Your personal information for a business purpose, We will disclose to You:\n                  <ul>\n                    <li>The categories of personal information categories sold</li>\n                    <li>The categories of personal information categories disclosed</li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n            <li><strong>The right to say no to the sale of Personal Data (opt-out).</strong> You have the right to direct Us to not sell Your personal information. To submit an opt-out request please contact Us.</li>\n            <li><strong>The right to delete Personal Data.</strong> You have the right to request the deletion of Your Personal Data, subject to certain exceptions. Once We receive and confirm Your request, We will delete (and direct Our Service Providers to delete) Your personal information from our records, unless an exception applies. We may deny Your deletion request if retaining the information is necessary for Us or Our Service Providers to:\n              <ul>\n                <li>Complete the transaction for which We collected the personal information, provide a good or service that You requested, take actions reasonably anticipated within the context of our ongoing business relationship with You, or otherwise perform our contract with You.</li>\n                <li>Detect security incidents, protect against malicious, deceptive, fraudulent, or illegal activity, or prosecute those responsible for such activities.</li>\n                <li>Debug products to identify and repair errors that impair existing intended functionality.</li>\n                <li>Exercise free speech, ensure the right of another consumer to exercise their free speech rights, or exercise another right provided for by law.</li>\n                <li>Comply with the California Electronic Communications Privacy Act (Cal. Penal Code § 1546 et. seq.).</li>\n                <li>Engage in public or peer-reviewed scientific, historical, or statistical research in the public interest that adheres to all other applicable ethics and privacy laws, when the information's deletion may likely render impossible or seriously impair the research's achievement, if You previously provided informed consent.</li>\n                <li>Enable solely internal uses that are reasonably aligned with consumer expectations based on Your relationship with Us.</li>\n                <li>Comply with a legal obligation.</li>\n                <li>Make other internal and lawful uses of that information that are compatible with the context in which You provided it.</li>\n              </ul>\n            </li>\n            <li><strong>The right not to be discriminated against.</strong> You have the right not to be discriminated against for exercising any of Your consumer's rights, including by:\n              <ul>\n                <li>Denying goods or services to You</li>\n                <li>Charging different prices or rates for goods or services, including the use of discounts or other benefits or imposing penalties</li>\n                <li>Providing a different level or quality of goods or services to You</li>\n                <li>Suggesting that You will receive a different price or rate for goods or services or a different level or quality of goods or services</li>\n              </ul>\n            </li>\n          </ul>\n          <h2>Exercising Your CCPA Data Protection Rights</h2>\n          <p>In order to exercise any of Your rights under the CCPA, and if You are a California resident, You can contact Us:</p>\n          <ul>\n            <li>By email: Support@dapify.co</li>\n          </ul>\n          <p>Only You, or a person registered with the California Secretary of State that You authorize to act on Your behalf, may make a verifiable request related to Your personal information.</p>\n          <p>Your request to Us must:</p>\n          <ul>\n            <li>Provide sufficient information that allows Us to reasonably verify You are the person about whom We collected personal information or an authorized representative</li>\n            <li>Describe Your request with sufficient detail that allows Us to properly understand, evaluate, and respond to it</li>\n          </ul>\n          <p>We cannot respond to Your request or provide You with the required information if We cannot:</p>\n          <ul>\n            <li>Verify Your identity or authority to make the request</li>\n            <li>And confirm that the personal information relates to You</li>\n          </ul>\n          <p>We will disclose and deliver the required information free of charge within 45 days of receiving Your verifiable request. The time period to provide the required information may be extended once by an additional 45 days when reasonable necessary and with prior notice.</p>\n          <p>Any disclosures We provide will only cover the 12-month period preceding the verifiable request's receipt.</p>\n          <p>For data portability requests, We will select a format to provide Your personal information that is readily useable and should allow You to transmit the information from one entity to another entity without hindrance.</p>\n          <h2>Do Not Sell My Personal Information</h2>\n          <p>You have the right to opt-out of the sale of Your personal information. Once We receive and confirm a verifiable consumer request from You, we will stop selling Your personal information. To exercise Your right to opt-out, please contact Us.</p>\n          <h1>Links to Other Websites</h1>\n          <p>Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party's site. We strongly advise You to review the Privacy Policy of every site You visit.</p>\n          <p>We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.</p>\n          <h1>Changes to this Privacy Policy</h1>\n          <p>We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page.</p>\n          <p>We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the \"Last updated\" date at the top of this Privacy Policy.</p>\n          <p>You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.</p>\n          <h1>Contact Us</h1>\n          <p>If you have any questions about this Privacy Policy, You can contact us:</p>\n          <ul>\n            <li>By email: Support@dapify.co</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n  );\n};\n\nexport default PrivacyPolicy;\n","/home/asus/dapify/src/templates/view/Content/AddVideo.js",["439","440"],"import React, { useState, useEffect } from 'react'\nimport Navbar from '../Navbar';\nimport UserProfile from '../../components/userProfile';\nimport { useForm } from 'react-hook-form';\nimport imagePreview from '../../../assets/images/p-vd.png';\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\nimport Footer from '../footer';\n// Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { addMediaContent } from \"../../../Redux/actions/media-actions\";\nimport ReactPlayer from 'react-player'\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport Loader from './../../../utils/Loader';\nimport VideoPlayer from '../../components/videoplayer';\nimport { Success } from './../../../utils/errors';\n\nfunction AddVideo(props) {\n\n    const [isLoader, setLoader] = useState(false);\n    const [MediaVideo, setMediaVideo] = useState(null);\n    const [MediaViewVideo, setMediaViewVideo] = useState(imagePreview);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { progress_bar, loading } = useSelector((state) => state.mediaReducer);\n    const [videoError, setvideoError] = useState(null);\n    const [MediaYoutubeVideo, setMediaYoutubeVideo] = useState(null);\n    const [title, setTitle] = useState('');\n    const [errorsval, setErrors] = useState({\n        title_err: \"\",\n        media_err: \"\",\n    });\n\n    useEffect(() => {\n        if (authuser)\n            props.getUserProfileById(authuser.uid);\n        setLoader(loading);\n    }, []);\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm({\n        mode: \"onChange\",\n    });\n\n    const MediaVideoChange = async (e) => {\n\n        const videoFile = e.target.files[0];\n        if (videoFile) {\n            setMediaVideo(null);\n       \n            if (!videoFile.name.match(/\\.(mp4|mpg|avi|mov|wmv)$/i)) {\n                setvideoError(\"Please select valid video.\");\n                return false;\n            } else {\n\n                setMediaVideo(e.target.files[0]);\n                setMediaViewVideo(URL.createObjectURL(e.target.files[0]));\n                setvideoError(null);\n                setMediaYoutubeVideo(null);\n                setErrors('');\n            }\n        }\n    }\n\n    useEffect(() => {\n        setLoader(loading);\n        reset({\n            title: '',\n            youtube_url: '',\n        });\n        setMediaViewVideo(null);\n        setMediaVideo(null);\n        setMediaYoutubeVideo(null);\n        setTitle('');\n    }, [progress_bar, reset, loading]);\n\n    const MediaYoutubeVideoChange = async (e) => {\n        console.log('lastword',e.target.value);\n        const youtubeVideoFile = e.target.value;\n        if (youtubeVideoFile) {\n\n            setMediaYoutubeVideo(youtubeVideoFile);\n            console.log('previewyoutube', youtubeVideoFile);\n            setMediaVideo(null);\n            setTitle('');\n            setErrors({ 'media_err': '' })\n        }else{\n            setMediaYoutubeVideo(null);\n        }\n    }\n\n    console.log('MediaYoutubeVideo8888', MediaYoutubeVideo);\n    console.log('MediaViewVideo9999', MediaViewVideo);\n\n    const handleTitle = (e) => {\n        setTitle(e.target.value);\n        if (e.target.value === '') {\n            setErrors({ 'title_err': 'Title is required' });\n            return false;\n        }\n        else if (e.target.value.length >= 20) {\n            setErrors({ 'title_err': 'Title cannot exceed 20 characters' });\n            return false;\n        }\n        else {\n            setErrors({ 'title_err': '' });\n        }\n    }\n\n\n    const onSubmit = async (event) => {\n\n        if (MediaVideo === null && MediaYoutubeVideo === null) {\n            setErrors({ 'media_err': 'Please upload video or add a link' })\n            return false;\n        }\n        else if (MediaVideo !== null) {\n            if (title === '') {\n                setErrors({ 'title_err': 'Title is required' });\n                return false;\n            }\n            else if (title.length >= 20) {\n                setErrors({ 'title_err': 'Title cannot exceed 20 characters' });\n                return false;\n            }\n            else {\n                setErrors({ 'title_err': '' });\n            }\n        } else {\n            if (MediaYoutubeVideo !== null) {\n                console.log('MediaYoutubeVideo', MediaYoutubeVideo);\n                if (MediaYoutubeVideo !== undefined || MediaYoutubeVideo !== '') {\n                    var regExp = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\n\n                    // var regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=|\\?v=)([^#\\&\\?]*).*/;\n                    var match = MediaYoutubeVideo.match(regExp);\n                    if (match) {\n                        console.log('correct');\n                        setErrors({ 'media_err': '' })\n                    }\n                    else {\n                        console.log('notcorrect');\n                        setErrors({ 'media_err': 'Please enter valid url' })\n                        return false;\n\n                    }\n                }\n            }\n        }\n\n        if ((MediaVideo !== null && title !== '') || (MediaYoutubeVideo !== null)) {\n            var via = '';\n            var media_url = '';\n            if (MediaVideo !== null) {\n                via = 'local';\n                media_url = MediaVideo;\n            }\n            else {\n                via = 'youtube';\n                media_url = MediaYoutubeVideo;\n            }\n            const data = {\n                uid: userDetailsById.uid,\n                username: userDetailsById.username,\n                userAvatarUrl: userDetailsById.avatarURL,\n                title: title,\n                media_type: 'video',\n                public: event.public_content,\n                media_content: media_url,\n                via: via,\n\n            };\n\n            await props.addMediaContent(data, props.history);\n        }\n    };\n\n    return (\n        <div className='main-page-wrapper'>\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <Navbar />\n\n            <div className='middleMainSection'>\n                <div className=\"mob-secion  add-content-header\">\n                    <div className=\"mobile-top-logo\">\n                        <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                        <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                        <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                    </div>\n                </div>\n                <div className='middleSection-add-content1'>\n                    <div className=\"addContentSec addContentSecMain\">\n                        <UserProfile />\n\n                        <div className=\"choose-content\">\n                            <h2>Upload your video or add a link <br /> from youtube</h2>\n                            <form onSubmit={handleSubmit(onSubmit)}>\n                                <div className=\"choose-who-row\">\n                                    <div className=\"choose-who-left\">\n                                        <div className=\"choose-who-top\">\n                                            <div className=\"who-inner\">\n                                                <div className=\"choose-who-top-left\">\n                                                    <div className=\"ch-in\"><span>*</span> Choose who can see this content</div>\n                                                </div>\n                                                <div className=\"choose-who-top-right\">\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test1\" name=\"public_content\" value=\"false\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test1\">\n                                                            <span>Subscribers only</span>\n                                                        </label>\n                                                    </div>\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test2\" name=\"public_content\" value=\"true\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test2\">\n                                                            <span>Everyone</span>\n                                                        </label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {errors?.public_content?.type === \"required\" && (\n                                                <p className=\"errMsg\">This field is required</p>\n                                            )}\n                                        </div>\n                                        <div className=\"choose-who-mdl\">\n                                            <div className=\"choose-who-mdl-left\">\n                                                <div className=\"vd-in\">\n                                                    <span><img src={require('../../../assets/images/playSmall.svg').default} alt='' /></span>\n                                                    <span>Video</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"choose-who-mdl-right\">\n                                                <div className=\"vd-right\">\n                                                    <div className=\"progress\">\n                                                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: progress_bar + '%' }} aria-valuenow={progress_bar} aria-valuemin=\"0\" aria-valuemax=\"100\"><span className=\"pro-pra\">{progress_bar}%</span></div>\n                                                    </div>\n\n                                                    <div className=\"upload-vd upload-vido\">\n                                                        <label for=\"file\">UPLOAD VIDEO</label>\n                                                        <input type=\"file\" id=\"file\" onChange={MediaVideoChange} />\n                                                        {videoError && (\n                                                            <p className=\"errMsg\">{videoError}</p>\n                                                        )}\n                                                    </div>\n\n                                                    <div className=\"title-name\">\n                                                        <p><input type=\"text\" name=\"title\" className=\"form-control log-inp\" value={title !== '' ? title : ''} placeholder=\"Title\" onChange={handleTitle} />\n                                                        </p>\n                                                        {errorsval.title_err ? <p className=\"errMsg\">{errorsval.title_err}</p> : ''}\n\n                                                        <p className=\"tl-or\">or</p>\n                                                        <p><input type=\"text\" onChange={MediaYoutubeVideoChange} name=\"youtube_url\" className=\"form-control log-inp\" value={MediaYoutubeVideo !== null ? MediaYoutubeVideo : \"\" } placeholder=\"Video Youtube Link URL (youtube.com/sfdskphfa)\" />\n                                                        </p>\n                                                    </div>\n                                                    {errorsval.media_err ? <p className=\"errMsg\">{errorsval.media_err}</p> : ''}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"choose-who-right\">\n                                        <div className=\"up-rights\">\n                                            <p>Preview</p>\n                                            <div className=\"up-rights-img up-right-vi-do\"></div>\n                                            {MediaYoutubeVideo !== null ? (\n                                                <ReactPlayer width=\"320\" height=\"240\" url={MediaYoutubeVideo} />\n                                            ) : MediaViewVideo !== null ? (\n                                                <VideoPlayer type=\"addContent\" videourl={MediaViewVideo} />\n\n                                            ) : <img src={require('../../../assets/images/p-vd.png').default} alt='' />}\n\n                                            <Button type=\"submit\" className='btn'>\n                                                Done\n                                            </Button>\n                                            {/* <video width=\"320\" height=\"240\" controls>\n                                                        <source src={MediaViewVideo} type=\"video/mp4\"/>\n                                                    </video> */}\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        progress_bar: state.mediaReducer.progress_bar,\n        authuser: state.authReducer.authuser,\n        loading: state.mediaReducer.loading\n    }\n}\n\nconst actionCreators = { getUserProfileById, addMediaContent, fetchUser };\nexport default connect(mapStateToProps, actionCreators)(AddVideo);\n\n","/home/asus/dapify/src/templates/view/Content/AddImage.js",["441"],"import React, { useState, useEffect } from 'react'\nimport Navbar from '../Navbar';\nimport UserProfile from '../../components/userProfile';\nimport { useForm } from 'react-hook-form';\nimport imagePreview from '../../../assets/images/p-imgs.png';\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\nimport Footer from '../footer';\n// Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { addMediaContent } from \"../../../Redux/actions/media-actions\";\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport Loader from './../../../utils/Loader';\n\nfunction AddImage(props) {\n\n    const [isLoader, setLoader] = useState(false);\n    const [MediaImage, setMediaImage] = useState(null);\n    const [MediaViewImage, setMediaViewImage] = useState(imagePreview);\n    const { userDetailsById,authuser } = useSelector((state) => state.authReducer);\n    const { progress_bar,loading } = useSelector((state) => state.mediaReducer);\n    const [imgError, setimgError] = useState(null);\n\n    useEffect(() => {\n        if(authuser)\n            props.getUserProfileById(authuser.uid);\n            setLoader(loading);\n    }, []);\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm({\n        mode: \"onChange\",\n    });\n\n    const MediaImageChange = async (e) => {\n\n        const imageFile = e.target.files[0];\n        if (imageFile) {\n            if (!imageFile.name.match(/\\.(jpg|jpeg|png|gif)$/)) {\n                setimgError(\"Please select valid image.\");\n                return false;\n            }else{\n               \n                setMediaViewImage(URL.createObjectURL(e.target.files[0]));\n                setMediaImage(e.target.files[0]);\n                setimgError(null);\n            }\n        }\n    }\n\n    useEffect( () => {\n        setLoader(loading);\n        reset({\n            title: '',\n        });\n        setMediaViewImage(null);\n        setMediaImage(null);\n    },[progress_bar,reset,loading]);\n\n    const onSubmit = async (event) => {\n        if (MediaImage === null) {\n            setimgError('Please select image.');\n            return false;\n        } else {\n            const data = {\n                uid: userDetailsById.uid,\n                username: userDetailsById.username,\n                userAvatarUrl: userDetailsById.avatarURL,\n                title: event.title,\n                media_type: 'image',\n                user_type: event.user_type,\n                public: event.public_content,\n                media_content: MediaImage,\n\n            };\n            await props.addMediaContent(data, props.history);\n        }\n    };\n    \n    return (\n        <div className='main-page-wrapper'>\n            {isLoader ? <Loader isLoader={true} /> : null} \n            <Navbar />\n\n            <div className='middleMainSection'>\n                <div className=\"mob-secion add-content-header\"> \n                    <div className=\"mobile-top-logo\">\n                        <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                        <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                        <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                    </div>\n                </div> \n                <div className='middleSection-add-content1'>\n                    <div className=\"addContentSec addContentSecMain\">\n                        <UserProfile />\n                        <div className=\"choose-content\">\n                            <h2>Add an image to your profile feed</h2>\n                            <form onSubmit={handleSubmit(onSubmit)}>\n                                <div className=\"choose-who-row\">\n                                     <div className=\"choose-who-left\">\n                                         <div className=\"choose-who-top\">\n                                            <div className=\"who-inner\">\n                                                <div className=\"choose-who-top-left\">\n                                                    <div className=\"ch-in\"><span>*</span> Choose who can see this content</div>\n                                                </div>\n                                                <div className=\"choose-who-top-right\">\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test1\" name=\"public_content\" value=\"false\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test1\"><span>Subscribers only</span></label>\n                                                    </div>\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test2\" name=\"public_content\" value=\"true\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test2\"><span>Everyone</span></label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {errors?.public_content?.type === \"required\" && (\n                                                <p className=\"errMsg\">This field is required</p>\n                                            )}\n                                         </div>\n                                         <div className=\"choose-who-mdl\">\n                                             <div className=\"choose-who-mdl-left\">\n                                                <div className=\"vd-in\">\n                                                    <span><img src={require('../../../assets/images/sam-img.svg').default} alt='' /></span>\n                                                    <span>Image</span>\n                                                </div>\n                                             </div>\n                                             <div className=\"choose-who-mdl-right\">\n                                                <div className=\"vd-right\">\n                                                    <div className=\"progress\">\n                                                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: progress_bar + '%' }} aria-valuenow={progress_bar} aria-valuemin=\"0\" aria-valuemax=\"100\"><span className=\"pro-pra\">{progress_bar}%</span></div>\n                                                    </div>\n                                                    <div className=\"upload-vd upload-imgs\">\n                                                        <label for=\"file\">UPLOAD image</label>\n                                                        <input type=\"file\" id=\"file\" onChange={MediaImageChange} />\n                                                        {imgError && (\n                                                            <p className=\"errMsg\">{imgError}</p>\n                                                        )}\n                                                    </div>\n                                                    <div className=\"title-name\">\n                                                        <p>\n                                                            <input type=\"text\" name=\"title\" className=\"form-control log-inp\" placeholder=\"Title\"  {...register(\"title\", {\n                                                            required: true,maxLength: 20, })} />\n                                                            {errors?.title?.type === \"required\" && (\n                                                                <p className=\"errMsg\">This field is required</p>\n                                                            )}\n                                                            {errors?.title?.type === \"maxLength\" && (\n                                                                <p className=\"errMsg\">Title cannot exceed 20 characters</p>\n                                                            )}\n                                                        </p>\n                                                    </div>\n                                                </div>\n                                             </div>\n                                         </div>\n                                     </div>\n                                     <div className=\"choose-who-right\">\n                                        <div className=\"up-rights\">\n                                            <p>Preview</p>\n                                            <div className=\"up-rights-img\"><img src={MediaViewImage ? MediaViewImage : imagePreview} alt='' /></div>\n                                            <Button type=\"submit\" className='btn'>Done</Button>\n                                        </div>\n                                     </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        progress_bar: state.mediaReducer.progress_bar,\n        authuser: state.authReducer.authuser,\n        loading : state.mediaReducer.loading\n    }\n}\n\nconst actionCreators = { getUserProfileById, addMediaContent,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(AddImage);\n","/home/asus/dapify/src/templates/view/Content/AddAudio.js",["442"],"import React, {useRef, useState, useEffect } from 'react'\nimport Navbar from '../Navbar';\nimport UserProfile from '../../components/userProfile';\nimport { useForm } from 'react-hook-form';\nimport imagePreview from '../../../assets/images/upload-aud.png';\nimport { Button } from '@material-ui/core'\nimport { Link } from \"react-router-dom\";\nimport Footer from '../footer';\n// Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { addMediaContent } from \"../../../Redux/actions/media-actions\";\nimport { Media, Player, controls } from 'react-media-player'\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport Loader from './../../../utils/Loader';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport audio_img from '../../../assets/images/upload-aud.png';\nconst { PlayPause } = controls\n\n\nfunction AddAudio(props) {\n\n    const jsmediatags = window.jsmediatags;\n    const ref = useRef();\n    const [isLoader, setLoader] = useState(false);\n    const [MediaAudio, setMediaAudio] = useState(null);\n    const [MediaViewAudio, setMediaViewAudio] = useState(imagePreview);\n    const { userDetailsById,authuser } = useSelector((state) => state.authReducer);\n    const { progress_bar,loading } = useSelector((state) => state.mediaReducer);\n    const [audioError, setaudioError] = useState(null);\n    const [coverImage, setCoverImage] = useState('');\n    const [CoverImageView, setCoverImageView] = useState(audio_img);\n    const [imgError, setimgError] = useState(null);\n\n    useEffect(() => {\n        if(authuser)\n            props.getUserProfileById(authuser.uid);\n            setLoader(loading);\n    }, []);\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm({\n        mode: \"onChange\",\n    });\n\n    \n    const UploadCoverArt = async (e) => {\n\n        const imageFile = e.target.files[0];\n        if (imageFile) {\n            if (!imageFile.name.match(/\\.(jpg|jpeg|png|gif)$/)) {\n                setimgError(\"Please select valid image.\");\n                return false;\n            }else{\n               \n                setCoverImageView(URL.createObjectURL(e.target.files[0]));\n                setCoverImage(e.target.files[0]);\n                setimgError(null);\n            }\n        }\n    }\n\n    const MediaAudioChange = async (e) => {\n\n        const imageFile = e.target.files[0];\n        if (imageFile) {\n            if (!imageFile.name.match(/\\.(mp3)$/)) {\n                setaudioError(\"Please select valid audio.\");\n                return false;\n            } else {\n              \n                setMediaViewAudio(URL.createObjectURL(e.target.files[0]));\n                setMediaAudio(e.target.files[0]);\n                setaudioError(null);\n               \n                const fille = e.target.files[0];\n                jsmediatags.read(fille, {\n                onSuccess: function(tag) {\n                   \n                    if(tag.tags?.picture){\n                        ref.current.value = \"\"\n                        const img_data = tag.tags.picture.data;\n                        const img_format = tag.tags.picture.format;\n                        let base64String = \"\";\n                        for (let i = 0; i < img_data.length; i++) {\n                        base64String += String.fromCharCode(img_data[i]);\n                        \n                        }\n                        \n                        var myimg = `data:${img_format};base64,${window.btoa(base64String)}`;\n                        if(myimg){\n                            var arr = myimg.split(','),\n                            mime = arr[0].match(/:(.*?);/)[1],\n                            bstr = atob(arr[1]), \n                            n = bstr.length, \n                            u8arr = new Uint8Array(n);\n                            \n                            while(n--){\n                                u8arr[n] = bstr.charCodeAt(n);\n                            }\n                            var timestamp = new Date().getTime().toString();\n                            var filetype = mime.toLowerCase();\n                            var filename = 'coverart_'+timestamp+'.'+filetype;\n                            \n                            var coverimg =  new File([u8arr], filename, {type:'image/'+mime});\n                            setCoverImage(coverimg);\n                            setCoverImageView(myimg)\n                        }\n                    }else{\n                        setCoverImageView(audio_img)\n                    }\n                },\n                onError: function(error) {\n                    console.log(error);\n                }\n                });\n            }\n        }\n    }\n\n    useEffect(() => {\n        setLoader(loading);\n        reset({\n            title: '',\n        });\n        setMediaViewAudio(null);\n        setMediaAudio(null);\n        setCoverImageView(audio_img);\n        setCoverImage('');\n    }, [progress_bar, reset,loading]);\n\n    const onSubmit = async (event) => {\n      \n        if (MediaAudio === null) {\n            setaudioError('Please select audio.');\n            return false;\n        } else if(coverImage === ''){\n            setimgError('Please upload cover art for audio.');\n            return false;\n        }else{\n            const data = {\n                uid: userDetailsById.uid,\n                username: userDetailsById.username,\n                userAvatarUrl: userDetailsById.avatarURL,\n                title: event.title,\n                media_type: 'audio',\n                user_type: event.user_type,\n                public: event.public_content,\n                media_content: MediaAudio,\n                cover_art: coverImage,\n            };\n\n            await props.addMediaContent(data, props.history);\n        }\n    };\n    return (\n        <div className='main-page-wrapper'>\n            {isLoader ? <Loader isLoader={true} /> : null} \n            <Navbar />\n\n            <div className='middleMainSection'>\n                <div className=\"mob-secion  add-content-header\"> \n                    <div className=\"mobile-top-logo\">\n                        <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                        <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                        <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                    </div>\n                </div> \n                <div className='middleSection-add-content1'>\n                    <div className=\"addContentSec addContentSecMain\">\n                        <UserProfile />\n\n                        <div className=\"choose-content\">\n                            <h2>Add an audio to your profile feed</h2>\n                            <form onSubmit={handleSubmit(onSubmit)}>\n\n                                <div className=\"choose-who-row\">\n                                    <div className=\"choose-who-left\">\n                                        <div className=\"choose-who-top\">\n                                            <div className=\"who-inner\">\n                                                <div className=\"choose-who-top-left\">\n                                                    <div className=\"ch-in\"><span>*</span> Choose who can see this content</div>\n                                                </div>\n                                                <div className=\"choose-who-top-right\">\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test1\" name=\"public_content\" value=\"false\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test1\">\n                                                            <span>Subscribers only</span>\n                                                        </label>\n                                                    </div>\n                                                    <div className=\"cus-rd\">\n                                                        <input type=\"radio\" id=\"test2\" name=\"public_content\" value=\"true\" {...register(\"public_content\", { required: true })} />\n                                                        <label for=\"test2\">\n                                                            <span>Everyone</span>\n                                                        </label> \n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {errors?.public_content?.type === \"required\" && (\n                                                <p className=\"errMsg\">This field is required</p> \n                                            )}\n                                        </div>\n                                        <div className=\"choose-who-mdl\">\n                                            <div className=\"choose-who-mdl-left\">\n                                                <div className=\"vd-in\">\n                                                    <span><img src={require('../../../assets/images/Vector-aud.svg').default} alt='' /></span>\n                                                    <span>Audio</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"choose-who-mdl-right\">\n                                                <div className=\"vd-right\">\n                                                    <div className=\"progress\">\n                                                        <div className=\"progress-bar\" role=\"progressbar\" style={{ width: progress_bar + '%' }} aria-valuenow={progress_bar} aria-valuemin=\"0\" aria-valuemax=\"100\"><span className=\"pro-pra\">{progress_bar}%</span></div>\n                                                    </div>\n                                                    <div className=\"upload-vd upload-ad\">\n                                                        <label for=\"file\">UPLOAD audio</label>\n                                                        <input type=\"file\" id=\"file\" onChange={MediaAudioChange} />\n                                                        {audioError && (\n                                                            <p className=\"errMsg\">{audioError}</p>\n                                                        )}\n                                                    </div> \n                                                    <div className=\"title-name\">\n                                                        <p><input type=\"text\" name=\"title\" className=\"form-control log-inp\" placeholder=\"Title\" {...register(\"title\", {\n                                                            required: true,maxLength: 20,\n                                                        })} />\n                                                        {errors?.title?.type === \"required\" && (\n                                                            <p className=\"errMsg\">This field is required</p>\n                                                        )}\n                                                        {errors?.title?.type === \"maxLength\" && (\n                                                            <p className=\"errMsg\">Title cannot exceed 20 characters</p>\n                                                        )}\n                                                        </p>\n                                                    </div>\n                                                    {/* <div className=\"upload-vd upload-imgs\"> */}\n                                                    {/* <label for=\"file\">UPLOAD Cover Art</label> */}\n                                                    <div className='coverfile_upload_img'>\n                                                        <label for=\"coverfile\">Upload Image</label>\n                                                        <input ref={ref} type=\"file\" className='form-control' id=\"coverfile\" onChange={UploadCoverArt} />\n                                                        {imgError && (\n                                                            <p className=\"errMsg\">{imgError}</p>\n                                                        )}\n                                                    </div>\n                                                    <div className=\"ad-will\">Audio will appear in your audio section</div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"choose-who-right\">\n                                        <div className=\"up-rights vd-buttons\">\n                                            <p>Preview</p>\n                                            <div className=\"up-rights-img\">  \n                                                <img value=\"coverPreview\" name=\"coverPreview\" src={CoverImageView} alt=''/>\n                                                {MediaViewAudio !== null ? (\n                                                <Media>\n                                                    <div className=\"media\">\n                                                    <div className=\"media-player\">\n                                                        <Player src={MediaViewAudio} /> \n                                                    </div>\n                                                    <div className=\"media-controls\">\n                                                        <PlayPause />\n                                                    </div>\n                                                    </div>\n                                                </Media>) :''}\n                                            </div>\n                                            <Button type=\"submit\" className='btn'>Done</Button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        progress_bar: state.mediaReducer.progress_bar,\n        authuser: state.authReducer.authuser,\n        loading : state.mediaReducer.loading\n    }\n}\n\nconst actionCreators = { getUserProfileById, addMediaContent,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(AddAudio);\n","/home/asus/dapify/src/templates/view/Home/userProfile.js",["443","444"],"import React,{useState,useEffect} from 'react'\r\nimport Navbar from '../Navbar';\r\nimport Footer from '../footer';\r\nimport HomePage from './homePage';\r\nimport HomeProfile from './homeProfile';\r\nimport HomeAbout from './homeAbout';\r\nimport { useParams } from \"react-router-dom\";\r\nimport HomeAudio from './homeAudio';\r\nimport HomeVideoImage from './homeVideoAndImage';\r\nimport { useDispatch } from \"react-redux\";\r\nimport {PROFILE_URL} from '../../../Redux/actions/type';\r\nimport { useSelector,connect } from \"react-redux\"; \r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'; \r\nimport { RedirectModal } from '../../../utils/errors';\r\nimport { StoreMediaShareCount } from \"../../../Redux/actions/media-actions\";\r\nimport { fetchUser } from \"../../../Redux/actions/auth-actions\";\r\n\r\nfunction UserProfile(props) {\r\n\r\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\r\n    const [userid,setuserId] = useState('');\r\n    const [modalStatus,setmodalStatus] = useState(false);\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n   \r\n   \r\n    useEffect(() => {\r\n        console.log('greateeeee',params);\r\n\r\n       \r\n        if(params.user_id)\r\n        {\r\n            console.log('params.type',params.type);\r\n            console.log('params.mediaId',params.mediaId);\r\n          \r\n            if(params.type !== undefined && params.mediaId !== undefined && authuser.uid !== undefined){\r\n\r\n             \r\n                const usrid = Buffer.from(params.user_id, 'base64').toString('ascii');\r\n                const type = Buffer.from(params.type, 'base64').toString('ascii');\r\n                const mediaId = Buffer.from(params.mediaId, 'base64').toString('ascii');\r\n                async function fetchdata() {\r\n                    const data ={\r\n                        user_id:usrid,\r\n                        type:type,\r\n                        mediaId:mediaId,\r\n                        shareBy:authuser.uid,\r\n                    }\r\n\r\n                    console.log('check share data',data);\r\n                    await props.StoreMediaShareCount(data);\r\n                }\r\n                fetchdata();\r\n            }\r\n            setuserId(params.user_id) \r\n            dispatch({ type: PROFILE_URL, data: '' });\r\n        }\r\n\r\n    },[authuser.uid]);\r\n\r\n    useEffect(() => {\r\n       \r\n        if(modalStatus === false){\r\n            \r\n            if(userDetailsById?.user_active === false )\r\n            {   \r\n                setmodalStatus(true);\r\n                RedirectModal('The user account has been disabled by an administrator.');\r\n            }\r\n        }\r\n        \r\n    },[userDetailsById]);\r\n    \r\n  \r\n    return (\r\n        \r\n        <div className='main-page-wrapper'>\r\n             <Navbar />\r\n            {userDetailsById?.user_active === true &&\r\n            (\r\n           \r\n            <div className='middleMainSection'>\r\n\r\n                <div className='topHomeProfile'>\r\n                    <div className='middleSection'>\r\n                        <div className='middleSectionInn'>\r\n                            <HomeProfile props={props} userProfileId={userid}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className='right-top-box hide-mobile'>\r\n                        <div className=\"ab-desc\">\r\n                            <HomeAbout userProfileId={userid} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"about-sec-mobile\">\r\n                        <div className=\"ab-desc\">\r\n                            <HomeAbout userProfileId={userid} viewType={'mobile_view'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='middleMainSec'>\r\n                    <div className='middleSection hide-mobile'>\r\n                        <div className='middleSectionInn'>\r\n                            <HomePage userProfileId={userid} />\r\n                            <HomeVideoImage userProfileId={userid}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className='rightSection hide-mobile'>\r\n                        <HomeAudio userProfileId={userid}/>\r\n                    </div>\r\n\r\n                    <div className='vd-img-section'>\r\n                        <Tabs>\r\n                            <TabList>\r\n                                <Tab>Content</Tab>\r\n                                <Tab>Music</Tab>\r\n                            </TabList>\r\n\r\n                            <TabPanel>\r\n                                <HomePage userProfileId={userid} />\r\n                                <HomeVideoImage userProfileId={userid}/>\r\n                            </TabPanel>\r\n                            \r\n                            <TabPanel>\r\n                                <HomeAudio userProfileId={userid}/>\r\n                            </TabPanel>\r\n                        </Tabs> \r\n                    </div>\r\n\r\n                </div>\r\n                \r\n                <Footer userProfileId={userid}/>\r\n            </div>\r\n            )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetailsById: state.authReducer.userDetailsById,\r\n        authuser: state.authReducer.authuser,\r\n    }\r\n}\r\n\r\nconst actionCreators = { StoreMediaShareCount,fetchUser };\r\nexport default connect(mapStateToProps,actionCreators)(UserProfile);\r\n","/home/asus/dapify/src/templates/view/Chat_Inbox/index.js",[],"/home/asus/dapify/src/templates/view/Content/index.js",[],"/home/asus/dapify/src/templates/view/Home/index.js",[],"/home/asus/dapify/src/templates/view/Subscription/index.js",["445","446","447"],"import React,{useState,useEffect} from 'react'\nimport Navbar from '../Navbar';\nimport Footer from '../footer';\nimport HomePage from '../Home/homePage';\nimport HomeProfile from '../Home/homeProfile';\nimport HomeAbout from '../Home/homeAbout';\nimport HomeAudio from '../Home/homeAudio';\nimport { useSelector } from \"react-redux\"; \nimport SubscriptionDetails from './SubscriptionDetails';\nimport { useParams } from \"react-router-dom\";\nimport { RedirectModal } from '../../../utils/errors';\n\nfunction Subscription(props) {\n    const { userDetailsById} = useSelector((state) => state.authReducer);\n    const [Subsc_UserId,setSubsc_UserId] = useState('');\n    const params = useParams();\n    const [modalStatus,setmodalStatus] = useState(false);\n\n    useEffect(() => {\n\n        if(params.subscibe_user_id)\n        {\n            setSubsc_UserId(params.subscibe_user_id) \n        }\n\n    },[]);\n\n    useEffect(() => {\n       \n        if(modalStatus === false){\n            \n            if(userDetailsById?.user_active === false )\n            {   \n                setmodalStatus(true);\n                RedirectModal('The user account has been disabled by an administrator.');\n            }\n        }\n        \n    },[userDetailsById]);\n\n    return (\n        <div className='main-page-wrapper'>\n            <Navbar />\n            {userDetailsById?.user_active === true &&\n            (\n            <div className='middleMainSection'>\n\n                <div className='topHomeProfile'>\n                    <div className='middleSection'>\n                        <div className='middleSectionInn'>\n                            <HomeProfile props={props} userProfileId={Subsc_UserId}/>\n                        </div>\n                    </div>\n                    <div className='right-top-box hide-mobile'>\n                        <div className=\"ab-desc\">\n                            <HomeAbout userProfileId={Subsc_UserId}/>\n                        </div>\n                    </div>\n                    <div className=\"about-sec-mobile\">\n                        <div className=\"ab-desc\">\n                            <HomeAbout viewType={'mobile_view'} userProfileId={Subsc_UserId}/>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='middleMainSec'>\n                    <div className='middleSection'>\n                        <div className='middleSectionInn'>\n                            {/* <HomePage userProfileId={Subsc_UserId}/> */}\n                            <SubscriptionDetails Subsc_UserId={Subsc_UserId} />\n                        </div>\n                    </div>\n                    <div className='rightSection hide-mobile'>\n                        <HomeAudio userProfileId={params.subscibe_user_id}/>\n                    </div>\n                </div>\n\n                <Footer userProfileId={Subsc_UserId}/>\n            </div>\n            )}\n            \n        </div>\n    )\n}\n\nexport default Subscription;\n\n","/home/asus/dapify/src/templates/view/Payment/index.js",["448"],"import React, { useState,useEffect } from 'react'\nimport { StripeProvider, Elements } from 'react-stripe-elements'\nimport CheckoutForm from './CheckoutForm';\n\nfunction Payment(props) {\n  const [CheckoutData,setCheckoutData] = useState('');\n  console.log('propspayment',props)\n  useEffect(() => {\n   if(props.location !== undefined)\n   {\n      if(props.location.state !== undefined){\n        setCheckoutData(props.location);\n      }else{\n        props.history.push('/dashboard');\n      }\n   }else{\n    props.history.push('/dashboard'); \n   \n   }\n    \n  },[]);\n\n  useEffect(() => {\n   \n   },[CheckoutData]);\n\n  return (\n       \n    \n  \n    <StripeProvider apiKey=\"pk_test_YsxosxluJOFApzTGLBBXiy0O00UEOtWzAC\">\n      <Elements>\n        <CheckoutForm props={props} checkoutData={CheckoutData}/>\n      </Elements>\n    </StripeProvider>\n\n  );\n};\n\nexport default Payment;","/home/asus/dapify/src/templates/view/Signup/index.js",["449","450","451","452","453"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from 'react-hook-form';\nimport { Link } from \"react-router-dom\";\nimport * as moment from 'moment';\nimport { Button } from '@material-ui/core'\nimport { DateDropDown, MonthDropDown, YearDropDown } from '../../components/calendar_date';\n//images\nimport user_img from '../../../assets/images/dummy_user.png';\nimport logo_img from '../../../assets/images/Logo.svg';\nimport arrow_left_img from '../../../assets/images/Arrow-Left.svg';\nimport calendar_img from '../../../assets/images/Calendar.png';\nimport black_menu_icon from '../../../assets/images/black-menu-icon.png';\n// Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { register as userSignup } from \"../../../Redux/actions/auth-actions\";\nimport eye_img from '../../../assets/images/eye.png';\nimport eye_slash_img from '../../../assets/images/eyeslash.png';\nimport validator from 'validator'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst SignUp = (props, { history }) => {\n  const { registers } = useSelector((state) => state.authReducer);\n  const [UserImage, setUserImage] = useState(null);\n  const [UserViewImage, setUserViewImage] = useState(user_img);\n  const [imgError, setimgError] = useState(null);\n  const [bday_set, setBDay] = useState('');\n  const [bmonth_set, setBMonth] = useState('');\n  const [byear_set, setBYear] = useState('');\n  const [passwordShown, setPasswordShown] = useState(false);\n  const [newpasswordShown, setNewPasswordShown] = useState(false);\n  // validation\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({\n    mode: \"onChange\",\n  });\n\n  const iconRemove = {\n    backgroundImage: 'none',\n  }\n  const iconAdd = {\n    backgroundImage: '',\n  }\n\n  const user_password = useRef({});\n  user_password.current = watch(\"password\", \"\");\n\n  const handleChange = (e) => {\n    const imageFile = e.target.files[0];\n    if (imageFile) {\n      setUserImage(e.target.files[0]);\n      setUserViewImage(URL.createObjectURL(e.target.files[0]));\n      setimgError(null);\n    }\n  }\n\n  const togglePassword = (pass_type) => {\n    if (pass_type === 'pass') {\n      setPasswordShown(!passwordShown);\n    }\n    if (pass_type === 'new_pass') {\n      setNewPasswordShown(!newpasswordShown);\n    }\n  }\n\n\n  // age validation\n  const isAgeGreater = (birth_year) => {\n\n    var age = 0;\n    var currentDate = new Date();\n    var currentYear = currentDate.getFullYear();\n    age = currentYear - birth_year;\n    if (age > 14) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  const emailValidation = (email) => {\n    if (validator.isEmail(email)) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  const onSubmit = async (event) => {\n    if (UserImage === null) {\n      setimgError('Please select image.');\n      return false;\n    } else {\n\n      const birthdate = moment(event.birth_month + '/' + event.birth_day + '/' + event.birth_year).format('MM/DD/YYYY');\n      const data = {\n        email: event.email,\n        password: event.password,\n        //  user_type: event.user_type,\n        username: event.user_name,\n        user_image: UserImage,\n        dob: birthdate,//new Date(birthdate).toLocaleDateString(),\n        privacy_policy: event.privacyPolicy === true ? 'yes' : '',\n        terms_condition: event.termsAndCondition === true ? 'yes' : '',\n\n      };\n      await props.register(data, props.history);\n    }\n  };\n\n  const validateUser = (username) => {\n    let isValid = true;\n    var regex = /^[A-Za-z0-9 ]+$/\n    var wSpace = /\\s/\n\n    let isValidW = wSpace.test(username);\n\n    isValid = regex.test(username);\n    if (!isValid) {\n      return false;\n    } else {\n      if (isValidW) {\n        return false;\n      }\n      else {\n        return true;\n      }\n    }\n  }\n\n  return (\n\n    <div className='main-page-wrapper'>\n      <div className='middleSection-login-page signup_site_page'>\n\n        <div className=\"square-menu-mobile\">\n          <img src={black_menu_icon} alt='' />\n        </div>\n\n        <div className='middleSection-login-form'>\n          <div className=\"sign-form-cont\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"login-section\">\n                <div className=\"logo\">\n                  <img src={logo_img} alt='' />\n                </div>\n\n                <div className=\"sec-head\">CREATE AN ACCOUNT</div>\n\n                <div className=\"user-img\">\n                  <img src={UserViewImage} alt='' />\n                </div>\n\n                <div className=\"change-photo\">\n                  <div className=\"change-photo-inner\">\n                    <label for=\"file\">change-photo</label>\n                    <input className=\"foo\" name=\"user_image\" type=\"file\" id=\"file\" onChange={handleChange} />\n                  </div>\n                  <div className=\"make-sure\">Make sure you upload a Picture to get started!</div>\n                </div>\n                {imgError && (\n                  <p className=\"errMsg\">{imgError}</p>\n                )}\n\n                <div className=\"login-form\">\n\n                  <div className=\"form-row1\">\n                    <label>USER NAME</label>\n                    <input type=\"text\" className=\"form-control log-inp\" name=\"user_name\" {...register(\"user_name\", {\n                      required: true,\n                      maxLength: 30,\n                      validate: validateUser\n                    })} />\n                    {errors?.user_name?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                    {errors?.user_name?.type === \"maxLength\" && (\n                      <p className=\"errMsg\">\n                        User name cannot exceed 30 characters\n                      </p>\n                    )}\n                     {errors?.user_name?.type === \"validate\" && (\n                      <p className=\"errMsg\">\n                        User name cannot contain special characters(!,@$,%,_) or blank space\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"form-row1\">\n                    <label>EMAIL</label>\n                    <input type=\"email\" className=\"form-control log-inp\" name=\"email\" {...register(\"email\", {\n                      required: true,\n                      // pattern:\n                      //   /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      validate: emailValidation\n                    })} />\n                    {errors?.email?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                    {/* {errors?.email?.type === \"pattern\" && (\n                      <p className=\"errMsg\">Email should be valid</p>\n                    )} */}\n                    {errors?.email?.type === \"validate\" && (\n                      <p className=\"errMsg\">Email should be valid</p>\n                    )}\n                  </div>\n\n                  <div className=\"form-row1\">\n                    <label>PASSWORD</label>\n                    <input type={passwordShown ? \"text\" : \"password\"} className=\"form-control log-inp\" name=\"password\" {...register(\"password\", {\n                      required: true,\n                      pattern:\n                        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/i,\n                    })} />\n                    <div onClick={() => togglePassword('pass')} className=\"rd-img\"><img src={passwordShown ? eye_img : eye_slash_img} alt='' /></div>\n                    {errors?.password?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                    {errors?.password?.type === \"pattern\" && (\n                      <p className=\"errMsg\">Password should be strong</p>\n                    )}\n\n                  </div>\n\n                  <div className=\"form-row1\">\n                    <label>CREATE PASSWORD</label>\n                    <input type={newpasswordShown ? \"text\" : \"password\"} className=\"form-control log-inp\" name=\"create_password\" {...register(\"create_password\", {\n                      required: true,\n                      validate: (value) => value === user_password.current,\n                    })} />\n                    <div onClick={() => togglePassword('new_pass')} className=\"rd-img\"><img src={newpasswordShown ? eye_img : eye_slash_img} alt='' /></div>\n                    {errors?.create_password?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                    {errors?.create_password?.type === \"validate\" && (\n                      <p className=\"errMsg\">Create passwords do not match</p>\n                    )}\n                  </div>\n\n                  {/* <div className=\"form-row1\">\n                    <label>User Type</label>\n                    <select className=\"form-control log-inp\" name=\"user_type\"  {...register(\"user_type\", { required: true, })}>\n                      <option value=\"Creator\">Creator</option>\n                      <option value=\"Subscriber\">Subscriber</option>\n                    </select>\n                    {errors?.user_type?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                    <div className=\"lm\">Learn more about Creators and Supporters</div>\n                  </div> */}\n                </div>\n\n                <div className=\"your-birth\">\n                  <div className=\"your-bith-head\">\n                    <img src={calendar_img} alt='' /> your birthday\n                  </div>\n\n                  <div className=\"your-birth-time\">\n                    <select style={bday_set !== '' ? iconRemove : iconAdd} onClick={e => setBDay(e.target.value)} name=\"birth_day\" class=\"form-control log-inp\"  {...register(\"birth_day\", { required: true, })}>\n                      <DateDropDown />\n                    </select>\n\n                    <select style={bmonth_set !== '' ? iconRemove : iconAdd} onClick={e => setBMonth(e.target.value)} name=\"birth_month\" class=\"form-control log-inp\" {...register(\"birth_month\", { required: true, })}>\n                      <MonthDropDown />\n                    </select>\n\n                    <select style={byear_set !== '' ? iconRemove : iconAdd} onClick={e => setBYear(e.target.value)} name=\"birth_year\" class=\"form-control log-inp\" {...register(\"birth_year\", { required: true, validate: isAgeGreater })}>\n                      <YearDropDown />\n                    </select>\n                  </div>\n\n                  {(errors?.birth_day?.type === \"required\" || errors?.birth_year?.type === \"required\" || errors?.birth_month?.type === \"required\") && <p className=\"errMsg\">This field is required</p>}\n                  {errors?.birth_year?.type === \"validate\" &&\n                    <p className=\"errMsg\">You must be 14 years old or above.</p>\n                  }\n                </div>\n\n                <div className=\"legal-content\">\n                  <h3>LEGAL CONSENT</h3>\n                  <p>I have read and agree to the following</p>\n                </div>\n\n                <div className=\"legal-text\">\n                  <p>\n                    <a>Terms and Conditions</a>\n                    <label className=\"cus-check\">\n                      <input id=\"termsAndCondition\" type=\"checkbox\" name=\"termsAndCondition\"\n                        {...register('termsAndCondition', {\n                          required: true,\n                        })} />\n                      <span className=\"checkmark\"></span>\n                    </label>\n                    {errors?.termsAndCondition?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                  </p>\n\n                  <p>\n                    <a>Privacy Policy</a>\n                    <label className=\"cus-check\">\n                      <input id=\"privacyPolicy\" type=\"checkbox\" name=\"privacyPolicy\"\n                        {...register('privacyPolicy', {\n                          required: true,\n                        })} />\n                      <span className=\"checkmark\"></span>\n                    </label>\n                    {errors?.privacyPolicy?.type === \"required\" && (\n                      <p className=\"errMsg\">This field is required</p>\n                    )}\n                  </p>\n                </div>\n\n                <div className=\"login-via create-ac\">\n                  <Button type=\"submit\" className=\"log-btn btn\">\n                    Create an account\n                  </Button>\n                  <div className=\"ald\">Already have an account?  <Link to=\"/\">Login</Link></div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\n// Redux connect\nconst mapStateToProps = (state) => {\n  return {\n    register: state.authReducer.register,\n  }\n}\nconst actionCreators = {\n  register: userSignup,\n};\n\nexport default connect(mapStateToProps, actionCreators)(SignUp);\n\n","/home/asus/dapify/src/templates/view/Login/index.js",["454","455","456","457"],"import React,{useEffect, useState} from \"react\";\nimport { useForm } from 'react-hook-form';\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core'\n//image\nimport logo_img from '../../../assets/images/Logo.svg';\nimport google_icon from '../../../assets/images/flat-color-icons_google.svg';\nimport apple_icon from '../../../assets/images/n-apple-logo.svg';\nimport facebook_icon from '../../../assets/images/logos_facebook.svg';\nimport black_menu_icon from '../../../assets/images/black-menu-icon.png';\n// Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { login, socialLogin,fetchUser} from \"../../../Redux/actions/auth-actions\";\n\n\nconst LogIn = (props,{history} ) => {\n\n  const { profile_url,authuser,loggedIn} = useSelector((state) => state.authReducer);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: \"onChange\",\n  });\n\n  const onSubmit = async (event) => {\n    await props.login(event.email, event.password,props.history,profile_url);\n  };\n\n  const onSocialLogin = async (event) => {\n    await props.socialLogin(event, props.history,profile_url);\n  }\n\n  const createAccount = () => {\n    props.history.push('/signup');\n  }\n\n  return (\n\n    <div className='main-page-wrapper'>\n\n        <div className='middleSection-login-page login_site_page'>\n          <div className=\"square-menu-mobile\">\n            <img src={black_menu_icon} alt='' />\n          </div>\n          <div className='middleSection-login-form'>\n            <div className=\"sign-form-cont\">\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"login-section\">\n                  <div className=\"logo\">\n                    <img src={logo_img} alt='' />\n                  </div>\n                  <div className=\"login-form\">\n                    <h2>Login to continue</h2>\n                    <div className=\"form-row1\">\n                      <label>email</label>\n                      <input type=\"email\" name=\"email\" className=\"form-control log-inp\" {...register(\"email\", {\n                        required: true,\n                        pattern:\n                          /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      })} />\n                      {errors?.email?.type === \"required\" && (\n                        <p className=\"errMsg\">This field is required</p>\n                      )}\n                      {errors?.email?.type === \"pattern\" && (\n                        <p className=\"errMsg\">Email should be valid</p>\n                      )}\n                    </div>\n                    <div className=\"form-row1\">\n                      <label>Password</label>\n                      <input type=\"password\" name=\"password\" className=\"form-control log-inp\" {...register(\"password\", {\n                        required: true,\n                      })} />\n                      {errors?.password?.type === \"required\" && (\n                        <p className=\"errMsg\">This field is required</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"login-via\">\n                    <h2>Or Login Via</h2>\n                    <ul>\n                      <li onClick={e => onSocialLogin('google')}><img src={google_icon} alt='' /></li>\n                      <li><img src={apple_icon} alt='' /></li>\n                      {/* <li><img src={facebook_icon} alt='' /></li> */}\n                      <li onClick={e => onSocialLogin('facebook')}><img src={facebook_icon} alt='' /></li> \n                    </ul>\n                    <Button  type=\"submit\" className=\"log-btn logBtn btn\">LOGIN</Button>\n                    <div className=\"forgot-pass\"> <Link to=\"/forgot_password\">Forgot password?</Link></div>\n                    <Button  type=\"button\" onClick={e => createAccount()} className=\"log-btn create-acc btn\">Create an account</Button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n\n    </div>\n  );\n};\n\nconst mapState = (state) => ({\n\n  authuser: state.authReducer.authuser,\n  loggedIn: state.authReducer.loggedIn,\n  \n});\nconst actionCreators = { login, socialLogin,fetchUser };\nexport default connect(mapState, actionCreators)(LogIn);\n\n","/home/asus/dapify/src/templates/view/ForgotPassword/index.js",[],"/home/asus/dapify/src/templates/view/Settings/index.js",[],"/home/asus/dapify/src/templates/view/Content_Bookmark/index.js",["458","459","460"],"import React,{useEffect,useState} from 'react'\nimport Navbar from '../Navbar';\nimport { Link } from \"react-router-dom\";\nimport UserProfile from '../../components/userProfile';\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport { getUserBookmarkMusic } from \"../../../Redux/actions/media-actions\";\nimport { useSelector, connect } from \"react-redux\";\nimport MusicComponent from '../../components/musicComponent';\nimport Loader from '../../../utils/Loader';\nimport { Button, CircularProgress } from '@material-ui/core'\nimport Footer from '../footer';\n\nfunction ContentBookmark(props, { history }) {\n\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { user_music_bookmark,music_content_bookmark,loading,MusicBookmarkTotal } = useSelector((state) => state.mediaReducer);\n    const [isLoader, setLoader] = useState(false);\n    const [initialLimit, setInitialLimit] = useState(6);\n    const [dataLimit, setDataLimit] = useState(6);\n\n    useEffect(() => {\n        async function fetchdata(){\n            if(authuser)\n                await props.getUserBookmarkMusic(authuser.uid,dataLimit);\n                setLoader(loading);\n                \n            }\n        fetchdata();\n\n    },[authuser.uid,music_content_bookmark,dataLimit]);\n\n    const handleNext = () =>  {\n        var new_limit = dataLimit + initialLimit;\n        setDataLimit(new_limit);\n    }; \n    console.log('user_music_bookmark',user_music_bookmark);\n    console.log('music_content_bookmark',music_content_bookmark);\n    console.log('MusicBookmarkTotal',MusicBookmarkTotal);\n    return (\n        <div className='main-page-wrapper'>\n            {isLoader ? <Loader isLoader={true} /> : null} \n            <Navbar />\n\n            <div className='middleMainSection'>\n                <div className=\"mob-secion add-content-header\">\n                    <div className=\"mobile-top-logo\">\n                        <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                        <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                        <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                    </div>\n                </div>\n                \n                <div className='middleSection-add-content'>\n                    <div className=\"addContentSec saves-page-main\">\n                        <UserProfile />\n\n                        <div className=\"saves-post-sec\">\n                            <div className=\"saves-post-head\">Saves</div>\n                            <div className='saves-post-items'>\n                                {\n                               \n                                user_music_bookmark.length !== 0 ? (\n                                \n                                    user_music_bookmark.map((usrval,i) => (\n                                        usrval &&\n                                        (\n                                            Object.keys(usrval).map((key, index) => (\n                                                \n\n                                                <div className={`post-item ${usrval[key].postedById !== userDetailsById.uid ? usrval[key].public === 'true' ? 'media-unlock' : usrval[key].viewPermission === true ? 'media-unlock' : '' : 'media-unlock'}`}>\n                                                    <MusicComponent  type=\"bookmark\" mediaId={usrval[key].id} uid={authuser.uid} mediaData={usrval[key]} /> \n                                                </div>\n                                            ))\n                                        )\n                                    ))\n                                  \n                                    ):<div className=\"middleSection-add-content saves-post-sec\"> <p className='dataNfound'>There's no bookmarks available...</p> </div>\n                                } \n                            </div>\n                            {   user_music_bookmark && (\n                                user_music_bookmark.length  < MusicBookmarkTotal  ?\n                                <div className='LoadMore-btn'>\n                                <Button className=\"btn\" type=\"button\" onClick={handleNext} >\n                                    Load More...\n                                    {/* <CircularProgress /> */}\n                                </Button></div> : '' )\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                <Footer />\n\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,    \n        music_content_bookmark: state.mediaReducer.music_content_bookmark,   \n        loader: state.mediaReducer.loader, \n        user_music_bookmark: state.mediaReducer.user_music_bookmark, \n        MusicBookmarkTotal: state.mediaReducer.MusicBookmarkTotal,\n\n    }\n}\n\nconst actionCreators = {getUserBookmarkMusic };\nexport default connect(mapStateToProps, actionCreators)(ContentBookmark);\n\n\n","/home/asus/dapify/src/templates/view/Audience/index.js",["461","462"],"import React, { useState, useEffect } from 'react'\nimport Navbar from '../Navbar';\nimport UserProfile from '../../components/userProfile';\nimport Footer from '../footer';\nimport user_img from '../../../assets/images/dummy_user.png';\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport { Link } from \"react-router-dom\";\n\n//Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getAudience } from \"../../../Redux/actions/subscriber-actions\";\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport EncryptProfileUrl from \"../../components/encryptProfileUrl\";\nimport Loader from './../../../utils/Loader';\n\nfunction Audience(props, { history }) {\n    console.log('props-----', props);\n\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { audienceData, loading } = useSelector((state) => state.subscriberReducer);\n    const [audienceKeyword, setAudienceKeyword] = useState('');\n    const [isLoader, setLoader] = useState(false);\n\n    useEffect(() => {\n        const data = {\n            user_id: authuser.uid,\n            type: 'all'\n        }\n        props.getUserProfileById(authuser.uid);\n        props.getAudience(data);\n    }, [authuser.uid]);\n\n\n    useEffect(() => {\n        setLoader(loading);\n    }, [loading]);\n    console.log('audienceData=====', audienceData);\n\n\n    const handleSearch = (e) => {\n\n        setAudienceKeyword(e.target.value);\n        if (e.target.value.length >= 3) {\n            const data = {\n                user_id: authuser.uid,\n                type: 'search',\n                search_keyword: e.target.value,\n            }\n            props.getAudience(data);\n        }\n        if (e.target.value.length === 0) {\n            const data = {\n                user_id: authuser.uid,\n                type: 'all',\n            }\n            props.getAudience(data);\n        }\n    }\n\n    const handleClick = (id) => {\n\n        if (id) {\n            var profileUrl = EncryptProfileUrl(id);\n            //props.history.push(profileUrl);\n            window.location = profileUrl;\n        }\n    }\n\n    console.log('audienceDataloading', loading);\n    return (\n        <div className='main-page-wrapper'>\n            <Navbar />\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <div className='middleMainSection'>\n\n                <div className=\"mob-secion add-content-header\">\n                    <div className=\"mobile-top-logo\">\n                        <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                        <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                        <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                    </div>\n                </div>\n\n                <div className='middleSection-add-content1'>\n                    <div className=\"addContentSec pageAudience\">\n                        <UserProfile />\n\n                        <div className=\"audience-view-page\">\n                            {audienceData.length > 0 ? (\n                                <React.Fragment>\n                                    <div className=\"search-user\">\n                                        <label>Search User</label>\n                                        <input type=\"text\" placeholder=\"\" value={audienceKeyword} name=\"audience_search\" onChange={handleSearch} />\n                                    </div>\n                                    <div className=\"audience-view-users\">\n                                        <ul>\n                                            {\n                                                audienceData.map((audienceContent, i) => (\n\n                                                    <li>\n                                                        <div className=\"user-list-item\" onClick={() => handleClick(audienceContent.aud_id)}>\n                                                            <div className=\"user-item-img\">\n                                                                <span><img src={audienceContent.aud_profile ? audienceContent.aud_profile : user_img} alt='' /></span>\n                                                            </div>\n                                                            <div className=\"user-item-name\">{audienceContent.aud_name}</div>\n                                                        </div>\n                                                    </li>\n                                                ))\n                                            }\n\n                                        </ul>\n                                    </div>\n                                </React.Fragment>\n                            ) : <p className='dataNfound'>There's no audience available...</p>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n\n                <Footer />\n\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        audienceData: state.subscriberReducer.audienceData,\n        loading: state.subscriberReducer.loading,\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n    }\n}\n\nconst actionCreators = { getUserProfileById, fetchUser, getAudience };\nexport default connect(mapStateToProps, actionCreators)(Audience);\n\n","/home/asus/dapify/src/templates/view/Notifications/index.js",["463","464","465"],"import React,{useEffect} from 'react'\r\nimport Footer from '../footer';\r\nimport Navbar from '../Navbar';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport UserProfile from '../../components/userProfile';\r\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\r\nimport {getUserSubscriberCount} from \"../../../Redux/actions/subscriber-actions\";\r\nimport { useSelector, connect } from \"react-redux\"; \r\nimport NotificationsView from './Notification_view';\r\nimport square_img from '../../../assets/images/Union.svg';\r\nimport mobile_logo from '../../../assets/images/logo.png';\r\nimport add_content from '../../../assets/images/plus-mobile.svg';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Notifications(props) {\r\n    const { subscriberCount} = useSelector((state) => state.subscriberReducer);\r\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\r\n\r\n    useEffect(() => {\r\n        async function fetchdata(){\r\n            await props.getUserProfileById(authuser.uid); \r\n            const data = {\r\n                user_id : authuser.uid\r\n            }\r\n            await props.getUserSubscriberCount(data);\r\n        }\r\n        fetchdata();\r\n        \r\n    },[authuser.uid]);\r\n\r\n    console.log('subscriberCount100',subscriberCount);\r\n    return (\r\n       \r\n        <div className='main-page-wrapper'>\r\n        <Navbar/>\r\n\r\n        <div className='middleMainSection'>\r\n\r\n            <div className=\"mob-secion add-content-header\"> \r\n                <div className=\"mobile-top-logo\">\r\n                    <div className=\"left-square\"><img src={square_img} alt='' /></div>\r\n                    <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\r\n                    <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='middleSection-add-notifictions'>\r\n                <div className=\"addContentSec\">\r\n                    <UserProfile/>\r\n\r\n                    <div className=\"notifictions-view-page\">\r\n                        <div className=\"notifictions-head\">\r\n                            <h2>{subscriberCount}</h2>\r\n                            <p>SUBSCRIBERS</p>\r\n                        </div>\r\n                        <NotificationsView historyprops={props}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer/>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subscriberCount: state.subscriberReducer.subscriberCount,\r\n        userDetailsById: state.authReducer.userDetailsById,\r\n        authuser: state.authReducer.authuser,\r\n    }\r\n}\r\n\r\nconst actionCreators = {getUserProfileById,fetchUser,getUserSubscriberCount };\r\nexport default connect(mapStateToProps, actionCreators)(Notifications);\r\n\r\n","/home/asus/dapify/src/templates/view/Insights/index.js",["466","467","468","469","470"],"import React,{useEffect,useState} from 'react'\nimport Navbar from '../Navbar';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Tabs, Tab, Accordion } from 'react-bootstrap'\nimport UserProfile from '../../components/userProfile';\nimport { useSelector, connect } from \"react-redux\"; \nimport * as moment from 'moment';\nimport FacebookConnect from './facebookConnect';\nimport InsightsView from  './insightsView';\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Insights(props) {\n\n   \n    const [isLoader, setLoader] = useState(true);\n    const [insightUserStatus,setInsightUserStatus] = useState(false);\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\n    const {InstaInsightsUser} = useSelector((state) => state.insightsInstgramReducer);\n\n    useEffect(() => {\n        console.log('instauser',userDetailsById);\n        if(userDetailsById?.InsightsTokenData)\n        {\n            var newDate = new Date();\n            var newDateCheck = moment(newDate).format('MM/DD/YYYY HH:mm:ss');\n            if (userDetailsById?.InsightsTokenData.date > newDateCheck) {\n                if(userDetailsById?.InsightsUserData){\n                    if(userDetailsById.InsightsUserData !== \"\"){\n                        setInsightUserStatus(true);\n                    }\n                }\n            }\n        }\n         \n    },[userDetailsById,InstaInsightsUser]);\n\n    useEffect(() => {\n        if(InstaInsightsUser === true){\n            setInsightUserStatus(true);\n        }\n       \n        setLoader(false);\n         \n    },[insightUserStatus,InstaInsightsUser]);\n   console.log('InstaInsightsUser===p',InstaInsightsUser);\n\n    return (\n        \n        <div className='main-page-wrapper'>\n            {isLoader ? <Loader isLoader={true} /> : null}\n        <Navbar/>\n       \n        <div className='middleMainSection'>\n\n            <div className=\"mob-secion add-content-header\"> \n                <div className=\"mobile-top-logo\">\n                    <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                    <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                    <div className=\"mobile-add-content\"> <Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                </div>\n            </div>\n\n            <div className='middleSection-add-insights'>\n                <div className=\"addContentSec\">\n                <UserProfile/>\n\n                    <div className=\"insights-view-page\">\n                    {\n                        insightUserStatus === true ?\n                        <InsightsView/>\n                         : \n                        <FacebookConnect/>\n                    }\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        InstaInsightsUser:state.insightsInstgramReducer,\n    }\n}\n\n\nconst actionCreators = {  getUserProfileById,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(Insights);\n\n","/home/asus/dapify/src/Redux/reducers/index.js",[],"/home/asus/dapify/src/Redux/auth-service.js",[],"/home/asus/dapify/src/Redux/actions/type.js",[],"/home/asus/dapify/src/firebase.js",[],"/home/asus/dapify/src/Redux/actions/api_url.js",[],"/home/asus/dapify/src/templates/view/Navbar.js",["471","472","473","474"],"import React, { useEffect } from 'react';\r\nimport useState from 'react-usestateref'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Navhead from './Navhead';\r\nimport { getUserProfileById, fetchUser } from \"../../Redux/actions/auth-actions\";\r\nimport { getUnreadMessageCount } from \"../../Redux/actions/chat-actions\";\r\nimport { getUnreadNotificationCount } from \"../../Redux/actions/notification-actions\";\r\nimport { useSelector, connect } from \"react-redux\";\r\nimport dummy_user from '../../assets/images/dummy_user.png';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n\r\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\r\n    const { UserUnreadMSGCount, messageList, listenerData } = useSelector((state) => state.chatReducer);\r\n    const { UserUnreadNotificationCount, notification_data } = useSelector((state) => state.notificationsReducer);\r\n    const location_back = useLocation();\r\n    const [unreadCount, setUnreadCount, UnreadCountRef] = useState(0);\r\n    // const [UnreadNotificationCount,setUnreadNotificationCount ,UnreadNotificationCountRef ] = useState(0);\r\n    const [UnreadNotificationCount, setUnreadNotificationCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (listenerData !== null) {\r\n            listenerData.off('child_added');\r\n            console.log('check first');\r\n        }\r\n\r\n        async function fetchdata() {\r\n            await props.getUserProfileById(authuser.uid);\r\n            const data = {\r\n                uid: authuser.uid,\r\n            }\r\n            await props.getUnreadMessageCount(data);\r\n            await props.getUnreadNotificationCount(data);\r\n        }\r\n        fetchdata();\r\n\r\n    }, [authuser.uid, notification_data]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"21212\", UserUnreadNotificationCount);\r\n        setUnreadNotificationCount(UserUnreadNotificationCount);\r\n    }, [UserUnreadNotificationCount, notification_data]);\r\n\r\n    useEffect(() => {\r\n        setUnreadCount(UserUnreadMSGCount);\r\n\r\n        // return () => {\r\n        //     // For Firebase-Listener-OFF\r\n        //     const listenerChatId = localStorage.getItem(\"lestener_Chat_id\");\r\n        //     // console.log(\"LOCALEEEEEEEE\", listenerChatId);\r\n            \r\n        //     var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\r\n            \r\n        //         (listenerChatId !== null) \r\n        //         ? CurrenmsgrefListner.child(listenerChatId).off('child_removed') \r\n        //         : CurrenmsgrefListner.child(listenerChatId).on('child_added')\r\n            \r\n        //     // if (listenerChatId !== null) {\r\n        //     //     // CurrenmsgrefListner.child(listenerChatId).off('child_added');\r\n        //     //     CurrenmsgrefListner.child(listenerChatId).off('child_removed');\r\n        //     // }\r\n        // }\r\n        \r\n    }, [UserUnreadMSGCount, setUnreadCount]);\r\n    \r\n    console.log('--UserUnreadMSGCount', UserUnreadMSGCount);\r\n\r\n    return (\r\n\r\n        <div className='sidebar'>\r\n            <Navhead />\r\n            <div className='main-menus'>\r\n                <div className=\"menus\">\r\n                    <ul>\r\n                        <li className=\"nav-item home-icon\">\r\n                            <NavLink className=\"nav-link\" to='/dashboard'><img src={require('../../assets/images/icon01.svg').default} alt='' /> <span>HOME</span></NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item notification-icon\">\r\n                            <NavLink className=\"nav-link\" to='/notifications'><img src={require('../../assets/images/icon02.svg').default} alt='' /> <span>Notifications</span> <span className=\"n-num\">{UnreadNotificationCount > 0 ? UnreadNotificationCount : 0}</span></NavLink>\r\n\r\n                        </li>\r\n                        <li className=\"nav-item insights-icon\">\r\n                            <NavLink className=\"nav-link\" to='/insights'><img src={require('../../assets/images/icon03.svg').default} alt='' /> <span>insights</span></NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item inbox-icon\">\r\n\r\n                            {/* <NavLink  className=\"nav-link\" to='/inbox'><img src={require('../../assets/images/icon04.svg').default} alt='' /><span>inbox</span>{UserUnreadMSGCount > 0 && ( <span className=\"n-num\">{UserUnreadMSGCount}</span>)}</NavLink> */}\r\n                            {unreadCount === 0 || window.location.pathname === '/inbox' ?\r\n                                <NavLink className=\"nav-link\" to='/inbox'><img src={require('../../assets/images/icon04.svg').default} alt='' /><span>inbox</span></NavLink>\r\n                                : <NavLink className=\"nav-link\" to='/inbox'><img src={require('../../assets/images/icon04.svg').default} alt='' /><span>inbox</span><span className=\"n-num\">{unreadCount}</span></NavLink>\r\n                            }\r\n                        </li>\r\n                        <li className=\"nav-item audience-icon\">\r\n                            <NavLink className=\"nav-link\" to='/audience'><img src={require('../../assets/images/icon05.svg').default} alt='' /> <span>Audience</span></NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item home-icon\">\r\n\r\n                            <NavLink className=\"nav-link\" to='/saves'><img src={require('../../assets/images/save_icon.svg').default} alt='' /> <span>Saves</span></NavLink>\r\n\r\n                        </li>\r\n                        <li className=\"nav-item settings-icon\">\r\n                            <NavLink exact className=\"nav-link\" to={{\r\n                                pathname: \"/settings\",\r\n                                prevPath: location_back.pathname,\r\n                            }} ><img src={require('../../assets/images/icon06.svg').default} alt='' /> <span>settings</span></NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item profile-icon\">\r\n                            <NavLink exact className=\"nav-link\" to={{\r\n                                pathname: \"/settings\",\r\n                                prevPath: location_back.pathname,\r\n                            }}><img src={userDetailsById?.avatarURL ? userDetailsById.avatarURL : dummy_user} alt='' /> <span>Profile</span></NavLink>\r\n                        </li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetailsById: state.authReducer.userDetailsById,\r\n        authuser: state.authReducer.authuser,\r\n        UserUnreadMSGCount: state.chatReducer.UserUnreadMSGCount,\r\n        UserUnreadNotificationCount: state.notificationsReducer.UserUnreadNotificationCount,\r\n        notification_data: state.notificationsReducer.notification_data,\r\n        messageList: state.chatReducer.messageList,\r\n        listenerData: state.chatReducer.listenerData,\r\n    }\r\n}\r\n\r\nconst actionCreators = { getUserProfileById, fetchUser, getUnreadMessageCount, getUnreadNotificationCount };\r\nexport default connect(mapStateToProps, actionCreators)(Navbar);","/home/asus/dapify/src/templates/view/footer.js",[],"/home/asus/dapify/src/Redux/actions/media-actions.js",["475","476","477","478","479","480"],"import {\n  POST_MEDIA_CONTENT_REQUEST, GET_MEDIA_CONTENT_SUCCESS, GET_MEDIA_CONTENT_FAILURE,\n  POST_USER_MEDIA_REQUEST, GET_USER_MEDIA_SUCCESS, GET_USER_MEDIA_FAILURE,\n  POST_USER_MEDIA_MUSIC_REQUEST, GET_USER_MEDIA_MUSIC_SUCCESS, GET_USER_MEDIA_MUSIC_FAILURE,\n  POST_Like_MEDIA_MUSIC_REQUEST, GET_Like_MEDIA_MUSIC_SUCCESS, GET_Like_MEDIA_MUSIC_FAILURE,\n  //POST_SHARE_MEDIA_MUSIC_REQUEST, GET_SHARE_MEDIA_MUSIC_SUCCESS, GET_SHARE_MEDIA_MUSIC_FAILURE,\n  POST_BOOKMARK_MEDIA_MUSIC_REQUEST, GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, GET_BOOKMARK_MEDIA_MUSIC_FAILURE,\n  POST_USER_BOOKMARK_MUSIC_REQUEST, GET_USER_BOOKMARK_MUSIC_SUCCESS, GET_USER_BOOKMARK_MUSIC_FAILURE,\n  POST_MEDIA_SHARE_COUNT_REQUEST,ADD_MEDIA_SHARE_COUNT_SUCCESS,ADD_MEDIA_SHARE_COUNT_FAILURE,\n  LIKED_NOTIFICATION, POST_CONTENT,\n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\n//import { keyboardControls } from 'react-media-player/lib/utils';\nimport {\n  USER_NOTIFICATION\n\n} from './api_url';\nimport axios from 'axios';\n\n\nexport const addMediaContent = (data, history) => async (dispatch) => {\n  try {\n    if (data.media_content !== '') {\n\n      dispatch({ type: POST_MEDIA_CONTENT_REQUEST, payload: true });\n      const docRef = firebaseConfig.firestore().collection('user_contents').doc()\n      const doc_id = docRef.id;\n\n      var filename = '';\n      var cover_filename = '';\n      var via = '';\n      if (data.media_type === \"image\") {\n        filename = data.uid + '_' + doc_id + '.png';\n      }\n      if (data.media_type === \"video\") {\n        filename = data.uid + '_' + doc_id + '.mp4';\n        via = data.via;\n      }\n      if (data.media_type === \"audio\") {\n        filename = data.uid + '_' + doc_id + '.mp3';\n        if (data.cover_art) {\n          cover_filename = data.uid + '_' + doc_id + '.png';\n        }\n      }\n      var progress = 0;\n      var progress_res = 0;\n      if (via === 'youtube') {\n\n        firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n          caption: data.title,\n          id: doc_id,\n          media_type: data.media_type,\n          media_url: data.media_content,\n          postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          postedById: data.uid,\n          postedByUserName: data.username,\n          public: data.public,\n          userAvatarUrl: data.userAvatarUrl,\n          via: via,\n\n        }).then(async function () {\n          progress = 0;\n          await sendNotificationAllSubscriber(data.uid);\n          dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n          Success('Added Successfully');\n\n\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n        })\n      }\n      else {\n        if (data.media_type === \"audio\") {\n\n          var audstorage = firebaseConfig.storage();\n          var audstorageRef = audstorage.ref();\n          var audiouploadTask = audstorageRef.child('media_contents/' + filename).put(data.media_content)\n          audiouploadTask.on('state_changed', function (snapshot) {\n            progress_res = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            progress = (Math.round(progress_res));\n            dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n            console.log('progress1', progress);\n          }, (err) => {\n            ERROR(err.message);\n            dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: err });\n          }, () => {\n            audiouploadTask.snapshot.ref.getDownloadURL().then(async url => {\n\n              //for audio cover image--------------\n              imageUpload(data.cover_art, doc_id, 'audio_cover_image/', 'user_contents', 'cover_art', cover_filename);\n\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via,\n              })\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: 0 });\n              Success('Added Successfully');\n\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n            })\n          })\n\n        } else {\n\n          var storage = firebaseConfig.storage();\n          var storageRef = storage.ref();\n          var uploadTask = storageRef.child('media_contents/' + filename).put(data.media_content)\n          uploadTask.on('state_changed', function (snapshot) {\n            progress_res = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            progress = (Math.round(progress_res));\n            dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: progress });\n            console.log('progress1', progress);\n          }, (err) => {\n            ERROR(err.message);\n            dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: err });\n          }, () => {\n            uploadTask.snapshot.ref.getDownloadURL().then(async url => {\n\n              firebaseConfig.firestore().collection('user_contents/').doc(doc_id).set({\n                caption: data.title,\n                id: doc_id,\n                media_type: data.media_type,\n                media_url: url,\n                postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                postedById: data.uid,\n                postedByUserName: data.username,\n                public: data.public,\n                userAvatarUrl: data.userAvatarUrl,\n                via: via,\n              })\n              await sendNotificationAllSubscriber(data.uid);\n              dispatch({ type: GET_MEDIA_CONTENT_SUCCESS, payload: 0 });\n              Success('Added Successfully');\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error });\n\n            })\n          })\n        }\n      }\n    }\n    else {\n      dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: 'invalid file' });\n      ERROR('invalid file');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_MEDIA_CONTENT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n\nasync function imageUpload(image, id, folder_name, collection_name, columnname, filename) {\n  try {\n    if (image !== null) {\n      const imagename = filename;\n      var storage = firebaseConfig.storage();\n      var storageRef = storage.ref();\n      storageRef.child(folder_name + imagename).put(image).then(data => {\n        var fileurl = '';\n        data.ref.getDownloadURL().then(url => {\n\n          firebaseConfig.firestore().collection(collection_name).doc(id).update({\n            [columnname]: url,\n          })\n\n        })\n        return fileurl;\n      })\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n// For get user media content \nexport const getUserMediaContent = (user_id, limit) => async dispatch => {\n  try {\n\n\n    dispatch({ type: POST_USER_MEDIA_REQUEST, payload: true });\n    if (user_id) {\n\n      var mediaPost = [];\n      let query = '';\n      var totalrecord = [];\n\n      // for total count----------------------------\n      firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id)\n        .where('media_type', \"in\", [\"image\", \"video\"])\n        .orderBy('postedAt','desc').get().then(function (querySnapshot) {\n          totalrecord = querySnapshot.size;\n        });\n\n      // for load more data---------------------------\n      query = firebaseConfig.firestore().collection('user_contents')\n        .where('postedById', \"==\", user_id)\n        .where('media_type', \"in\", [\"image\", \"video\"])\n        .orderBy('postedAt','desc')\n        .limit(limit);\n\n      query.get().then(snapshot => {\n        snapshot.forEach(doc => {\n\n          mediaPost.push(doc.data());\n\n        })\n        dispatch({ type: GET_USER_MEDIA_SUCCESS, payload: mediaPost, MediaTotal: totalrecord });\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_MEDIA_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_USER_MEDIA_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_MEDIA_FAILURE, payload: error });\n  }\n};\n\nexport const MediaMusicLike = (data) => async dispatch => {\n  try {\n    dispatch({ type: POST_Like_MEDIA_MUSIC_REQUEST, payload: true });\n    if (data.type === 'like') {\n      console.log('likealldata', data);\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({ user_likes: data.user_likes }, { merge: true })\n        .then(async function (docres) {\n\n          if(data.postedUserId !== data.by_id){\n            await sendNotification(data.postedUserId, data.by_id);\n          }\n\n          Success(\"Liked Post Successfully\");\n          dispatch({ type: GET_Like_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n    else {\n\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({ user_likes: data.user_likes })\n        .then(function (docres) {\n\n          Success(\"Unliked Post Successfully\");\n          dispatch({ type: GET_Like_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_Like_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const MediaMusicBookmark = (data) => async dispatch => {\n  try {\n    dispatch({ type: POST_BOOKMARK_MEDIA_MUSIC_REQUEST, payload: true });\n    if (data.type === 'bookmark') {\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).set({ user_bookmark: data.user_bookmark }, { merge: true })\n        .then(function (docres) {\n          Success(\"Bookmark Successfully\");\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n    else {\n\n      const resp = await firebaseConfig.firestore().collection('user_contents').doc(data.id).update({ user_bookmark: data.user_bookmark })\n        .then(function (docres) {\n          Success(\"Remove from bookmark successfully\");\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_SUCCESS, payload: data.id + '_' + data.type });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n        });\n    }\n\n  } catch (error) {\n    ERROR(error.message);\n    dispatch({ type: GET_BOOKMARK_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserBookmarkMusic_old = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_BOOKMARK_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n\n      var bookmark_arr = [];\n      var user_arr = [];\n      // var bookmark_ttl_arr = [];\n\n      var totalRecord = 0;\n\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents')\n        .where(\"media_type\", \"==\", \"audio\")\n        .orderBy('postedAt','desc')\n      bookmarkTotalData.get().then((snapshot) => {\n        var totalcount = 0;\n        snapshot.forEach((totalbookDoc) => {\n          var totalDocData = totalbookDoc.data()\n          if (totalDocData.user_bookmark !== undefined) {\n\n            var mediares = Object.keys(totalDocData.user_bookmark)\n            if (mediares.find(o => o === user_id)) {\n              // bookmark_ttl_arr.push(totalDocData.id);\n              totalcount = totalcount + 1;\n\n            }\n          }\n        })\n        totalRecord = totalcount;\n\n        // for load more data---------------------------\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents')\n          .where(\"media_type\", \"==\", \"audio\")\n          .orderBy('postedAt','desc')\n        bookmarkref.get().then((snapshot) => {\n\n          snapshot.forEach((bookDoc) => {\n            if (Object.values(bookmark_arr).length < limit) {\n              var bookmarkDocData = bookDoc.data()\n\n              if (bookmarkDocData.user_bookmark !== undefined) {\n\n                var mediares = Object.keys(bookmarkDocData.user_bookmark)\n                if (mediares.find(o => o === user_id)) {\n                  bookmark_arr[bookmarkDocData.id] = bookmarkDocData\n                }\n              }\n            }\n          })\n\n          Object.values(bookmark_arr).forEach(async (usrContent, index) => {\n\n            var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", usrContent.postedById);\n            userref.get().then(snapshot1 => {\n\n              snapshot1.forEach(doc => {\n\n                user_arr = doc.data()\n\n                bookmark_arr[usrContent.id].username_doc = user_arr.username;\n                bookmark_arr[usrContent.id].avatarurl_doc = user_arr.avatarURL;\n\n              })\n\n              dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: bookmark_arr, MusicBookmarkTotal: totalRecord });\n            })\n          })\n\n          // dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: bookmark_arr});\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n        })\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n      })\n\n    } else {\n      dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserBookmarkMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_BOOKMARK_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n      var subscribeobj = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then(async (doc) => {\n        \n        if (!doc.exists) {\n        }\n        else {\n         \n          var UserData = doc.data();\n          subscribeobj = UserData.subscribed_list;\n        }\n      })\n\n      var result_arr = [];\n      var totalRecord = 0;\n\n      var bookmarkTotalData = await firebaseConfig.firestore().collection('user_contents')\n        .where(\"media_type\", \"==\", \"audio\")\n        .orderBy('postedAt','desc')\n\n      bookmarkTotalData.get().then((snapshot) => {\n        var totalcount = 0;\n\n        snapshot.forEach((totalbookDoc) => {\n          var totalDocData = totalbookDoc.data()\n          if (totalDocData.user_bookmark !== undefined) {\n\n            var mediares = Object.keys(totalDocData.user_bookmark)\n            if (mediares.find(o => o === user_id)) {\n              const userexist = firebaseConfig.firestore().collection('users').doc(totalDocData.postedById)\n              userexist.get().then((doc) => {\n                if (doc.data().user_active === true) {\n                 \n                  totalcount = totalcount + 1;\n                  totalRecord = totalcount;\n                }\n              })\n            }\n          }\n        })\n\n        console.log('-----totalRecord',totalRecord);\n        // for load more data---------------------------\n        var bookmarkref = firebaseConfig.firestore().collection('user_contents')\n          .where(\"media_type\", \"==\", \"audio\")\n          .orderBy('postedAt','desc')\n        bookmarkref.get().then((snapshot1) => {\n          var i = 0;\n          var j = 0;\n\n          var snapshot = [];\n          snapshot1.forEach(async (bookDoc) => {\n            snapshot.push(bookDoc);\n          })\n\n          getlimit(snapshot[i]);\n\n          function getlimit(bookDoc) {\n\n            \n            if (totalRecord !== 0) {\n              if (j < limit && snapshot.length > i) {\n                var bookmarkDocData = bookDoc.data()\n                if (bookmarkDocData.user_bookmark !== undefined) {\n                  var mediares = Object.keys(bookmarkDocData.user_bookmark)\n\n                  if (mediares.find(o => o === user_id)) {\n\n                    getbookmarkuserdata(bookmarkDocData, myDisplayer);\n                    function myDisplayer(obj) {\n\n                      if (Object.keys(obj).length !== 0) {\n                        i = i + 1;\n                        j = j + 1;\n                        result_arr.push(obj);\n                        getlimit(snapshot[i]);\n                      }\n                     \n                      dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: result_arr, MusicBookmarkTotal: totalRecord });\n                    }\n                  }\n                  else {\n                    i = i + 1;\n                    getlimit(snapshot[i]);\n                  }\n                } else {\n                  i = i + 1;\n                  getlimit(snapshot[i]);\n                }\n              }\n            } else {\n\n              dispatch({ type: GET_USER_BOOKMARK_MUSIC_SUCCESS, payload: result_arr, MusicBookmarkTotal: totalRecord });\n              //dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n            }\n\n          }\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n        })\n\n        async function getbookmarkuserdata(bookmarkval, myCallback) {\n          var bookmarkobj = {};\n          const userbookmark = await firebaseConfig.firestore().collection('users').doc(bookmarkval.postedById);\n          userbookmark.get().then(function (doc) {\n            if (doc.exists) {\n              var resData = '';\n              var viewPermission = false;\n              if (doc.data().user_active === true) {\n                if (Object.keys(subscribeobj).length > 0) {\n                  var subid = bookmarkval.postedById + '_SUBSCRIBER';\n                  if (Object.keys(subscribeobj).includes(subid)) {\n                    resData = subscribeobj[subid];\n                    if(resData.subscribe_type === \"one_time_support\"){\n                      viewPermission = true;\n    \n                    }else{\n                      if (resData.date !== '') {\n                        var subs_date = resData.date;\n                        var checkDate = new Date();\n      \n                        const milliseconds = subs_date.seconds * 1000 // 1575909015000\n                        var cloneDate = new Date(milliseconds)\n      \n                        //for monthly subscription\n      \n                        cloneDate.setDate(cloneDate.getDate() + 30);\n                        if (cloneDate.getTime() > checkDate.getTime()) {\n                          viewPermission = true;\n                        }\n                    }\n                  } \n                }\n                }\n                bookmarkobj[bookmarkval.id] = bookmarkval\n                bookmarkobj[bookmarkval.id].username_doc = doc.data().username;\n                bookmarkobj[bookmarkval.id].avatarurl_doc = doc.data().avatarURL;\n                bookmarkobj[bookmarkval.id].viewPermission = viewPermission;\n                \n                myCallback(bookmarkobj);\n              }\n            }\n          })\n        }\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n      })\n\n    } else {\n      dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_BOOKMARK_MUSIC_FAILURE, payload: error });\n  }\n};\n\nexport const getUserMediaMusic = (user_id, limit) => async dispatch => {\n  try {\n    dispatch({ type: POST_USER_MEDIA_MUSIC_REQUEST, payload: true });\n    if (user_id) {\n\n      let query = '';\n      var totalrecord = [];\n\n      var mediaMusicPost = [];\n      var res_arr = [];\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n      res.get().then((doc1) => {\n\n        // for total count---------------------------\n        firebaseConfig.firestore().collection('user_contents').where('postedById', \"==\", user_id)\n          .where('media_type', \"in\", [\"audio\"])\n          .orderBy('postedAt','desc')\n          .get().then(function (querySnapshot) {\n            totalrecord = querySnapshot.size;\n          });\n\n        // for load more data---------------------------\n     \n        query = firebaseConfig.firestore().collection('user_contents')\n          .where('postedById', \"==\", user_id)\n          .where('media_type', \"in\", [\"audio\"])\n          .orderBy('postedAt','desc')\n          .limit(limit);\n\n        query.get().then(snapshot => {\n\n          snapshot.forEach( doc => {\n            \n            res_arr = doc.data();\n           \n            getShareCount(res_arr);\n             \n            async function getShareCount(mediaid) {\n              var totalCount =0;\n              mediaid['share_count'] = totalCount;\n              const res =  await firebaseConfig.firestore().collection('media_share_history').doc(user_id);\n              res.get().then((docs) => {\n                \n                var mediaData = docs.data();\n                if(mediaData !== undefined)\n                {\n                  if(mediaData[mediaid.id] !== undefined)\n                  {\n                    if(mediaData[mediaid.id]['watsapp_Count']){\n                      totalCount += mediaData[mediaid.id]['watsapp_Count'];\n                    }\n                    if(mediaData[mediaid.id]['email_Count']){\n                      totalCount += mediaData[mediaid.id]['email_Count'];\n                    }\n                    if(mediaData[mediaid.id]['facebook_Count']){\n                      totalCount += mediaData[mediaid.id]['facebook_Count'];\n                    }\n                    mediaid['share_count'] = totalCount;\n                  }\n                }\n              })\n            }\n \n            res_arr.username_doc = doc1.data().username;\n            res_arr.avatarurl_doc = doc1.data().avatarURL;\n            \n            mediaMusicPost.push(res_arr);\n\n          })\n\n          console.log('musicccc dataaaa',mediaMusicPost);\n          dispatch({ type: GET_USER_MEDIA_MUSIC_SUCCESS, payload: mediaMusicPost, MusicTotal: totalrecord });\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n        })\n      }).catch(function (error) {\n        dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_MEDIA_MUSIC_FAILURE, payload: error });\n  }\n};\n\nasync function sendNotification(to_id, from_id) {\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n        var Unread_Notification_Count = 0;\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then(async (fromdoc) => {\n\n              if (!fromdoc.exists) {\n\n                fromname = \"\";\n              }\n              else {\n\n\n                if (doc.data()?.Unread_Notification) {\n                  Unread_Notification_Count = doc.data().Unread_Notification + 1;\n                } else {\n                  Unread_Notification_Count = 1;\n                }\n\n                fromname = fromdoc.data().username;\n                console.log(doc.data().Notification_tokens);\n                const notification_data = {\n\n                  \"title\": \"Post Liked\",\n                  \"body\": fromname + ' ' + LIKED_NOTIFICATION,\n                  \"to\": doc.data().Notification_tokens,\n\n                }\n\n                const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                console.log('notification_response', notification_response);\n                if (notification_response.status === 200) {\n                  var notifypostdata = {};\n                  var notification_id = '';\n                  const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                  console.log('datanotifyyyy', notifydocRef);\n                  notification_id = notifydocRef.id;\n\n                  notifypostdata[notification_id] = {\n\n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    type: \"LIKED_NOTIFICATION\",\n                    user_id: from_id,\n                    status: 'unread',\n                    flag: true,\n\n                  }\n                  firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, { merge: true }).then(function () {\n                    firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                      'Unread_Notification': Unread_Notification_Count,\n                    }).then(function (docres) {\n\n                    }).catch(function (error) {\n                      ERROR(error.message);\n\n                    });\n                  }).catch(function (error) {\n                    console.log(error.message);\n                  })\n\n                }\n              }\n            });\n\n          }\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nasync function sendNotificationAllSubscriber(uid) {\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n      }\n      else {\n        var fromname = '';\n        fromname = doc.data().username;\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n        if (subscribeobj !== '') {\n\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n            if (subkeyid.includes('_RECIEVER')) {\n              var sub_id = subkeyid.replace('_RECIEVER', '');\n\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async (subdoc) => {\n\n                if (!subdoc.exists) {\n\n                }\n                else {\n                  var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n                  var Unread_Notification_Count = 0;\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                   \n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"POST_CONTENT\",\n                              \"body\": fromname + ' ' + POST_CONTENT,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n                            if (subdoc.data()?.Unread_Notification) {\n                              Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                            } else {\n                              Unread_Notification_Count = 1;\n                            }\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n\n                              var notifypostdata = {};\n                              var notification_id = '';\n                              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                              console.log('datanotifyyyy', notifydocRef);\n                              notification_id = notifydocRef.id;\n\n                              notifypostdata[notification_id] = {\n\n                                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                                type: \"POST_CONTENT\",\n                                user_id: uid,\n                                status: 'unread',\n                                flag: true,\n\n                              }\n                              firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, { merge: true }).then(function () {\n                                firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                                  'Unread_Notification': Unread_Notification_Count,\n                                }).then(function (docres) {\n\n                                }).catch(function (error) {\n                                  ERROR(error.message);\n\n                                });\n                              }).catch(function (error) {\n                                console.log(error.message);\n                              })\n\n                            }\n                          }\n                        }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n                       \n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"POST_CONTENT\",\n                              \"body\": fromname + ' ' + POST_CONTENT,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n                            if (subdoc.data()?.Unread_Notification) {\n                              Unread_Notification_Count = subdoc.data().Unread_Notification + 1;\n                            } else {\n                              Unread_Notification_Count = 1;\n                            }\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n\n                              var notifypostdata = {};\n                              var notification_id = '';\n                              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n                              console.log('datanotifyyyy', notifydocRef);\n                              notification_id = notifydocRef.id;\n\n                              notifypostdata[notification_id] = {\n\n                                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                                type: \"POST_CONTENT\",\n                                user_id: uid,\n                                status: 'unread',\n                                flag: true,\n\n                              }\n                              firebaseConfig.firestore().collection('notifications/').doc(sub_id).set(notifypostdata, { merge: true }).then(function () {\n                                firebaseConfig.firestore().collection('users/').doc(sub_id).update({\n                                  'Unread_Notification': Unread_Notification_Count,\n                                }).then(function (docres) {\n\n                                }).catch(function (error) {\n                                  ERROR(error.message);\n\n                                });\n                              }).catch(function (error) {\n                                console.log(error.message);\n                              })\n\n                            }\n                          }\n                        }\n                      }\n\n                    }\n                  }\n                }\n              })\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nexport const StoreMediaShareCount = (data, history) => async (dispatch) => {\n  try {\n    if (data.shareBy !== undefined) {\n     \n      dispatch({ type: POST_MEDIA_SHARE_COUNT_REQUEST, payload: true });\n      var mediaSharePostData = {};\n      var UpdatemediaSharePostData ={};\n      var share_by = data.shareBy;\n\n      if(data.type === \"Watsapp\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          watsapp_Count: 1,\n          watsapp_User: [share_by],\n          \n        }\n      }\n\n      if(data.type === \"Email\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          email_Count: 1,\n          email_User: [share_by],\n          \n  \n        }\n      }\n\n      if(data.type === \"Facebook\"){\n        mediaSharePostData[data.mediaId] = {\n          mediaId:data.mediaId,\n          time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n          facebook_Count: 1,\n          facebook_User: [share_by],\n          \n  \n        }\n      }\n      const userdata = firebaseConfig.firestore().collection('media_share_history').doc(data.user_id)\n        userdata.get().then(async(doc) => {\n          if (!doc.exists) {\n            firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, { merge: true })\n              .then(function () {\n                dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n              }).catch(function (error) {\n                console.log(error.message);\n              })\n         \n          }else{\n            console.log('docdata-----',doc.data());\n            var sharedata = doc.data();\n            var media_id = data.mediaId;\n\n            console.log('checkout',sharedata[media_id]);\n            if(sharedata[media_id] !== undefined){\n\n              if(data.type === \"Watsapp\"){\n\n                var WPshareUserId =[];\n                var watsappCount = 0;\n                if(sharedata[media_id]['watsapp_User'] !== undefined){\n                  WPshareUserId = sharedata[media_id]['watsapp_User'];\n                }\n                if(sharedata[media_id]['watsapp_Count'] !== undefined){\n                  watsappCount = sharedata[media_id]?.['watsapp_Count'];\n                }\n               \n                if(!WPshareUserId.includes(share_by)){\n                  WPshareUserId.push(share_by);\n                  \n                  \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    watsapp_Count: watsappCount+1,\n                    watsapp_User: WPshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                 \n                }\n              }\n\n              if(data.type === \"Facebook\"){\n\n                var FBshareUserId =[];\n                var fbCount = 0;\n                if(sharedata[media_id]['facebook_User'] !== undefined){\n                  FBshareUserId = sharedata[media_id]['facebook_User'];\n                }\n                if(sharedata[media_id]['facebook_Count'] !== undefined){\n                  fbCount = sharedata[media_id]?.['facebook_Count'];\n                }\n               \n                if(!FBshareUserId.includes(share_by)){\n                  FBshareUserId.push(share_by);\n                  \n                  \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    facebook_Count: fbCount+1,\n                    facebook_User: FBshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                 \n                }\n              }\n\n              if(data.type === \"Email\"){\n                var EmailshareUserId =[];\n                var emailCount = 0;\n                if(sharedata[media_id]['email_User'] !== undefined){\n                  EmailshareUserId = sharedata[media_id]['email_User'];\n                }\n                if(sharedata[media_id]['email_Count'] !== undefined){\n                  emailCount = sharedata[media_id]?.['email_Count'];\n                }\n                if(!EmailshareUserId.includes(share_by)){\n                  EmailshareUserId.push(share_by);\n               \n                 \n                  UpdatemediaSharePostData[media_id] = {\n                   \n                    time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                    email_Count: emailCount+1,\n                    email_User: EmailshareUserId,\n                    \n                  }\n                 \n                  firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(UpdatemediaSharePostData, { merge: true })\n                  .then(function () {\n                    dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n               \n                    }).catch(function (error) {\n                      console.log('kkk',error.message);\n                    })\n                }\n              }\n            }else{\n              firebaseConfig.firestore().collection('media_share_history/').doc(data.user_id).set(mediaSharePostData, { merge: true })\n              .then(function () {\n                dispatch({ type: ADD_MEDIA_SHARE_COUNT_SUCCESS, payload: true });\n              }).catch(function (error) {\n                console.log(error.message);\n              })\n            }\n\n          }\n        }).catch(function (error){\n          console.log('errr',error.message);\n        })\n\n    }\n    else {\n      dispatch({ type: ADD_MEDIA_SHARE_COUNT_FAILURE, payload: 'invalid file' });\n      ERROR('invalid file');\n    }\n\n  } catch (error) {\n    dispatch({ type: ADD_MEDIA_SHARE_COUNT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n\n\n\n\n","/home/asus/dapify/src/utils/errors.js",[],"/home/asus/dapify/src/utils/Loader.js",[],"/home/asus/dapify/src/templates/view/Chat_Inbox/ConversationView.js",["481","482","483","484","485","486","487","488"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, connect } from 'react-redux';\nimport Moment from 'moment';\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getAudience } from \"../../../Redux/actions/subscriber-actions\";\nimport { getConversation, getUnreadMessageCount } from \"../../../Redux/actions/chat-actions\";\nimport { addConversation } from \"../../../Redux/actions/chat-actions\";\nimport { PostedTime } from '../../components/calendar_date';\nimport ReadMore from '../../components/readMore';\nimport Messages from './messages';\nimport DefaultMessages from './defaultMessagesScreen';\nimport GroupMessages from './groupMessages';\nimport { ERROR, Success } from '../../../utils/errors';\nimport user_img from '../../../assets/images/dummy_user.png';\nimport backarrow from '../../../assets/images/Arrow-Left.svg';\nimport * as moment from 'moment';\nimport { auth } from '../../../Redux/auth-service';\n\nfunction ConversationView(props) {\n    //  UserUnreadMSGCount\n\n    const { audienceData, loading } = useSelector((state) => state.subscriberReducer);\n    const { conversationList, ChatId, sendGroupMsgStatus, sendMsgStatus, UserUnreadMSGCount } = useSelector((state) => state.chatReducer);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const [room, setRoom] = useState('');\n    const [roomList, setRoomList] = useState([]);\n    const [nickname, setNickname] = useState('');\n    const [startChat, setStartChat] = useState('');\n    const [ChatUserKeyword, setChatUserKeyword] = useState('');\n    const [RecImg, setRecImg] = useState('');\n    const [RecName, setRecName] = useState('');\n    const [closeSearch, setCloseSearch] = useState('close');\n\n\n    const handleChatUser = (e) => {\n        setStartChat('');\n        setChatUserKeyword(e.target.value);\n        if (e.target.value.length > 0) {\n            const data = {\n                user_id: authuser.uid,\n                type: 'search',\n                search_keyword: e.target.value,\n            }\n            props.getAudience(data);\n        }\n    }\n\n    function sortByDate(a, b) {\n        var x = 0;\n        var y = 0;\n\n\n        if (a.lastConversation !== '') {\n            // console.log('====date===a',a.lastConversation.date);\n            x = moment(a.lastConversation.date, 'DD/MM/YYYY HH:mm:ss').format('MM/DD/YYYY HH:mm:ss');\n            x = new Date(x).getTime();\n        }\n        if (b.lastConversation !== '') {\n            // console.log('====date===b',b.lastConversation.date);\n            y = moment(b.lastConversation.date, 'DD/MM/YYYY HH:mm:ss').format('MM/DD/YYYY HH:mm:ss');\n            y = new Date(y).getTime();\n        }\n        if (x > y) {\n            return -1;\n        }\n        if (x < y) {\n            return 1;\n        }\n        return 0;\n    }\n\n    const save = async (e, img, rec_name) => {\n\n        if (img !== '') {\n            setRecImg(img);\n        } else {\n            setRecImg(user_img);\n        }\n        setStartChat('single ');\n        setCloseSearch('open');\n        setRecName(rec_name);\n\n        var rec_id = e;\n        const data = {\n            recvid: rec_id,\n            uid: authuser.uid,\n        }\n\n        await props.addConversation(data);\n    };\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            await props.getUserProfileById(authuser.uid);\n            setNickname(userDetailsById.username);\n            const data = {\n                uid: authuser.uid,\n            }\n            await props.getConversation(data);\n        }\n        fetchData();\n\n    }, [authuser.uid, audienceData, sendGroupMsgStatus, sendMsgStatus, UserUnreadMSGCount]);\n\n    //\n    useEffect(() => {\n        setRoomList(conversationList);\n    }, [conversationList]);\n\n\n    useEffect(() => {\n        setNickname(userDetailsById.username);\n\n    }, [userDetailsById]);\n\n\n    useEffect(() => {\n        if (ChatId !== '') {\n            setRoom(ChatId);\n            enterChatRoom(ChatId, '');\n        }\n\n    }, [ChatId]);\n\n    useEffect(() => {\n        const data = {\n            user_id: authuser.uid,\n            type: 'search',\n            search_keyword: 'm',\n        }\n        props.getAudience(data);\n    }, [authuser.uid])\n\n\n\n    const enterChatRoom = async (roomname) => {\n\n\n        setNickname(userDetailsById.username);\n        setRoom(roomname);\n        setStartChat('single');\n        const fetchData = async () => {\n            const data = {\n                uid: authuser.uid,\n            }\n            await props.getConversation(data);\n            await props.getUserProfileById(authuser.uid);\n\n\n        };\n\n        fetchData();\n    }\n\n    const handleChatWithAllSubscriber = () => {\n\n        setRecImg('');\n        setRecName('');\n        setChatUserKeyword('');\n        setCloseSearch('close');\n        const fetchData = async () => {\n            setNickname(userDetailsById.username);\n            setChatUserKeyword('');\n            setStartChat('all');\n            const data = {\n                user_id: authuser.uid,\n                type: 'all',\n\n            }\n            await props.getAudience(data);\n        }\n        fetchData();\n    }\n\n    useEffect(() => {\n        if (startChat === \"all\" && loading === false && audienceData.length === 0) {\n            ERROR('No subscriber found');\n        }\n    }, [audienceData, startChat, loading]);\n\n    const handelCloseCompose = () => {\n        setRecImg('');\n        setRecName('');\n        setChatUserKeyword('');\n        setCloseSearch('close');\n        const fetchData = async () => {\n            const data = {\n                uid: authuser.uid,\n            }\n            await props.getConversation(data);\n        }\n        fetchData();\n    }\n\n    const handleRemoveRoom = () => {\n\n        setRoom('');\n        setStartChat('');\n        // localStorage.removeItem(\"lestener_Chat_id\");\n    }\n    return (\n\n        <div className={`chat-section-main ${room !== '' ? \"UserChatOpen\" : startChat === \"all\" ? \"UserChatOpen\" : \"\"}`}>\n             {audienceData.length > 0  || roomList.length > 0 ? ( \n                <div className=\"chat-section-left\">\n                    <div className=\"chat-left-inn\">\n                        <div className=\"chat-top-search\">\n                            <h2>Compose New Message</h2>\n                            {RecImg !== '' ?\n                                <div className='chat-search-items'>\n                                    <span>To :</span>\n                                    <div className='chat-search-item'>\n                                        <div className='chat-lft-item'>\n                                            <b>{RecName}</b> <span><img src={RecImg} alt='' /></span>\n                                        </div>\n                                        <div onClick={handelCloseCompose} className='chat-close-item'>X</div>\n                                    </div>\n                                </div>\n                                :\n                                <div className=\"chat-search-users\">\n                                    <span>To :</span> <input type=\"text\" name=\"roomname\" id=\"roomname\" value={ChatUserKeyword} onChange={handleChatUser} />\n                                </div>\n                            }\n\n                        </div>\n                        <div className=\"chat-inn\">\n                            <div className='chat-btn-subscribers'>\n                                <button type=\"button\" onClick={handleChatWithAllSubscriber} className='btn'>All Subscribers</button>\n                            </div>\n\n                            {\n                                audienceData.length > 0 && closeSearch === 'close' ? (\n                                    <div className=\"chat-view-users\">\n                                        <ul>\n                                            {\n                                                audienceData.map((audienceContent, i) => (\n                                                    <li>\n                                                        <div action onClick={() => { save(audienceContent.aud_id, audienceContent.aud_profile, audienceContent.aud_name) }} className=\"user-list-item\">\n\n                                                            <div className=\"chat-item-top\">\n                                                                <div className=\"user-item-left\">\n                                                                    <div className=\"user-item-img\">\n                                                                        <span><img src={audienceContent?.aud_profile !== '' ? audienceContent?.aud_profile : user_img} alt='' /></span>\n                                                                    </div>\n                                                                    <div className=\"user-item-name\">{audienceContent.aud_name}</div>\n                                                                </div>\n                                                            </div>\n\n                                                        </div>\n                                                    </li>\n                                                ))\n                                            }\n\n                                        </ul>\n                                    </div>\n                                ) :\n                                    <div className=\"chat-view-users\">\n                                        <ul>\n                                            {roomList.length > 0 ? (roomList.sort(sortByDate)\n                                                .map((item, idx) => (\n                                                    <li>\n                                                        <div action onClick={() => { enterChatRoom(item.key, item.reciever_id) }} className=\"user-list-item\">\n                                                            <div className=\"chat-item-top\">\n                                                                <div className=\"user-item-left\">\n                                                                    <div className=\"user-item-img\">\n                                                                        <span><img src={item?.receiverDetails?.avatarURL !== '' ? item?.receiverDetails?.avatarURL : user_img} alt='' /></span>\n                                                                    </div>\n                                                                    <div className=\"user-item-name\">{item.receiverDetails.username}</div>\n                                                                </div>\n                                                                <div className=\"user-item-time\">\n                                                                    {/* {Moment(new Date(item.lastConversation.date)).format('DD/MM/YYYY HH:mm:ss')} /> :'' } */}\n                                                                    {item.lastConversation?.date ? <PostedTime pageName=\"conversation\" posted_time={item.lastConversation.date} /> : ''}\n                                                                </div>\n                                                            </div>\n                                                            <div className=\"chat-item-mag\">\n                                                                <div className=\"chat-msg-inn\">\n                                                                    <ReadMore length=\"50\" content={item.lastConversation.message} action=\"no\" />\n                                                                </div>\n\n                                                                {item.Readingcount > 0 && item.key !== room &&\n                                                                    <div className=\"user-unread_msg\">{item.Readingcount}</div>\n                                                                }\n\n                                                                {/* { item.unread_msg > 0 &&\n                                                            <div className=\"user-unread_msg\">{item.unread_msg}</div>\n                                                        }        */}\n                                                            </div>\n                                                        </div>\n                                                    </li>\n                                                ))\n                                            ) : ''\n                                            }\n                                        </ul>\n                                    </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                ) : <p className='dataNfound' style={{width: '100%'}}>There's no messages...</p>}\n\n             {audienceData.length > 0 || roomList.length > 0 ? (\n                <div className=\"chat-section-right\">\n                    <button onClick={handleRemoveRoom} className=\"btn\"><img src={backarrow} alt=\"\" /></button>\n                    <div className=\"chat-right-inn\">\n                        {startChat === 'single' && room !== '' ? (\n\n                            <Messages room_id={room} />\n                        ) :\n                            startChat === 'all' && audienceData.length > 0 ? (\n                                <GroupMessages room_id=\"all\" />\n                            ) :\n                                <DefaultMessages />}\n                    </div>\n                </div>\n              ) : null}\n        </div>\n\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        audienceData: state.subscriberReducer.audienceData,\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        conversationList: state.chatReducer.conversationList,\n        ChatId: state.chatReducer.ChatId,\n        sendGroupMsgStatus: state.chatReducer.sendGroupMsgStatus,\n        sendMsgStatus: state.chatReducer.sendMsgStatus,\n        loading: state.subscriberReducer.loading,\n        UserUnreadMSGCount: state.chatReducer.UserUnreadMSGCount,\n\n    }\n};\n\nconst actionCreators = { getUserProfileById, fetchUser, getAudience, getConversation, addConversation };\nexport default connect(mapStateToProps, actionCreators)(ConversationView);\n","/home/asus/dapify/src/templates/view/Home/homeVideoAndImage.js",["489","490","491","492","493","494","495"],"import React, { useState, useEffect } from 'react'\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getUserMediaContent } from \"../../../Redux/actions/media-actions\";\nimport { useSelector, connect } from \"react-redux\";\nimport VideoPlayer from '../../components/videoplayer';\nimport ReactPlayer from 'react-player'\nimport { Button, CircularProgress } from '@material-ui/core'\nimport { Link } from \"react-router-dom\";\nimport Loader from './../../../utils/Loader';\nimport Lightbox from \"react-awesome-lightbox\";\n// You need to import the CSS only once\nimport \"react-awesome-lightbox/build/style.css\";\nimport { getUserSubscriptionExpired } from \"../../../Redux/actions/subscriber-actions\";\nimport ExpiryDate from \"../../components/subscriptionExpiryDate\";\n\n\nfunction HomeVideoImage(props) {\n\n    console.log(\"VIDIOPROPS---\", props);\n\n    const [isLoader, setLoader] = useState(true);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { userMedia, MediaTotal, loading } = useSelector((state) => state.mediaReducer);\n    const [profileId, setProfileId] = useState();\n    const [lightboxStatus, setLightboxStatus] = useState('');\n    const [initialLimit, setInitialLimit] = useState(6);\n    const [dataLimit, setDataLimit] = useState(6);\n    const { subscribeExpired } = useSelector((state) => state.subscriberReducer);\n    const [expiredDate, setExpiredDate] = useState('');\n    const [viewPermission, setViewPermission] = useState('');\n    const [current_url, setcurrent_url] = useState('');\n\n    useEffect(() => {\n        if (authuser.uid === profileId) {\n            setViewPermission(true);\n        } else {\n            if (subscribeExpired.subscribe_type === 'one_time_support') {\n                setViewPermission(true);\n            } else {\n                if (subscribeExpired.date) {\n                    var exp_date = ExpiryDate(subscribeExpired.date);\n                    if (exp_date !== '') {\n                        setExpiredDate(exp_date);\n                        setViewPermission(true);\n                    } else {\n                        setViewPermission(false);\n                    }\n                    console.log('exp_date', exp_date);\n                } else {\n                    setViewPermission(false);\n                }\n            }\n        }\n\n    }, [subscribeExpired]);\n\n    console.log('subscribeExpired', subscribeExpired);\n    useEffect(() => {\n        async function fetchdata() {\n            if (props.userProfileId) {\n                const profileid = Buffer.from(props.userProfileId, 'base64').toString('ascii');\n                setProfileId(profileid);\n                await props.getUserProfileById(profileid);\n                await props.getUserMediaContent(profileid, dataLimit);\n                const data = {\n                    user_id: authuser.uid,\n                    subscriberId: profileid,\n                }\n                await props.getUserSubscriptionExpired(data);\n                setLoader(false);\n                if (authuser.uid === profileId) {\n                    setViewPermission(true);\n                }\n            }\n            else {\n                await props.getUserProfileById(authuser.uid);\n                await props.getUserMediaContent(authuser.uid, dataLimit);\n                setLoader(false);\n            }\n        }\n        fetchdata();\n    }, [authuser.uid, dataLimit, isLoader]);\n\n\n    const handleLightbox = (eventId) => {\n        setcurrent_url(eventId);\n        if (window.$_currentlyPlaying) {\n            window.$_currentlyPlaying.pause();\n        }\n        if (lightboxStatus !== '') {\n            setLightboxStatus('');\n        } else {\n            setLightboxStatus(eventId);\n        }\n    };\n\n    const handleNext = () => {\n        var new_limit = dataLimit + initialLimit;\n        setDataLimit(new_limit);\n    };\n\n    // To prevent multiple playing at same time\n    const handleYoutube = (e) => {\n        setcurrent_url(e);\n        if (window.$_currentlyPlaying) {\n            window.$_currentlyPlaying.pause();\n        }\n    };\n\n    // To prevent multiple playing at same time\n    const handelCustomVideo = (e) => {\n        setcurrent_url(e);\n    }\n\n    // To prevent multiple playing at same time\n    useEffect(() => {\n\n        document.addEventListener(\"play\", function (evt) {\n            setcurrent_url(evt);\n            if (window.$_currentlyPlaying && window.$_currentlyPlaying !== evt.target) {\n                window.$_currentlyPlaying.pause();\n            }\n            window.$_currentlyPlaying = evt.target;\n        }, true);\n    }, []);\n\n    return (\n\n        <div className='middle-post-items1'>\n            {isLoader ? <Loader isLoader={true} /> : null}\n            {userMedia.length > 0 ? (\n                userMedia.map((mediaContent) => (\n\n                    mediaContent.media_type === \"video\" && mediaContent.via === \"youtube\" ? (\n                        <div key={mediaContent.id} className={`middle-post-item ${props.userProfileId ? mediaContent.public === 'true' ? 'media-unlock' : viewPermission === true ? 'media-unlock' : '' : 'media-unlock'}`}>\n                            <div className={`middle-post-item-div you-tube-vd`}>\n                                <div className=\"vd-player-cus\">\n\n                                    <ReactPlayer onClick={handleYoutube}\n                                        config={{\n                                            file: {\n                                                attributes: { controlsList: 'nodownload' }\n                                            },\n\n                                            youtube: {\n                                                playerVars: {\n\n                                                    'playsinline': 1,\n                                                    'enablejsapi': 1,\n                                                    'captions': 0,\n                                                    'controls': 0,\n\n                                                },\n                                            },\n                                        }}\n                                        playing={current_url === mediaContent.media_url ? true : false}\n                                        onStart={(e) => handleYoutube(mediaContent.media_url)}\n                                        onPlay={(e) => handleYoutube(mediaContent.media_url)}\n                                        onContextMenu={e => e.preventDefault()}\n                                        width=\"320\" height=\"240\" url={mediaContent.media_url}\n                                    />\n                                </div>\n                            </div>\n                        </div>) :\n\n                        mediaContent.media_type === \"video\" && mediaContent.via === \"local\" ? (\n                            <div key={mediaContent.id} className={`middle-post-item ${props.userProfileId ? mediaContent.public === 'true' ? 'media-unlock' : viewPermission === true ? 'media-unlock' : '' : 'media-unlock'}`}>\n                                <div onClick={(e) => handelCustomVideo(mediaContent.media_url)} className={`middle-post-item-div`}>\n\n                                    <VideoPlayer type=\"homeVideo\" videourl={mediaContent.media_url} />\n                                    <div className='middle-post-txt'>{mediaContent.caption}</div>\n\n                                </div>\n                            </div>) :\n\n                            mediaContent.media_type === \"image\" && (\n\n                                <div\n                                    key={mediaContent.id}\n                                    className={`middle-post-item ${props.userProfileId\n                                        ? mediaContent.public === 'true'\n                                            ? 'media-unlock'\n                                            : viewPermission === true\n                                                ? 'media-unlock'\n                                                : ''\n                                        : 'media-unlock'}`}\n                                >\n\n                                    <div className={`middle-post-item-div`}>\n                                        <div\n                                            onClick={props.userProfileId\n                                                ? mediaContent.public === 'true'\n                                                    ? () => handleLightbox(mediaContent.id)\n                                                    : viewPermission === true\n                                                        ? () => handleLightbox(mediaContent.id)\n                                                        : (event) => event.preventDefault()\n                                                : () => handleLightbox(mediaContent.id)}\n                                            className='middle-post-img'\n                                        >\n\n                                            <img\n                                                src={mediaContent.media_url}\n                                                alt=\"\"\n                                                oncontextmenu=\"return false;\"\n                                            />\n\n                                        </div>\n\n                                        {lightboxStatus === mediaContent.id && (\n                                            <Lightbox\n                                                image={mediaContent.media_url}\n                                                title={mediaContent.caption}\n                                                showTitle=\"true\"\n                                                allowZoom=\"true\"\n                                                allowRotate=\"true\"\n                                                allowReset=\"true\"\n                                                buttonAlign=\"flex-end\"\n                                                onClose={handleLightbox}\n                                                doubleClickZoom=\"0\"\n                                            />\n                                        )}\n                                        <div className='middle-post-txt'>{mediaContent.caption}</div>\n                                    </div>\n                                </div>\n                            )\n                ))\n            )\n                :\n                <div className=\"ald1\">No content is uploaded, please upload content from  <br /><Link to=\"/addContent\">here...</Link></div>\n            }\n            {userMedia && (\n                userMedia.length < MediaTotal ?\n                    <div className='LoadMore-btn'>\n                        <Button className=\"btn\" type=\"button\" onClick={handleNext} >\n                            Load More...\n                            {/* <CircularProgress /> */}\n                        </Button></div> : '')\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        userMedia: state.mediaReducer.userMedia,\n        loading: state.mediaReducer.loading,\n        MediaTotal: state.mediaReducer.MediaTotal,\n        subscribeExpired: state.subscriberReducer.subscribeExpired,\n    }\n}\n\nconst actionCreators = { getUserProfileById, fetchUser, getUserMediaContent, getUserSubscriptionExpired };\nexport default connect(mapStateToProps, actionCreators)(HomeVideoImage);\n","/home/asus/dapify/src/templates/view/Home/homeAudio.js",["496","497","498","499","500","501","502"],"import React, { useState, useEffect } from 'react'\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getUserMediaMusic } from \"../../../Redux/actions/media-actions\";\nimport { useSelector, connect } from \"react-redux\";\nimport MusicComponent from '../../components/musicComponent';\nimport { Button, CircularProgress } from '@material-ui/core'\nimport { getUserSubscriptionExpired } from \"../../../Redux/actions/subscriber-actions\";\nimport ExpiryDate from \"../../components/subscriptionExpiryDate\";\n\nfunction HomeAudio(props) {\n\n    const [isLoader, setLoader] = useState(true);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { userMusic,music_content_like,music_content_bookmark,MusicTotal,loading } = useSelector((state) => state.mediaReducer);\n    const [profileId, setProfileId] = useState();\n    const [initialLimit, setInitialLimit] = useState(6);\n    const [dataLimit, setDataLimit] = useState(6);\n    const { subscribeExpired } = useSelector((state) => state.subscriberReducer);\n    const [expiredDate, setExpiredDate] = useState('');\n    const [viewPermission, setViewPermission] = useState(false);\n   \n    useEffect(() => {\n        async function fetchdata() {\n           console.log('propsprofileid',props);\n           \n            if (props.userProfileId) {\n                const profileid = Buffer.from(props.userProfileId, 'base64').toString('ascii');\n                setProfileId(profileid);\n                await props.getUserProfileById(profileid);\n                await props.getUserMediaMusic(profileid,dataLimit);\n                const data ={\n                    user_id:authuser.uid,\n                    subscriberId:profileid,\n                }\n                await props.getUserSubscriptionExpired(data);\n                setLoader(false);\n                if(authuser.uid === profileId){\n                    setViewPermission(true);\n                }\n            }\n            else {\n                await props.getUserProfileById(authuser.uid);\n                await props.getUserMediaMusic(authuser.uid,dataLimit);\n                setLoader(false);\n            }\n        }\n        fetchdata();\n      \n    }, [authuser.uid,music_content_like,music_content_bookmark,dataLimit,isLoader]);\n\n    useEffect(() => {\n        if(authuser.uid === profileId){\n            setViewPermission(true);\n        }else{\n            if(subscribeExpired.subscribe_type === 'one_time_support'){\n                setViewPermission(true);\n            }else{\n                if(subscribeExpired.date){\n                    var exp_date = ExpiryDate(subscribeExpired.date);\n                    if(exp_date !== ''){\n                        \n                        setExpiredDate(exp_date);\n                        setViewPermission(true);\n                        \n                    }else{\n                        setViewPermission(false);\n                    }\n                    console.log('exp_date',exp_date);\n                }\n            }\n        }\n\n    },[profileId,subscribeExpired]);\n\n    const handleNext = () =>  {\n       var new_limit = dataLimit + initialLimit;\n       setDataLimit(new_limit);\n    }; \n\n    return (\n             \n            <div className='right-post-items'>\n                {userMusic.length > 0 ? (\n                    userMusic.map((mediaContent,indx) => (\n                        mediaContent.media_type === \"audio\" && (\n                        <div key={mediaContent.id} className={`post-item ${props.userProfileId ? mediaContent.public === 'true' ? 'media-unlock' : viewPermission === true ? 'media-unlock' : '' : 'media-unlock'}`}>\n                            <MusicComponent type=\"home\" mediaId={mediaContent.id} uid={props.userProfileId ? props.userProfileId : authuser.uid} mediaData={mediaContent}/>\n                        </div>\n                    )\n                    ))) : ''} \n                {\n                    userMusic && (\n                        userMusic.length < MusicTotal ?\n                        <div className='LoadMore-btn'>\n                            <Button className=\"btn\" type=\"button\" onClick={handleNext}>\n                                Load More...\n                                {/* <CircularProgress /> */}\n                            </Button>\n                        </div> : '' )\n                }\n            </div>\n\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        userMusic: state.mediaReducer.userMusic,\n        music_content_like: state.mediaReducer.music_content_like,\n        music_content_bookmark: state.mediaReducer.music_content_bookmark,\n        MusicTotal: state.mediaReducer.MusicTotal,  \n        subscribeExpired: state.subscriberReducer.subscribeExpired,\n    }\n}\n\nconst actionCreators = { getUserProfileById, fetchUser, getUserMediaMusic,getUserSubscriptionExpired };\nexport default connect(mapStateToProps, actionCreators)(HomeAudio);\n","/home/asus/dapify/src/templates/view/Home/homeAbout.js",["503"],"import React, { useState, useEffect } from 'react'\nimport down_arrow from '../../../assets/images/d-arrow.png';\n\n//Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\n\nfunction HomeAbout(props, { history }) {\n    // console.log(\"propppppsssssss===\", props)\n\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const [aboutToggle, setAboutToggle] = useState(props?.viewType ? 'false' : 'true');\n    const [bioval, setBioval] = useState('');\n    useEffect(() => {\n\n        async function fetchdata() {\n            if (props.userProfileId) {\n                const profileid = Buffer.from(props.userProfileId, 'base64').toString('ascii')\n                await props.getUserProfileById(profileid);\n            }\n            else {\n                await props.getUserProfileById(authuser.uid);\n            }\n        }\n        fetchdata();\n    }, [authuser.uid, bioval]);\n\n    useEffect(() => {\n\n        if (userDetailsById.bio) {\n            var biores = userDetailsById.bio.replace(/\\\\n/g, \"\\n\");\n        }\n        setBioval(biores);\n\n    }, [userDetailsById]);\n    const handleAboutToggle = () => {\n        if (props?.viewType) {\n            if (aboutToggle === 'false') {\n                setAboutToggle('true');\n            } else {\n                setAboutToggle('false');\n            }\n        }\n    };\n\n    console.log(\"props.viewType\", props.viewType);\n\n    console.log(\"bioval\", bioval);\n    return (\n        <>\n            <h2\n                className={`ab-head ${aboutToggle === 'true' ? 'about-toggle-active' : ''}`}\n                onClick={() => handleAboutToggle()}>\n                ABOUT\n                <b> {userDetailsById?.username}</b>\n                <img src={down_arrow} alt='' />\n            </h2>\n            {aboutToggle === 'true' && (\n                <div className='placeholder-bio'>\n                    {/* <textarea>{userDetailsById.bio ? userDetailsById.bio.replace(/\\\\n/g, \"\\n\") : 'Please update your bio...'}</textarea> */}\n                    <pre>{bioval ? bioval : <div className=\"placeholder-msg\">Please update your bio...</div>}</pre>\n                    <h4>{userDetailsById?.listen_now_link ? userDetailsById.listen_now_link : \"\"}</h4>\n                </div>\n            )}\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n    }\n}\n\nconst actionCreators = { getUserProfileById, fetchUser };\nexport default connect(mapStateToProps, actionCreators)(HomeAbout);\n\n","/home/asus/dapify/src/templates/view/Home/homeProfile.js",["504","505","506","507"],"import React,{useState,useEffect} from 'react'\nimport { Link } from \"react-router-dom\";\nimport facebook_icon from '../../../assets/images/Group03.svg';\nimport youtube_icon from '../../../assets/images/Group04.svg';\nimport instagram_icon from '../../../assets/images/Group05.svg';\nimport twitter_icon from '../../../assets/images/Group06.svg';\nimport tiktok_icon from '../../../assets/images/Group07.svg';\nimport user_cover_img from '../../../assets/images/user-cover-image.png';\nimport user_img from '../../../assets/images/dummy_user.png';\nimport square_img from '../../../assets/images/Union.svg';\nimport mobile_logo from '../../../assets/images/logo.png';\nimport add_content from '../../../assets/images/plus-mobile.svg';\nimport { Button } from '@material-ui/core'\n//Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport ShareMediaContent from './shareMediaContent';\n//import { SEND_MESSAGE_FAILURE } from '../../../Redux/actions/type';\nimport {getUserSubscribeStatus } from \"../../../Redux/actions/subscriber-actions\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {addConversation} from \"../../../Redux/actions/chat-actions\";\nimport { getUserSubscriptionExpired } from \"../../../Redux/actions/subscriber-actions\";\nimport ExpiryDate from \"../../components/subscriptionExpiryDate\";\n\nfunction HomeProfile(props, { history }) {\n    const { userDetailsById,authuser } = useSelector((state) => state.authReducer);\n    const [showShareMediaContent, setShowShareMediaContent] = useState(false);\n    const {ChatId} = useSelector((state) => state.chatReducer);\n    const { SubscribedUserStatus,loading } = useSelector((state) => state.subscriberReducer);\n    const [ OtherUser,SetOtherUser ] = useState('');\n    const { subscribeExpired } = useSelector((state) => state.subscriberReducer);\n    const [expiredDate, setExpiredDate] = useState('');\n    const [viewPermission, setViewPermission] = useState('');\n    console.log('othruser',props.userProfileId);\n    useEffect(() => {\n        async function fetchdata(){\n            if(props.userProfileId)\n            {\n                const profileid  = Buffer.from(props.userProfileId, 'base64').toString('ascii')\n                SetOtherUser(profileid);\n                await props.getUserProfileById(profileid);\n                \n                const data ={\n                    subscribe_id : profileid,\n                    user_id : authuser.uid,\n                }\n                props.getUserSubscribeStatus(data);\n                const subsdata ={\n                    user_id:authuser.uid,\n                    subscriberId:profileid,\n                }\n                await props.getUserSubscriptionExpired(subsdata);\n            }\n            else{\n                await props.getUserProfileById(authuser.uid);\n            }\n        }\n        fetchdata();\n    },[authuser.uid,props.userProfileId]);\n\n    useEffect(() => {\n\n        if(subscribeExpired.subscribe_type === \"one_time_support\"){\n           \n            setViewPermission(true);\n           \n        }else{\n            if(subscribeExpired.date){\n                var exp_date = ExpiryDate(subscribeExpired.date);\n                if(exp_date !== ''){\n                    \n                    setExpiredDate(exp_date);\n                    setViewPermission(true);\n                    \n                }else{\n                    setViewPermission(false);\n                }\n                console.log('exp_date',exp_date);\n            }else{\n                setViewPermission(false);\n            }\n        }\n\n    },[subscribeExpired]);\n\n    console.log('SubscribedUserStatus=========',SubscribedUserStatus);\n     console.log('userDetailsById',userDetailsById);\n    const handleLinks = (event) => {\n        if(event){\n           \n            if (event.indexOf(\"http://\") === 0 || event.indexOf(\"https://\") === 0) {\n                \n                window.open(event);\n            }\n            else{\n                window.open('//'+event);\n            }\n        }\n    };\n\n    const handleSubscribeLink = (event) => {\n        if(event){\n            props.props.history.push('/subscription/'+event);  \n        }\n    };\n\n    const handelChatWithUser = async (id) => {\n        if(id){\n          \n            console.log('workinggggg'); \n            const data ={\n                recvid :OtherUser,\n                uid:authuser.uid,\n            }\n     \n        await props.addConversation(data);\n        }\n    };\n    \n    useEffect(() => {\n\n        if(ChatId !== '' && OtherUser !== ''){\n            props?.props.history.push('/inbox');\n        }\n       \n    },[ChatId,OtherUser]);\n\n    console.log('OtherUser',OtherUser);\n    console.log('SubscribedUserStatus',SubscribedUserStatus);\n    return (\n        <div className='top-profile-section'>\n           <div className=\"mob-secion\">\n                <div className=\"mobile-top-logo\">\n                    <div className=\"left-square\"><img src={square_img} alt='' /></div>\n                    <div className=\"mobile-center-logo\"><img src={mobile_logo} alt='' /></div>\n                    <div className=\"mobile-add-content\"><Link to=\"/addContent\"><img src={add_content} alt='' /></Link></div>\n                </div>\n           </div>\n\n            <div className='profile-cover-photo'><img src={userDetailsById?.coverURL ? userDetailsById?.coverURL : user_cover_img} alt='' /></div>\n            <div className='profile-top-sec'>\n                <div className='profile-left-sec'>{userDetailsById.username}</div>\n                <div className='profile-photo'>\n                    <span><img src={userDetailsById?.avatarURL !== '' ? userDetailsById?.avatarURL: user_img} alt='' /></span>\n                </div>\n                <div className='profile-right-sec'>\n                    <div className='profile-right-txt'>@{userDetailsById.username}</div> \n                    <div className='profile-right-btns'>\n                        <ShareMediaContent history={props.history} url_id={userDetailsById.uid} show={showShareMediaContent} close={() => setShowShareMediaContent(false)} />\n                        <ul>\n                            {OtherUser !== '' ?\n                                SubscribedUserStatus === false || SubscribedUserStatus === 'expired' ? \n                                SubscribedUserStatus === 'expired' ? (\n                                <Tooltip title={<h5>Your plan is expired,Please subscribe to chat with user</h5>}>\n                                    <li><Button onClick={ (event) => event.preventDefault() } className='btn'><img src={require('../../../assets/images/Group08.svg').default} alt='' /></Button></li>\n                                </Tooltip>)\n                                    :\n                                ( <Tooltip title={<h5>Please subscribe to chat with user</h5>}>\n                                    <li><Button onClick={ (event) => event.preventDefault() } className='btn'><img src={require('../../../assets/images/Group08.svg').default} alt='' /></Button></li>\n                                </Tooltip>)\n                                     :\n                                <li><Button  onClick={() => handelChatWithUser(OtherUser)} className='btn'><img src={require('../../../assets/images/Group08.svg').default} alt='' /></Button></li>\n                                : <li><Button disabled={true} className='btn'><img src={require('../../../assets/images/Group08.svg').default} alt='' /></Button></li>\n                            }\n                            <li><Button onClick={() => setShowShareMediaContent(true)} className='btn'><img src={require('../../../assets/images/Group09.svg').default} alt='' /></Button></li> \n                        </ul>\n                    </div> \n                </div>\n            </div>\n            <div className='top-profile-social'> \n                <ul>\n                    {/* <li><Link><img src={require('../../../assets/images/Group01.svg').default} alt='' /></Link></li>\n                    <li><Link><img src={require('../../../assets/images/Group02.svg').default} alt='' /></Link></li> */}\n                    <li onClick={() => handleLinks(userDetailsById?.social_links?.facebook)}><img src={facebook_icon} alt=''/></li>\n                    <li onClick={() => handleLinks(userDetailsById?.social_links?.youtube)}><img src={youtube_icon} alt=''/></li>\n                    <li onClick={() => handleLinks(userDetailsById?.social_links?.instagram)}><img src={instagram_icon} alt=''/></li>\n                    <li onClick={() => handleLinks(userDetailsById?.social_links?.twitter)}><img src={twitter_icon} alt=''/></li>\n                    <li onClick={() => handleLinks(userDetailsById?.social_links?.tiktok)}><img src={tiktok_icon} alt=''/></li>\n                </ul>\n            </div>\n            <div className='social-btns'>\n                <Button onClick={() => handleLinks(userDetailsById?.listen_now_link)} className=\"btn btn-danger\">Listen now <img src={require('../../../assets/images/Vector.svg').default} alt='' /></Button>\n                {\n                    OtherUser === authuser.uid ? (\n                        <Button disabled={true} className=\"btn btn-primary\">Subscribe</Button>\n                    ):\n                    (  <Button disabled={OtherUser !== ''  ? false: true} onClick={() => handleSubscribeLink(props?.userProfileId)} className=\"btn btn-primary\">{viewPermission === true ? 'Subscribed' : 'Subscribe'}</Button>)\n                }\n                \n              \n                {/* <Button class=\"btn btn-primary\">Subscribe</Button> */}\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        SubscribedUserStatus: state.subscriberReducer.SubscribedUserStatus,\n        ChatId: state.chatReducer.ChatId,\n        subscribeExpired: state.subscriberReducer.subscribeExpired,\n    }\n  }\n  const actionCreators = {\n    getUserProfileById: getUserProfileById,\n    fetchUser:fetchUser,\n    getUserSubscribeStatus:getUserSubscribeStatus,\n    addConversation:addConversation,\n    getUserSubscriptionExpired:getUserSubscriptionExpired,\n  };\n  \nexport default connect(mapStateToProps, actionCreators)(HomeProfile);\n\n","/home/asus/dapify/src/templates/view/Home/homePage.js",["508","509","510","511","512","513","514","515","516"],"import React, { useState,useEffect } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@material-ui/core'\n\n//Redux\nimport { useSelector, connect } from \"react-redux\"; \nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport {addNewsLetter} from \"../../../Redux/actions/subscriber-actions\";\nimport HomeAbout from './homeAbout';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport HomeAudio from './homeAudio';\nimport HomeVideoImage from './homeVideoAndImage';\nimport * as moment from 'moment';\n\nfunction HomePage(props) {\n    console.log(\"HOMEPAGEPROPSSSS----\", props);\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n      } = useForm({\n        mode: \"onChange\",\n    });\n   \n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\n    const [profileId,setProfileId] = useState();\n    \n\n    useEffect(() => {\n        async function fetchdata(){\n            if(props.userProfileId)\n            {\n                const profileid  = Buffer.from(props.userProfileId, 'base64').toString('ascii');\n                setProfileId(profileid);\n                await props.getUserProfileById(profileid);\n            }\n            else{\n                await props.getUserProfileById(authuser.uid);\n            }\n        }\n        fetchdata();\n        \n    },[authuser.uid]);\n    \n    const onSubmit = async (event) => {\n       \n        const data = {\n          subscribe_to: profileId,\n          email: event.email,\n          subscribe_by: authuser.uid,\n        };\n         await props.addNewsLetter(data);\n    };\n\n    var linkarr = userDetailsById?.links;\n    var contentValues ='';\n    if(linkarr){\n        function sortObj(obj) {\n            return Object.keys(obj).sort().reduce(function (result, key) {\n              result[key] = obj[key];\n              return result;\n            }, {});\n        }\n        linkarr =  sortObj(linkarr);\n        contentValues = Object.values(linkarr);\n    }\n\n    const handleLinks = (event) => {\n        if(event){\n           \n            if (event.indexOf(\"http://\") === 0 || event.indexOf(\"https://\") === 0) {\n                \n                window.open(event);\n            }\n            else{\n                window.open('//'+event);\n            }\n        }\n    };\n\n    return (\n        <>\n            \n            { props?.userProfileId &&\n            (\n             <form onSubmit={handleSubmit(onSubmit)}>\n                <div className='submt-frm'>\n               \n                    <div className='frm-input'>\n                        <input name=\"email\" type='text' placeholder=\"Dont forget to leave your email to keep up with me!\"\n                        {...register('email', {\n                            required: true,\n                            pattern:\n                              /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, })} />\n                        {errors?.email?.type === \"required\" && (\n                            <p className=\"errMsg\">This field is required</p>\n                        )}\n                        {errors?.email?.type === \"pattern\" && (\n                            <p className=\"errMsg\">Email should be valid</p>\n                        )}\n                    </div>\n                    <div className='frm-btn'>\n                        <Button  type=\"submit\" className='btn'>\n                        SUBMIT\n                        </Button>\n                    </div>\n                </div>\n            </form>\n            )}\n            <div className='top-tb-btn'>\n                {  contentValues &&\n                    <ul>\n                        {\n                            contentValues && contentValues.map((val,idx) => \n                            val?.title ?\n                                <li key={idx}><span className='btn' onClick={() => handleLinks(val.url)}>{val.title}</span></li> :\n                            ''\n                            )\n                        }\n                    </ul>\n                }\n            </div>\n        </>\n    );\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n    }\n}\n\nconst actionCreators = { getUserProfileById,fetchUser,addNewsLetter };\nexport default connect(mapStateToProps, actionCreators)(HomePage);\n","/home/asus/dapify/src/templates/components/userProfile.js",["517"],"import React,{useEffect} from 'react'\nimport { useSelector,connect } from \"react-redux\";\nimport { getUserProfileById,fetchUser } from \"../../Redux/actions/auth-actions\";\nimport user_img from '../../assets/images/dummy_user.png';\n\nfunction UserProfile(props) {\n\n    const { userDetailsById,authuser } = useSelector((state) => state.authReducer);\n\n    useEffect( () => {\n        if(authuser)\n            props.getUserProfileById(authuser.uid);\n    }, []);\n\n    \n    return (\n        <div className=\"user-section-top\">\n            <div className=\"user-img\">\n                <img src={userDetailsById?.avatarURL !== '' ? userDetailsById?.avatarURL : user_img} alt='' />\n            </div>\n            <div className=\"gist-name\">{userDetailsById?.username}</div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n    }\n  }\n  const actionCreators = {\n    getUserProfileById: getUserProfileById,\n    fetchUser:fetchUser,\n  };\n  \nexport default connect(mapStateToProps, actionCreators)(UserProfile);\n\n","/home/asus/dapify/src/templates/components/videoplayer.js",[],"/home/asus/dapify/src/templates/view/Subscription/SubscriptionDetails.js",["518"],"import React,{useState,useEffect} from 'react'\nimport { Button } from '@material-ui/core'\nimport { Link } from \"react-router-dom\";\nimport { useSelector, connect } from \"react-redux\";\nimport { fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getUserSubscriptionExpired } from \"../../../Redux/actions/subscriber-actions\";\nimport ExpiryDate from \"../../components/subscriptionExpiryDate\";\nimport {ExpiryDateFormate,CalculateExpiryDays} from \"../../components/calendar_date\";\nimport Loader from './../../../utils/Loader';\n\nfunction SubscriptionDetails(props) {\n\n    const [subsId, setSubsId] = useState('');\n    const [isLoader, setLoader] = useState(true);\n    const { authuser } = useSelector((state) => state.authReducer);\n    const { subscribeExpired,loading } = useSelector((state) => state.subscriberReducer);\n    const [expiredDate, setExpiredDate] = useState('');\n    \n    useEffect(() => {\n        const subsid = Buffer.from(props.Subsc_UserId, 'base64').toString('ascii');\n        setSubsId(subsid);\n       },[props]);\n\n    useEffect(() => {\n        async function fetchdata() {\n            const data ={\n                user_id:authuser.uid,\n                subscriberId:subsId,\n            }\n            await props.getUserSubscriptionExpired(data);\n         }\n         fetchdata();\n\n    },[subsId]);   \n\n    useEffect(() => {\n   \n    },[subsId]);\n\n    useEffect(() => {\n        setLoader(false);\n        if(subscribeExpired.date){\n            var exp_date = ExpiryDate(subscribeExpired.date);\n            if(exp_date !== ''){\n                \n                setExpiredDate(exp_date);\n            }\n            console.log('exp_date',exp_date);\n        }\n\n    },[subscribeExpired,loading]);\n   \n  \n    console.log('subscribeExpired',subscribeExpired.date);\n    \n    return (\n        <div className='subscription-page'>\n             {isLoader ? <Loader isLoader={true} /> : null}\n            <div className='subs-page-inn'>\n                <div className='subs-top-txt'>\n                    <h5>Subscribe</h5>\n                    <p>Subscribe to support me and get exclusive content.(Merch, Advance show tickets, First Listens + More)</p>\n                    <h4>WHY SUPPORT</h4>\n                    <h6>Offer supporters the ability to hear new music before anyone else, see exclusive content and be apart of your creative process.</h6>\n                </div>\n                <div className='subs-item'>\n                    {expiredDate !== '' ?\n\n                        <Button disabled={true} className='btn'>SUbscribed</Button>\n                        :\n                        <Link className='btn' to ={{\n                            pathname: \"/payment\", \n                            state: { \n                                subscribeId: subsId, \n                                type: 'subscription', \n                            }\n                            }} > SUbscribe </Link>\n                    }\n                   \n                    {expiredDate !=='' ? \n                        <div>\n                            <h6>Expired in : <ExpiryDateFormate date={expiredDate} /> (<CalculateExpiryDays date={expiredDate} /> days)</h6>\n                        </div>\n                        :\n                        <h4>$3.99 / Monthly</h4>\n                    }\n                    <h6>+ 2.9% + 30¢ (Stripe Processing Fees)</h6>\n                </div>\n                <div className='subs-item-btm'>\n                    <Link className='btn btn-danger' to ={{\n                        pathname: \"/payment\", \n                        state: { \n                            subscribeId: subsId, \n                            type: 'one_time_support', \n                        }\n                        }} >DAP\n                        </Link>\n                    {/* <Button className='btn'>DAP</Button> */}\n                    <h4>$25 / One time Support</h4>\n                    <p>This is a one time payment [DAP] to support this artist. To access exclusive content, direct communication and more please subscribe.</p>\n                    <h6>+ 2.9% + 30¢ (Stripe Processing Fees)</h6>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        subscribeExpired: state.subscriberReducer.subscribeExpired,\n        authuser: state.authReducer.authuser,\n        loading: state.subscriberReducer.loading,\n    }\n}\n\nconst actionCreators = { getUserSubscriptionExpired,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(SubscriptionDetails);\n\n\n\n","/home/asus/dapify/src/templates/view/Payment/CheckoutForm.js",["519","520","521","522"],"import React, { useState,useEffect } from 'react'\nimport { Link,useHistory } from 'react-router-dom'\nimport {\n  CardNumberElement,\n  CardExpiryElement,\n  CardCVCElement,\n  injectStripe\n} from 'react-stripe-elements'\nimport '../../../assets/css/CheckoutForm.css'\nimport { useSelector, connect } from \"react-redux\";\nimport { UserSubscriptionPayment } from \"../../../Redux/actions/subscriber-actions\";\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { ERROR } from './../../../utils/errors';\nimport Loader from './../../../utils/Loader';\nimport left_arrow_img from '../../../assets/images/Arrow-Left.svg';\nimport logo_img from '../../../assets/images/Logo.svg';\n\n\nfunction CheckoutForm(props,{history }) {\n    console.log('checkout---propss',props);\n    const history_back = useHistory();\n    const { subscribeData,loading } = useSelector((state) => state.subscriberReducer);\n    const [receiptUrl, setReceiptUrl] = useState('');\n    const [CheckoutReqData, setCheckoutReqData] = useState('');\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\n    const [cardPrice, setCardPrice] = useState('');\n    const [isLoader, setLoader] = useState(false);\n\n    \n    useEffect(() => {\n      if(props?.checkoutData !== undefined)\n      {\n        setCheckoutReqData(props.checkoutData);\n      }else{\n        props.history.push('/dashboard'); \n      }\n       \n     },[props]);\n\n     useEffect(() => {\n      if(CheckoutReqData)\n      {\n        if(CheckoutReqData.state.type === 'one_time_support'){\n          setCardPrice(26.06);\n        }else{\n          setCardPrice( 4.45);\n        }\n      }\n       \n     },[CheckoutReqData,props]);\n   \n    const handleSubmit = async event => {\n      event.preventDefault();\n\n      var payment_amt =0;\n      var subscribe_type = '';\n      const { token } = await props.stripe.createToken()\n     console.log('tokennnnnnn',token);\n      // for subscribe = 3.99\n      // for onetimesupport = 25\n\n      if(CheckoutReqData && token){\n        setLoader(true);\n       \n        if(CheckoutReqData.state.type === 'one_time_support'){\n          payment_amt = cardPrice * 100;\n         \n        }else{\n          payment_amt =  cardPrice * 100;\n          \n        }\n\n        console.log('payment_amt----',payment_amt);\n        const data = {\n          amount: payment_amt,\n          source: token.id,\n          receipt_email: props.authuser.email,\n          user_id: props.authuser.uid,\n          subscribe_user_id: CheckoutReqData.state.subscribeId,\n          type:CheckoutReqData.state.type,\n         \n          \n        };\n\n        console.log('mypayment',data);\n        await props.UserSubscriptionPayment(data,history);\n        \n      }else{\n        ERROR('Field value should be valid');\n      }\n    }\n\n    useEffect(() => {\n      setLoader(loading);\n      if(subscribeData?.data){\n        setReceiptUrl(subscribeData.data.charge.receipt_url)\n        var subid = Buffer.from(CheckoutReqData.state.subscribeId).toString('base64');\n        props.props.history.push('/userProfile/'+subid);\n      }\n  },[subscribeData,loading]);\n\n  const handleBack =  (event) => {\n       \n      if(props.location?.prevPath){\n          const path = props.location.prevPath.substring(0,props.location.prevPath.lastIndexOf(\"/\") + 1);\n          \n          if(path === '/userProfile/')\n          {\n              window.location = window.location.origin+props.location.prevPath;\n          }\n          else{\n              history_back.goBack();\n          }\n      }else{\n          history_back.goBack();\n      }\n  };\n\n    if (receiptUrl) {\n        return (\n          <div className=\"success\">\n            <h2>Payment Successful!</h2>\n            <a href={receiptUrl}>View Receipt</a>\n            <Link to=\"/\">Home</Link>\n          </div>\n        )\n      }\n      \n      return (\n\n        <div className='payment-main-page'>\n           {isLoader ? <Loader isLoader={true} /> : null} \n           <div className=\"back-arrow\">\n                <span onClick={handleBack} className=\"btn\"><img src={left_arrow_img} alt='' />Back</span> \n            {/* <Link to=\"/dashboard\"><img src={left_arrow_img} alt='' /> Back</Link> */}\n            </div>\n          <div className='payment-heading'>\n            <div className='payment-logo'>\n              <div className=\"logo\">\n                <img src={logo_img} alt='' />\n              </div>\n            </div>\n            <h2>Card Infomation</h2>\n          </div>\n          <div className='payment-details'>\n            <div className='payment-card'></div>\n            <div className=\"checkout-form\">\n              <p>Amount: ${cardPrice}</p>\n              <form onSubmit={handleSubmit}>\n                <label>\n                  Card details\n                  <CardNumberElement />\n                </label>\n                <label>\n                  Expiration date\n                  <CardExpiryElement />\n                </label>\n                <label>\n                  CVC\n                  <CardCVCElement />\n                </label>\n                <button type=\"submit\" className=\"order-button\">\n                  Pay\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    \n  const mapStateToProps = (state) => {\n    return {\n      subscribeData: state.subscriberReducer.subscribeData,\n      userDetailsById: state.authReducer.userDetailsById,\n      authuser: state.authReducer.authuser,\n      loading : state.subscriberReducer.loading\n    }\n  }\n  \n  const actionCreators = { getUserProfileById,fetchUser,UserSubscriptionPayment };\n  export default connect(mapStateToProps, actionCreators)(injectStripe(CheckoutForm));\n  \n   ","/home/asus/dapify/src/templates/components/calendar_date.js",["523","524","525","526"],"import React, { useState,useEffect} from \"react\";\nimport * as moment from 'moment';\n\nexport const DateDropDown = (props) => {\n    const [selectDate, setSelectDate] = useState('');\n    const date_list = [];\n\n    console.log('propppp==Date',props.selectedDate);\n    useEffect(() => {\n        if(props.selectedDate !== '' && props.selectedDate !== undefined){\n           \n            var dobdate = moment(props.selectedDate).format(\"DD\");\n            // // var dobdate = moment(props.selectedDate, \"DD-MM-YYYY\").format('DD');\n            // console.log('dd----------',dobdate);\n            setSelectDate(dobdate);\n            //console.log('function get date',dobdate.getDate());\n        }\n    }, [props,selectDate]);\n\n    console.log('selectDate',selectDate);\n    // useEffect(() => {\n    //     if(props.selectedDate !== '' && props.selectedDate !== undefined){\n    //         var dobdate = moment(props.selectedDate).format(\"DD\");\n    //        // var dobdate = moment(props.selectedDate, \"DD-MM-YYYY\").format('DD');\n          \n    //         setSelectDate(dobdate);\n    //     }\n    // }, [props]);\n\n    for (var i = 1; i <= 31; i++) {\n       \n        date_list.push(i);\n    }\n  \n    return (\n        <> \n          \n            <option value=\"\">DD</option>\n            {date_list.map((dates) => (\n            <option key={dates} selected={selectDate == dates ? 'selected' : ''} value={dates}>{dates}</option>\n            ))}\n          \n        </>\n        //  (<option selected={selectDate == dates ? 'selected' : ''} value={dates}>{dates}</option>)\n    );\n}\n\nexport const MonthDropDown = (props) => {\n    const [selectMonth, setSelectMonth] = useState('');\n    \n    useEffect(() => {\n       \n        if(props.selectedMonth !== '' && props.selectedMonth !== undefined){\n            //var dobmonth = moment(props.selectedMonth, \"DD-MM-YYYY\").format('MM');\n            \n            var dobmonth = moment(props.selectedMonth).format(\"MM\");\n            // console.log('mm----------',dobmonth);\n          \n            if(dobmonth < 10 ){\n                dobmonth = dobmonth.replace(0, '');\n                setSelectMonth(dobmonth);\n             }else{\n                setSelectMonth(dobmonth);\n             }\n         \n            console.log('setSelectMonth',selectMonth);\n        }\n    }, [props,selectMonth]);\n\n    const monthNames = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n    const month_list = [];\n   \n    for (let i = 0; i < monthNames.length; i++) {\n    \n        month_list.push({ id: i+1, value: monthNames[i] });\n    }\n   \n    return (\n        <>\n            <option value=\"\">MM</option>\n            {month_list.map((month) => (\n\n                <option key={month.id} selected={selectMonth == month.id ? 'selected' : ''}  value={month.id}>{month.value}</option>\n            ))}\n        </>\n    );\n}\n\nexport const YearDropDown = (props) => {\n    const [selectYear, setSelectYear] = useState('');\n    const currentYear = new Date().getFullYear();\n    const year_list = [];\n\n    for (let i = currentYear; i >= 1900; i--) {\n       \n        year_list.push(i);\n    }\n    useEffect(() => {\n       \n        if(props.selectedYear !== '' && props.selectedYear !== undefined){\n           \n            //var dobyear = moment(props.selectedYear, \"DD-MM-YYYY\").format('YYYY');\n\n           \n            var dobyear = moment(props.selectedYear).format(\"YYYY\");\n            console.log('yy----------',dobyear);\n            setSelectYear(dobyear);\n        }\n    }, [props,selectYear]);\n   \n    \n    console.log('selectedYear',selectYear);\n    return (\n        <>\n            <option value=\"\">YYYY</option>\n            {year_list.map((yr) => (        \n                <option key={yr} selected={selectYear == yr ? 'selected' : ''} value={yr}>{yr}</option>\n            ))}\n        </>\n    );\n}\n\n\nexport const PostedTime = (props) => {\n    const [postTime, setPostTime] = useState('');\n\n    useEffect(() => {\n        var datechange = '';\n        if(props.posted_time !== ''){\n            \n            if(props.pageName === 'conversation'){\n                //datechange = moment(props.posted_time).format('MM/DD/YYYY HH:mm:ss');\n\n                var inputstartdate = moment(props.posted_time, 'DD/MM/YYYY HH:mm:ss a').format('MM/DD/YYYY HH:mm:ss');\n                //datechange = moment(new Date(props.posted_time)).format('DD/MM/YYYY HH:mm:ss');\n                var time_val =  moment(inputstartdate).fromNow(); \n                //var time_val = moment.utc(formateDate).local().startOf('seconds').fromNow();\n            \n                setPostTime(time_val);\n            }else{\n                datechange = moment(props.posted_time).format('MM/DD/YYYY HH:mm:ss');\n                //var datechange = moment(new Date(props.posted_time)).format('DD/MM/YYYY HH:mm:ss');\n                \n                var time_val =  moment(datechange).fromNow(); \n                //var time_val = moment.utc(formateDate).local().startOf('seconds').fromNow();\n            \n                setPostTime(time_val);\n            }\n            \n        }\n    }, [props]);\n\n    return (\n        <>\n            {postTime}\n        </>\n    );\n}\n\nexport const ExpiryDateFormate = (props) => {\n    const [postDate, setPostDate] = useState('');\n\n    useEffect(() => {\n       \n            if(props.date !== ''){\n                \n                var d = new Date(props.date),\n                month = '' + (d.getMonth() + 1),\n                day = '' + d.getDate(),\n                year = d.getFullYear();\n        \n            if (month.length < 2) \n                month = '0' + month;\n            if (day.length < 2) \n                day = '0' + day;\n        \n            var resDate = [month,day,year].join('/');\n            setPostDate(resDate);\n        }\n    }, [props]);\n\n    return (\n        <>\n            {postDate}\n        </>\n    );\n}\n\n\n\nexport const CalculateExpiryDays = (props) => {\n    const [expiryDays, setExpiryDays] = useState('');\n\n    useEffect(() => {\n       \n            if(props.date !== ''){\n                \n                var date1 = new Date();\n                var date2 = new Date(props.date);\n              \n                var Difference_In_Time = date2.getTime() - date1.getTime();\n                var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);\n                var resDays = Difference_In_Days.toFixed(0)\n                setExpiryDays(resDays);\n        }\n    }, [props]);\n\n    return (\n        <>\n            {expiryDays}\n        </>\n    );\n}\n   \n\n","/home/asus/dapify/src/Redux/reducers/insights-instagramReducer.js",[],"/home/asus/dapify/src/Redux/reducers/notificationsReducer.js",[],"/home/asus/dapify/src/Redux/reducers/chatReducer.js",[],"/home/asus/dapify/src/Redux/reducers/subscriberReducer.js",[],"/home/asus/dapify/src/Redux/reducers/mediaReducer.js",[],"/home/asus/dapify/src/Redux/reducers/authReducer.js",[],"/home/asus/dapify/src/templates/view/Insights/insightsView.js",["527","528","529","530","531","532","533","534","535"],"import React, { useState, useEffect } from 'react'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport { useSelector, connect } from \"react-redux\";\nimport { getInstgramInsightsUser, getInstaMediaPost, getInstaTopCityAudience, getInstaFollowers, getFollowersGrowth } from \"../../../Redux/actions/insights-Instagram-actions\";\nimport { getUserSubscriberCount } from \"../../../Redux/actions/subscriber-actions\";\nimport NumberToAbbreviate from \"../../components/numberToAbbreviated\";\n//import FollowerChart from './followerChart';\nimport { Button } from '@material-ui/core'\nimport user_img from '../../../assets/images/dummy_user.png';\nimport Loader from './../../../utils/Loader';\nimport { set } from 'react-hook-form';\n\nfunction InsightsView(props) {\n\n    const [isLoader, setLoader] = useState(true);\n    const { subscriberCount } = useSelector((state) => state.subscriberReducer);\n    const { InstaUserPost, InstaAudience, InstaFollowerCount, InstaFollowerGrowth } = useSelector((state) => state.insightsInstgramReducer);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const [grossRevenue, setGrossRevenue] = useState(0);\n    const [period, setPeriod] = useState('week');\n    const [periodText, setPeriodText] = useState('This Week');\n    const [avg_comment_count, setAvg_comment_count] = useState(0);\n    const [avg_like_count, setAvg_like_count] = useState(0);\n    const [avg_engagement_count, setAvg_engagement_count] = useState(0);\n    const [avg_impression_count, setAvg_impression_count] = useState(0);\n    const [avg_reach_count, setAvg_reach_count] = useState(0);\n    const [instaPost, setInstaPost] = useState([]);\n    const [endDate, setEndDate] = useState(new Date());\n    const [FollowerRes, setFollowerRes] = useState([]);\n    const [startDate, setStartDate] = useState(new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate() - 7));\n    const [FollowerColour, setFollowerColour] = useState([]);\n    const [TotalFollower, setTotalFollower] = useState(0);\n    const [CityWiseAudience, setCityWiseAudience] = useState([]);\n    const [FollowerGrowthRate, setFollowerGrowthRate] = useState(0);\n\n\n\n    useEffect(() => {\n\n        async function fetchdata() {\n\n            const data = {\n                user_id: authuser.uid\n            }\n            await props.getUserSubscriberCount(data);\n            const mediadata = {\n                userData: userDetailsById,\n                since: startDate,\n                until: endDate,\n            }\n            await props.getInstaMediaPost(mediadata);\n            const auddata = {\n                userData: userDetailsById,\n            }\n            await props.getInstaTopCityAudience(auddata);\n            await props.getInstaFollowers(auddata);\n        }\n        fetchdata();\n\n    }, [authuser.uid, period]);\n\n    useEffect(() => {\n        if (userDetailsById !== '') {\n            if (userDetailsById?.subscription) {\n                if (userDetailsById?.subscription?.revenue_monthly) {\n                    var monthlyRevenue = userDetailsById?.subscription?.revenue_monthly;\n                    monthlyRevenue = monthlyRevenue.toFixed(2);\n                    setGrossRevenue(monthlyRevenue);\n                }\n            }\n        }\n    }, [userDetailsById]);\n\n    useEffect(() => {\n        if (InstaFollowerCount) {\n\n            // for getting follower growth in last 28 days\n            const now = new Date();\n            var untilldate = new Date();\n            var sincedate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 28);\n            async function fetchdata() {\n                const followerGrowth = {\n                    userData: userDetailsById,\n                    until: untilldate,\n                    since: sincedate,\n                }\n                await props.getFollowersGrowth(followerGrowth);\n            }\n            fetchdata();\n\n\n            setLoader(false);\n            var follower_no = 0;\n            var follower_data = [];\n            var follower_colour = [];\n            if (InstaFollowerCount.followers_count !== 0) {\n\n                follower_no = NumberToAbbreviate(InstaFollowerCount.followers_count);\n                follower_data = [\n                    ['Task', ''],\n                    [InstaFollowerCount.type, InstaFollowerCount.followers_count]\n                ]\n\n                follower_colour = [\n                    '#8a3ab9'\n                ]\n            }\n\n            setTotalFollower(follower_no);\n            setFollowerRes(follower_data);\n            setFollowerColour(follower_colour);\n        }\n\n    }, [InstaFollowerCount]);\n    console.log('InstaUserPost========', InstaUserPost);\n\n    const getPeriod = async (event) => {\n        const now = new Date();\n        var startdate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\n        var enddate = new Date();\n\n        var periodval = event.target.value\n        console.log('evnt', event.target.value)\n        setPeriod(periodval);\n        if (periodval === \"week\") {\n\n            const now = new Date();\n            startdate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\n            enddate = new Date();\n\n            setStartDate(startdate);\n            setEndDate(enddate);\n            setPeriodText('This Week');\n        } else if (periodval === \"day_28\") {\n            const now = new Date();\n            startdate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30);\n            enddate = new Date();\n\n            setStartDate(startdate);\n            setEndDate(enddate);\n            setPeriodText('This Month');\n        } else if (periodval === \"day\") {\n            const now = new Date();\n            startdate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            enddate = new Date();\n\n            setStartDate(startdate);\n            setEndDate(enddate);\n            setPeriodText('Today');\n        }\n    }\n\n\n    useEffect(() => {\n        setCityWiseAudience([]);\n        var city_aud = {};\n        if (InstaAudience) {\n            if (InstaAudience?.data) {\n                if (InstaAudience?.data.length > 0) {\n                    if (InstaAudience?.data[0].name === \"audience_city\") {\n\n                        if (InstaAudience?.data[0]?.values[0]) {\n                            if (InstaAudience?.data[0].values[0]?.value) {\n                                city_aud = InstaAudience?.data[0].values[0].value\n\n                                let audentries = Object.entries(city_aud);\n                                var keysSorted = audentries.sort((a, b) => b[1] - a[1]);\n                                setCityWiseAudience(keysSorted);\n                            }\n                        }\n\n                        console.log('aud sort', keysSorted);\n                    }\n                }\n                console.log('my InstaAudience', InstaAudience);\n\n            }\n        }\n\n    }, [InstaAudience]);\n\n    useEffect(() => {\n        if (InstaFollowerCount.followers_count !== 0) {\n            console.log('kookokokoko', InstaFollowerCount.followers_count);\n            if (InstaFollowerGrowth !== '') {\n                var follower_count = InstaFollowerCount.followers_count;\n                var instaFollowerRate = '';\n                instaFollowerRate = (InstaFollowerGrowth / follower_count) * 100;\n                instaFollowerRate = instaFollowerRate.toFixed(1);\n                setFollowerGrowthRate(instaFollowerRate);\n            }\n        }\n    }, [InstaFollowerGrowth, InstaFollowerCount]);\n\n    console.log('InstaFollowerGrowth----', InstaFollowerGrowth);\n\n    useEffect(() => {\n        setLoader(false);\n        var comment_count = 0;\n        var post_count = 0;\n        var like_count = 0;\n        var avg_comment_count = 0;\n        var avg_like_count = 0;\n        var insight_data = '';\n        var engagement_count = 0;\n        var impression_count = 0;\n        var reach_count = 0;\n        var saves_count = 0;\n        var avg_engagement_count = 0;\n        var avg_impression_count = 0;\n        var avg_reach_count = 0;\n        var engagement_calculate = 0;\n        var avg_engagement_calculate = 0;\n\n        if (InstaUserPost.length !== 0) {\n            var user_follower = InstaUserPost.follower_count;\n            InstaUserPost.map((mediaval) => {\n                insight_data = mediaval.insight_data.data;\n                var imp_val = 0;\n                var engag_val = 0;\n                var reac_val = 0;\n                var saves_val = 0;\n                insight_data.map((insightsval) => {\n\n                    if (insightsval.name === \"engagement\") {\n                        engagement_count = engagement_count + insightsval.values[0].value;\n                        engag_val = insightsval.values[0].value;\n                        console.log('engag_val---in', engag_val);\n                        mediaval['sort_engagement'] = insightsval.values[0].value;\n                    } else if (insightsval.name === \"impressions\") {\n                        impression_count = impression_count + insightsval.values[0].value;\n                        mediaval['sort_impression'] = insightsval.values[0].value;\n                        imp_val = insightsval.values[0].value;\n                    } else if (insightsval.name === \"reach\") {\n                        reach_count = reach_count + insightsval.values[0].value;\n                        reac_val = insightsval.values[0].value;\n                    } else if (insightsval.name === \"saves\") {\n                        saves_count = saves_count + insightsval.values[0].value;\n                        saves_val = insightsval.values[0].value;\n                    }\n\n                    return true;\n                })\n                if (user_follower !== 0) {\n\n                    //engagement_calculate = (engag_val + saves_val) /(imp_val)* 100;\n                    engagement_calculate = engag_val / user_follower * 100;\n                    mediaval['sort_engagement_rate'] = engagement_calculate;\n                    avg_engagement_calculate = avg_engagement_calculate + engagement_calculate;\n                    console.log('avg_engagement_calculate', avg_engagement_calculate);\n                } else {\n                    mediaval['sort_engagement_rate'] = 0;\n                }\n                post_count = post_count + 1;\n                comment_count = comment_count + mediaval.comments_count;\n                like_count = like_count + mediaval.like_count\n\n                return true;\n            });\n            if (post_count !== 0) {\n                avg_comment_count = comment_count / post_count;\n                avg_like_count = like_count / post_count;\n                avg_engagement_count = avg_engagement_calculate / post_count;\n                avg_impression_count = impression_count / post_count;\n                avg_reach_count = reach_count / post_count;\n\n                setAvg_comment_count(avg_comment_count.toFixed(2));\n                setAvg_like_count(avg_like_count.toFixed(2));\n                setAvg_engagement_count(avg_engagement_count.toFixed(2));\n                setAvg_impression_count(avg_impression_count.toFixed(2));\n                setAvg_reach_count(avg_reach_count.toFixed(2));\n            }\n\n            InstaUserPost.sort(function (a, b) {\n                return a[\"sort_engagement_rate\"] - b[\"sort_engagement_rate\"];\n            });\n            console.log('=============mediaval after================', InstaUserPost);\n            setInstaPost(InstaUserPost);\n        } else {\n            setInstaPost([]);\n            setAvg_comment_count(0);\n            setAvg_like_count(0);\n            setAvg_engagement_count(0);\n            setAvg_impression_count(0);\n            setAvg_reach_count(0);\n        }\n    }, [InstaUserPost, period]);\n    console.log('graph====', TotalFollower);\n\n    return (\n        <div>\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <div className=\"insights-head\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        {\n                            TotalFollower !== 0 ?\n                                (\n                                    <div className=\"insights-head-left\">\n\n                                        <div className=\"ins-head-pro\">\n                                            {/* <FollowerChart dummyChart={false} followerData={FollowerRes} colourData={FollowerColour} /> */}\n                                        </div>\n                                        <div className=\"ins-head-inn\">\n\n                                            <div className=\"ins-user\"><img src={userDetailsById?.avatarURL !== '' ? userDetailsById?.avatarURL : user_img} alt='' /></div>\n                                            <div className=\"ins-label\">Audience</div>\n                                            <div className=\"ins-cont\">{TotalFollower}</div>\n                                            {\n                                                FollowerGrowthRate !== 0 && (\n                                                    <div className=\"ins-pr\">Up {FollowerGrowthRate} %</div>\n                                                )}\n\n                                        </div>\n                                    </div>\n                                ) : <div className=\"insights-head-left\">\n\n                                    <div className=\"ins-head-pro\">\n                                        {/* <FollowerChart dummyChart={true} followerData={FollowerRes} colourData={FollowerColour} /> */}\n                                    </div>\n                                    <div className=\"ins-head-inn\">\n\n                                        <div className=\"ins-user\"><img src={userDetailsById?.avatarURL !== '' ? userDetailsById?.avatarURL : user_img} alt='' /></div>\n                                        <div className=\"ins-label\">Audience</div>\n                                        <div className=\"ins-cont\">{TotalFollower}</div>\n                                        {/* <div className=\"ins-pr\">Up 224%</div> */}\n\n                                    </div>\n                                </div>\n                        }\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"insights-head-right\">\n                            <div className=\"ins-label\">Insights</div>\n                            <ul>\n                                <li>\n                                    <div className=\"ins-cont\">{subscriberCount}</div>\n                                    <div className=\"ins-pr\">SUBSCRIBERS</div>\n                                </li>\n                                <li>\n                                    <div className=\"ins-cont\">${grossRevenue}</div>\n                                    <div className=\"ins-pr\">Monthly GROSS REVENUE</div>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"insights-view\">\n                <Tabs defaultActiveKey=\"instagram\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n                    <Tab eventKey=\"facebook\" title=\"Facebook\">\n                        Facebook\n                    </Tab>\n                    <Tab eventKey=\"youtube\" title=\"Youtube\">\n                        Youtube\n                    </Tab>\n                    <Tab eventKey=\"instagram\" title=\"Instagram\">\n                        <div className=\"insights-tabs-main\">\n                            <div className=\"insights-tab-head\"><span>INSTAGRAM ANALYICS</span></div>\n                            <div className=\"insights-tab-inn\">\n                                <div className=\"tab-select\">\n\n                                    <select onChange={getPeriod}>\n                                        <option selected={period === \"day_28\" ? 'selected' : ''} value=\"day_28\">This Month</option>\n                                        <option selected={period === \"week\" ? 'selected' : ''} value=\"week\">This Week</option>\n                                        <option selected={period === \"day\" ? 'selected' : ''} value=\"day\">Today</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"insights-tab-items\">\n                                    <div className=\"insights-tab-item\">\n                                        <div className='ins-item-head'>\n                                            <h2>Best performing post {periodText}</h2>\n                                            <div className=\"ins-item-info\"><span>?</span></div>\n                                        </div>\n                                        <div className='ins-item-main'>\n                                            <div className='performing-inner'>\n                                                <ul>\n                                                    {\n                                                        instaPost.map((post_val) =>\n\n                                                            post_val.media_type === \"VIDEO\" ? (\n                                                                <li>\n                                                                    <video width=\"220\" height=\"165\" poster={post_val.thumbnail_url} controls>\n                                                                        <source src={post_val.media_url} type=\"video/mp4\" />\n                                                                    </video>\n                                                                </li>\n                                                                // <li><img src={post_val.media_url} alt='' /></li>\n                                                            ) :\n                                                                post_val.media_type === \"IMAGE\" ? (\n\n                                                                    <li><img src={post_val.media_url} alt='' /></li>) : ''\n\n                                                        )}\n                                                </ul>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"insights-tab-item\">\n                                        <div className='ins-item-head'>\n                                            <h2>{periodText}</h2>\n                                            <div className=\"ins-item-info\"><span>?</span></div>\n                                        </div>\n                                        <div className='ins-item-main'>\n                                            <div className='progr-inner'>\n                                                <ul>\n\n                                                    <li className='pro-up'>\n                                                        <div className='pro-tbl'>IMpressions</div>\n                                                        <div className='pro-ttl'>{avg_impression_count}</div>\n                                                        {/* <div className='pro-ttl'>19,992,932</div> */}\n                                                    </li>\n                                                    <li className='pro-up'>\n                                                        <div className='pro-tbl'>Engagement rate</div>\n                                                        <div className='pro-ttl'>{avg_engagement_count}%</div>\n                                                        {/* <div className='pro-ttl'>4.09%</div> */}\n                                                    </li>\n                                                    <li className='pro-dwn'>\n                                                        <div className='pro-tbl'>Avg likes per post</div>\n                                                        <div className='pro-ttl'>{avg_like_count}</div>\n                                                        {/* <div className='pro-ttl'>332,147</div> */}\n                                                    </li>\n                                                    <li className='pro-dwn'>\n                                                        <div className='pro-tbl'>Avg views per post</div>\n                                                        <div className='pro-ttl'>{avg_reach_count}</div>\n                                                        {/* <div className='pro-ttl'>1,136,261</div> */}\n                                                    </li>\n                                                    <li className='pro-up'>\n                                                        <div className='pro-tbl'>Avg comments per post</div>\n                                                        <div className='pro-ttl'>{avg_comment_count}</div>\n                                                        {/* <div className='pro-ttl'>8,433</div> */}\n                                                    </li>\n                                                </ul>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"insights-tab-item\">\n                                        <div className='ins-item-head'>\n                                            <h2>Top cities</h2>\n                                            <div className=\"ins-item-info\"><span>?</span></div>\n                                        </div>\n                                        <div className='ins-item-main'>\n                                            <div className='cities-inner'>\n                                                {\n                                                    InstaAudience?.data ? (\n                                                        InstaAudience.data.length > 0 ? (\n                                                            CityWiseAudience.length > 0 ? (\n                                                                <table className='table'>\n                                                                    <tr>\n                                                                        <th colSpan={2}>City</th>\n                                                                        <th>FOLLOWERS</th>\n                                                                    </tr>\n                                                                    {\n                                                                        CityWiseAudience.map((aud_val, index) =>\n                                                                            index < 5 && (\n                                                                                <tr>\n                                                                                    <td>{index + 1}</td>\n                                                                                    <td>\n                                                                                        <div className='cities-name'>\n                                                                                            {/* <span className='cities-img'><img src={require('../../../assets/images/image-16.png').default} alt='' /></span> */}\n                                                                                            <span className='cities-lbl'>{aud_val[0]}</span>\n                                                                                        </div>\n                                                                                    </td>\n                                                                                    <td>{aud_val[1]}</td>\n                                                                                </tr>\n                                                                            )\n                                                                        )}\n\n                                                                </table>\n                                                            ) : <span>Data not found.</span>\n                                                        ) :\n                                                            <span>Data not available with fewer than 100 followers.</span>\n                                                    ) :\n                                                        <span>Data not found.</span>\n                                                }\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </Tab>\n                    <Tab eventKey=\"twitter\" title=\"Twitter\">\n                        Twitter\n                    </Tab>\n                    <Tab eventKey=\"tiktok\" title=\"Tiktok\">\n                        Tiktok\n                    </Tab>\n                </Tabs>\n            </div>\n        </div>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        subscriberCount: state.subscriberReducer.subscriberCount,\n        InstaUserPost: state.insightsInstgramReducer.InstaUserPost,\n        InstaAudience: state.insightsInstgramReducer.InstaAudience,\n        InstaFollowerCount: state.insightsInstgramReducer.InstaFollowerCount,\n        InstaFollowerGrowth: state.insightsInstgramReducer.InstaFollowerGrowth,\n    }\n}\n\nconst actionCreators = { getInstgramInsightsUser, getUserSubscriberCount, getFollowersGrowth, getInstaMediaPost, getInstaTopCityAudience, getInstaFollowers };\nexport default connect(mapStateToProps, actionCreators)(InsightsView);\n\n","/home/asus/dapify/src/templates/view/Insights/facebookConnect.js",["536","537","538","539","540","541","542","543"],"import React,{useEffect, useState} from 'react'\nimport Navbar from '../Navbar';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Tabs, Tab, Accordion } from 'react-bootstrap'\nimport UserProfile from '../../components/userProfile';\nimport { getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { Button } from '@material-ui/core'\nimport { useSelector, connect } from \"react-redux\"; \nimport facebook_icon from '../../../assets/images/logos_facebook.svg';\nimport { getInstgramInsightsUser} from \"../../../Redux/actions/insights-Instagram-actions\";\nimport Loader from './../../../utils/Loader';\n\nfunction FacebookConnect(props) {\n    const [isLoader, setLoader] = useState(true);\n\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\n\n    useEffect(() => {\n        setLoader(false);\n        async function fetchdata(){\n          \n            await props.getUserProfileById(authuser.uid);  \n        }\n        fetchdata();\n        \n    },[authuser.uid]);\n\n    const onSocialLogin = async (event) => {\n        setLoader(true);\n        console.log('userDetailsById.uid==',userDetailsById.uid)\n        if(userDetailsById.uid){\n            var accountLinked = false;\n            if(userDetailsById?.InsightsTokenData)\n            {\n                accountLinked = true;\n            }\n            else{\n                accountLinked = false;\n            }\n            await props.getInstgramInsightsUser(userDetailsById.uid,accountLinked);\n            setLoader(false);\n        }\n    }\n\n    return (\n        \n        <div className=\"text-center mt-3\">\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <p className=\"mb-2\">Connect with facebook to check insights.</p>\n            <Button onClick={(e) => onSocialLogin('facebook')} className=\"btn btn-danger\">Connect with facebook</Button>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n    }\n}\n\nconst actionCreators = {  getUserProfileById,fetchUser,getInstgramInsightsUser };\nexport default connect(mapStateToProps, actionCreators)(FacebookConnect);\n\n\n","/home/asus/dapify/src/templates/view/Notifications/Notification_view.js",["544","545","546","547"],"import React,{useEffect,useState} from 'react'\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport {getUserNotification,RemoveNotification} from \"../../../Redux/actions/notification-actions\";\nimport { useSelector, connect } from \"react-redux\"; \nimport { Button } from '@material-ui/core'\nimport {\n    LIKED_NOTIFICATION,SUBSCRIBED_NOTIFICATION,POST_CONTENT\n   \n} from '../../../Redux/actions/type';\nimport EncryptProfileUrl from \"../../components/encryptProfileUrl\";\n\nfunction NotificationsView(props,{history}) {\n    const { notification_data,Total_notification,loading,RemoveNotificationId} = useSelector((state) => state.notificationsReducer);\n    const { userDetailsById,authuser} = useSelector((state) => state.authReducer);\n    const [initialLimit, setInitialLimit] = useState(2);\n    const [dataLimit, setDataLimit] = useState(2);\n    const [removeIdStatus, setRemoveIdStatus] = useState('');\n\n    useEffect(() => {\n        async function fetchdata(){\n            \n            const data = {\n                user_id : authuser.uid,\n                limit:dataLimit,\n            }\n            await props.getUserNotification(data);\n        }\n        fetchdata();\n        \n    },[authuser.uid,dataLimit,removeIdStatus]);\n\n    console.log('authuser.uid',authuser.uid);\n    console.log('notification_data---',notification_data);\n    console.log('Total_notification',Total_notification);\n\n    const handleNext = () =>  {\n        var new_limit = dataLimit + initialLimit;\n        setDataLimit(new_limit);\n    };\n\n    useEffect(() => {\n\n        if(notification_data.length > 0){\n            console.log('uuuu',notification_data.length);\n            notification_data.map(val => {\n                console.log('uuuu',val);\n                return true;\n            })\n        }\n    },[loading]);\n\n    useEffect(() => {\n\n        setRemoveIdStatus(RemoveNotificationId);\n      \n    },[RemoveNotificationId]);\n\n    console.log('RemoveNotificationStatus',RemoveNotificationId);\n    console.log('notification_data',notification_data);\n    const handleRemoveNotification = (id) => {\n        \n        if(id){\n            async function fetchdata(){\n            const data = {\n                user_id : authuser.uid,\n                notification_id:id,\n            }\n            await props.RemoveNotification(data);\n        }\n        fetchdata();    \n            \n        }\n    }\n\n    const handleClick = (id) => {\n        if(id){\n            var profileUrl =  EncryptProfileUrl(id);\n            props.historyprops.history.push(profileUrl);\n            //window.location = profileUrl;\n        }\n    }\n\n    console.log('propspropsprops',props);\n    console.log('history',props.historyprops);\n\n    return (                      \n        <div className=\"notifictions-view\">\n            {  notification_data.length > 0 ?\n                    \n                    notification_data.map((val) =>\n                    val.id !== removeIdStatus ? (\n                    <div className='notifiction-item'>\n                        <div className='not-user'>\n                            <div className='not-user-img'>\n                                <img onClick={() => handleClick(val.user_id)} src={val.userimage} alt='' />\n                            </div>\n                            <div className='not-user-name'>{val.username}</div>\n                        </div>\n                        <div className='not-txt'>{val.type === \"LIKED_NOTIFICATION\" ? LIKED_NOTIFICATION : val.type === \"SUBSCRIBED_NOTIFICATION\" ? SUBSCRIBED_NOTIFICATION :val.type === \"POST_CONTENT\" ? POST_CONTENT : '' }</div>\n                        <div className='not-drop'>\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                                    <img src={require('../../../assets/images/more_btn.svg').default} alt='' />\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item onClick={() => handleRemoveNotification(val.id)} >Delete</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </div>\n                    </div>) :<p className='dataNfound'>There's no Notifications available...</p>\n                ):<p className='dataNfound'>There's no Notifications available...</p>\n            }\n\n            {   notification_data && (\n                notification_data.length  < Total_notification  ?\n                <div className='LoadMore-btn'>\n                <Button className=\"btn\" type=\"button\" onClick={handleNext} >\n                    Load More...\n                    {/* <CircularProgress /> */}\n                </Button></div> : '' )\n            }\n\n{/* \n            // <div className='notifiction-item'>\n            //     <div className='not-user'>\n            //         <div className='not-user-img'>\n            //             <img src={require('../../../assets/images/GIST1.png').default} alt='' />\n            //         </div>\n            //         <div className='not-user-name'>Jeffery</div>\n            //     </div>\n            //     <div className='not-txt'><b>Commented on your post</b></div>\n            //     <div className='not-drop'>\n            //         <Dropdown>\n            //             <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            //                 <img src={require('../../../assets/images/more_btn.svg').default} alt='' />\n            //             </Dropdown.Toggle>\n\n            //             <Dropdown.Menu>\n            //                 <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n            //             </Dropdown.Menu>\n            //         </Dropdown>\n            //     </div>\n            // </div> */}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        notification_data: state.notificationsReducer.notification_data,\n        Total_notification: state.notificationsReducer.Total_notification,\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        loading:state.notificationsReducer.loading,\n        RemoveNotificationStatus:state.notificationsReducer.RemoveNotificationStatus,\n    }\n}\n\nconst actionCreators = { getUserNotification,RemoveNotification};\nexport default connect(mapStateToProps, actionCreators)(NotificationsView);\n\n","/home/asus/dapify/src/Redux/actions/subscriber-actions.js",["548","549","550","551"],"import {\n  POST_NEWSLETTER_REQUEST, GET_NEWSLETTER_SUCCESS, GET_NEWSLETTER_FAILURE,\n  POST_SUBSCRIPTION_PAYMENT_REQUEST, GET_SUBSCRIPTION_PAYMENT_SUCCESS, GET_SUBSCRIPTION_PAYMENT_FAILURE,\n  POST_SUBSCRIPTION_EXPIRED_REQUEST, GET_SUBSCRIPTION_EXPIRED_SUCCESS, GET_SUBSCRIPTION_EXPIRED_FAILURE,\n  POST_AUDIENCE_DATA_REQUEST, GET_AUDIENCE_DATA_SUCCESS, GET_AUDIENCE_DATA_FAILURE,\n  POST_SUBSCRIBEUSER_STATUS_REQUEST, GET_SUBSCRIBEUSER_STATUS_SUCCESS, GET_SUBSCRIBEUSER_STATUS_FAILURE,\n  SUBSCRIBED_NOTIFICATION, GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, POST_USER_SUBSCRIBEUSER_COUNT_REQUEST, GET_USER_SUBSCRIBEUSER_COUNT_FAILURE,\n  POST_CREATE_STRIPE_ACCOUNT_REQUEST, GET_CREATE_STRIPE_ACCOUNT_SUCCESS, GET_CREATE_STRIPE_ACCOUNT_FAILURE,\n  POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST, GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS, GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE,\n  POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS, GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE,\n  POST_USER_PAYOUT_REQUEST, GET_USER_PAYOUT_SUCCESS, GET_USER_PAYOUT_FAILURE,\n  \n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport axios from 'axios';\n// For firebase registration \nimport {\n  PAYMENT_LINK, USER_NOTIFICATION,\n  CREATE_STRIPE_ACCOUNT,CREATE_STRIPE_ACCOUNT_LINK,GET_USER_STRIPE_ACCOUNT_DETAILS,GET_USER_STRIPE_ACCOUNT_LOGIN_LINK,\n  SEND_PAYOUT_REQUEST,PayoutFees,\n\n} from './api_url';\n\n\nexport const addNewsLetter = (data, history) => async (dispatch) => {\n\n  try {\n\n    dispatch({ type: POST_NEWSLETTER_REQUEST, payload: true });\n\n    firebaseConfig.firestore().collection('news_letter/').doc().set({\n\n      postedAt: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n      subscribeTo: data.subscribe_to,\n      email: data.email,\n      subscribeBy: data.subscribe_by,\n\n    }).then(function () {\n\n      dispatch({ type: GET_NEWSLETTER_SUCCESS, payload: true });\n      Success('Added Successfully');\n\n    }).catch(function (error) {\n      ERROR(error.message);\n      dispatch({ type: GET_NEWSLETTER_FAILURE, payload: error });\n\n    })\n  } catch (error) {\n    dispatch({ type: GET_NEWSLETTER_FAILURE, payload: error.message });\n    ERROR(error.message);\n    // throw error;\n  }\n};\n\n//subscription payment\nexport const UserSubscriptionPayment = (data, history) => async (dispatch) => {\n\n  try {\n    console.log('postdata', data);\n\n    dispatch({ type: POST_SUBSCRIPTION_PAYMENT_REQUEST, payload: true });\n\n    const response = await axios.post(PAYMENT_LINK, data);\n    var subid = data.subscribe_user_id;\n    var usrid = data.user_id;\n    console.log('ressssss', response);\n    if (response.status === 200) {\n      var post_price = 0;\n      var subscribe_type = '';\n      if (data.type === 'subscription') {\n        post_price = 3.99;\n        subscribe_type = \"monthly\";\n      } else {\n        post_price = 25;\n        subscribe_type = \"one_time_support\";\n      }\n\n      const milliseconds = response.data.charge.created * 1000 // 1575909015000\n      var paymentDate = new Date(milliseconds)\n\n      const Transactiondata = {\n        subscribed_by: usrid,\n        recieved_by: subid,\n        charge_id: response.data.charge.id,\n        price: post_price,\n        date: paymentDate,\n        url: response.data.charge.receipt_url,\n        subscribe_type: subscribe_type,\n      }\n\n      const postData =\n      {\n        [subid + '_SUBSCRIBER']: {\n\n          chargeId: response.data.charge.id,\n          date: paymentDate,\n          price: post_price,\n          receipt_url: response.data.charge.receipt_url,\n          type: 'subscriber',\n          subscribe_type: subscribe_type,\n        }\n      }\n      await firebaseConfig.firestore().collection('users').doc(usrid).set({\n        subscribed_list: postData\n      }, {\n        merge: true\n      }).then(function (docres) {\n\n        const subscribeUserData =\n        {\n          [usrid + '_RECIEVER']: {\n\n            date: paymentDate,\n            price: post_price,\n            type: 'reciever',\n            subscribe_type: subscribe_type,\n          }\n        }\n\n        firebaseConfig.firestore().collection('users').doc(subid).set({\n          subscribed_list: subscribeUserData\n        }, {\n          merge: true\n        }).then(function (docres) {\n          var sender_user_id = usrid;\n          var reciever_user_id = subid;\n          var revenue_price = post_price;\n\n\n          const transData = updateTransactionHistory(Transactiondata)\n            .then(function () {\n\n              const responseRevenue = updateRevenue(sender_user_id, reciever_user_id, revenue_price)\n                .then(async function () {\n                  await sendNotification(data.subscribe_user_id, data.user_id);\n                  dispatch({ type: GET_SUBSCRIPTION_PAYMENT_SUCCESS, payload: response });\n                  console.log('response', response);\n                  Success('Payment Successfully');\n\n\n                }).catch(function (error) {\n                  ERROR(error.message);\n                  dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error.message });\n                })\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n              dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n            });\n\n        }).catch(function (error) {\n          ERROR(error.message);\n          console.log('false', error.message);\n          dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n        });\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n        dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error });\n      });\n\n    } else {\n      dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: false });\n      console.log('false', response);\n      ERROR('Something went wrong');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIPTION_PAYMENT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\nasync function updateRevenue(sender_user_id, reciever_user_id, revenue_price) {\n  try {\n\n    if (sender_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(sender_user_id);\n      res.get().then((doc) => {\n\n        if (doc.exists) {\n          var sender_data = doc.data();\n          if (sender_data?.subscription) {\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if (sender_data.subscription?.revenue_monthly) {\n              fetch_price = revenue_price + sender_data.subscription.revenue_monthly;\n            }\n            else {\n              fetch_price = fetch_price + revenue_price;\n            }\n            if (sender_data.subscription?.total_send_amount) {\n              fetch_total_send = revenue_price + sender_data.subscription.total_send_amount;\n            }\n            else {\n              fetch_total_send = fetch_total_send + revenue_price;\n            }\n            if (sender_data.subscription?.total_recieve_amount) {\n              fetch_total_recieve = sender_data.subscription.total_recieve_amount;\n            }\n            else {\n              fetch_total_recieve = 0;\n            }\n\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n          else {\n\n            const sender_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: revenue_price,\n              total_recieve_amount: 0,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(sender_user_id).set({\n              subscription: sender_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n\n      });\n    }\n    if (reciever_user_id) {\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(reciever_user_id);\n      res.get().then((doc) => {\n\n        if (doc.exists) {\n          var reciever_data = doc.data();\n          if (reciever_data?.subscription) {\n            var fetch_price = 0;\n            var fetch_total_send = 0;\n            var fetch_total_recieve = 0;\n\n            if (reciever_data.subscription?.revenue_monthly) {\n              fetch_price = revenue_price + reciever_data.subscription.revenue_monthly;\n            }\n            else {\n              fetch_price = fetch_price + revenue_price;\n            }\n            if (reciever_data.subscription?.total_send_amount) {\n              fetch_total_send = reciever_data.subscription.total_send_amount;\n            }\n            else {\n              fetch_total_send = 0;\n            }\n            if (reciever_data.subscription?.total_recieve_amount) {\n              fetch_total_recieve = reciever_data.subscription?.total_recieve_amount + revenue_price;\n            }\n            else {\n              fetch_total_recieve = fetch_total_recieve + revenue_price;\n            }\n\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: fetch_price,\n              total_send_amount: fetch_total_send,\n              total_recieve_amount: fetch_total_recieve,\n\n            }\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n          else {\n            const reciever_post_data = {\n              price: 3.99,\n              revenue_monthly: revenue_price,\n              total_send_amount: 0,\n              total_recieve_amount: revenue_price,\n            }\n            firebaseConfig.firestore().collection('users').doc(reciever_user_id).set({\n              subscription: reciever_post_data\n            }, {\n              merge: true\n            }).then(function (docres) {\n              return true;\n            }).catch(function (error) {\n              ERROR(error.message);\n              console.log('false', error.message);\n\n            });\n          }\n        }\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n\n      });\n\n    }\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nasync function updateTransactionHistory(transactionData) {\n  try {\n    firebaseConfig.firestore().collection('subscription_history/').doc().set(transactionData)\n      .then(function () {\n        return true;\n      }).catch(function (error) {\n        ERROR(error.message);\n        console.log('false', error.message);\n      })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// For get user media content \nexport const getUserSubscriptionExpired = (data) => async dispatch => {\n  try {\n\n    var resData = '';\n    dispatch({ type: POST_SUBSCRIPTION_EXPIRED_REQUEST, payload: true });\n    if (data.subscriberId) {\n      console.log('sub000000', data);\n      var subid = data.subscriberId + '_SUBSCRIBER';\n      console.log('=============subid==========', subid);\n      var query = firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var subsData = doc.data();\n            var subscribeobj = subsData.subscribed_list;\n\n            if (Object.keys(subscribeobj).includes(subid)) {\n              resData = subscribeobj[subid];\n              dispatch({ type: GET_SUBSCRIPTION_EXPIRED_SUCCESS, payload: resData });\n            } else {\n              dispatch({ type: GET_SUBSCRIPTION_EXPIRED_SUCCESS, payload: resData });\n            }\n          })\n\n        }).catch(function (error) {\n\n          console.log('error===============', error);\n          dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: false });\n        })\n    } else {\n      dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIPTION_EXPIRED_FAILURE, payload: error });\n  }\n};\n\n\n// export const getAudienceNew = (data) => async dispatch => {\n//   try {\n\n//     dispatch({ type: POST_AUDIENCE_DATA_REQUEST, payload: true });\n//     if (data.user_id) {\n\n//       var subscribeobj = [];\n//       await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n//        .get().then(function (querySnapshot) {\n//         querySnapshot.forEach(doc => {\n//           var UserData = doc.data();\n//           subscribeobj = UserData.subscribed_list;\n//           var audience_res =[];\n//           if(subscribeobj !== ''){\n\n//             Object.keys(subscribeobj).forEach(async (val, index) => {\n//               if(val.includes('_RECIEVER')){\n//                 var  recv_id = val.replace('_RECIEVER', '');\n//                 if(recv_id){\n\n//                     var userref = await firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id);\n//                     userref.get().then(snapshot1 => {\n\n//                       snapshot1.forEach(doc => {\n\n//                         var aud_arr = doc.data();\n//                         if(data.type === \"search\"){\n\n//                           console.log('audname',aud_arr.username);\n//                           console.log('searchname',data.search_keyword);\n\n//                           if(aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())){\n\n//                             const audience = {\n//                               aud_id : recv_id,\n//                               aud_name :aud_arr.username,\n//                               aud_profile: aud_arr.avatarURL,\n//                             }\n\n//                             audience_res.push(audience);\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }else{\n\n//                             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                           }\n//                         }else{\n//                           const audience = {\n//                             aud_id : recv_id,\n//                             aud_name :aud_arr.username,\n//                             aud_profile: aud_arr.avatarURL,\n//                           } \n\n//                           audience_res.push(audience);\n//                           dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//                         }\n\n//                       })\n//                     })\n//                   }\n\n//               }else{\n//                 dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//               }\n//             })\n//             console.log('audienceaudience',audience_res);\n\n\n//           }else{\n//             dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res});\n//           }\n//         })\n\n//       }).catch(function (error) {\n//         dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n//         ERROR(error.message);\n//       })\n//     } \n\n//   } catch (error) {\n//     dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: error });\n//     ERROR(error.message);\n//   }\n// };\n\n\nexport const getAudience = (data) => async dispatch => {\n  try {\n    dispatch({ type: POST_AUDIENCE_DATA_REQUEST, payload: true });\n    if (data.user_id) {\n      var audience_res = [];\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n            subscribeobj = UserData.subscribed_list;\n            var i = 0;\n            if (subscribeobj !== '') {\n\n              if (data.type === \"search\") {\n                var recver_arr = [];\n                getAudienceDetails(i);\n                function getAudienceDetails(i) {\n                  var val = Object.keys(subscribeobj);\n\n                  if (i > Object.keys(subscribeobj).length - 1) {\n                    dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res });\n                    return;\n                  }\n\n                  if (val[i]) {\n\n                    var recv_id = '';\n                    var Recsubiddata = '';\n                    if (val[i].includes('_RECIEVER')) {\n                      recv_id = val[i].replace('_RECIEVER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                    }\n                    if (val[i].includes('_SUBSCRIBER')) {\n                      recv_id = val[i].replace('_SUBSCRIBER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                    }\n\n                    if (recv_id !== '') {\n\n                      firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id)\n                        .get().then(snapshot1 => {\n\n                          if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n                                if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n\n                                  const audience = {\n                                    aud_id: recv_id,\n                                    aud_name: aud_arr.username,\n                                    aud_profile: aud_arr.avatarURL,\n                                  }\n\n\n                                  if (!recver_arr.includes(recv_id)) {\n                                    recver_arr.push(recv_id);\n                                    audience_res.push(audience);\n                                  }\n\n                                }\n                              }\n                            })\n                          } else {\n                            if (Recsubiddata.date !== '') {\n                              var Rec_subs_date = Recsubiddata.date;\n                              var rec_checkDate = new Date();\n\n                              const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                              var rec_cloneDate = new Date(milliseconds)\n\n                              //for monthly subscription\n\n                              rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                              if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                                snapshot1.forEach(doc => {\n                                  if (doc.data() !== undefined) {\n                                    var aud_arr = doc.data();\n                                    if (aud_arr.username.toLowerCase().includes(data.search_keyword.toLowerCase())) {\n\n                                      const audience = {\n                                        aud_id: recv_id,\n                                        aud_name: aud_arr.username,\n                                        aud_profile: aud_arr.avatarURL,\n                                      }\n\n\n                                      if (!recver_arr.includes(recv_id)) {\n                                        recver_arr.push(recv_id);\n                                        audience_res.push(audience);\n                                      }\n\n                                    }\n                                  }\n                                })\n                              }\n                            }\n                          }\n\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        }).catch(function (error) {\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        })\n                    } else {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }\n\n                  }\n                }\n              } else {\n                var recver_arr1 = [];\n                getAudienceDetails(i);\n                function getAudienceDetails(i) {\n\n                  var val = Object.keys(subscribeobj);\n\n                  if (i > Object.keys(subscribeobj).length - 1) {\n\n                    dispatch({ type: GET_AUDIENCE_DATA_SUCCESS, payload: audience_res });\n                    return;\n                  }\n\n                  if (val[i]) {\n\n                    var recv_id = '';\n                    var Recsubiddata = '';\n\n                    if (val[i].includes('_RECIEVER')) {\n                      recv_id = val[i].replace('_RECIEVER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_RECIEVER'];\n                    }\n                    if (val[i].includes('_SUBSCRIBER')) {\n                      recv_id = val[i].replace('_SUBSCRIBER', '');\n                      Recsubiddata = subscribeobj[recv_id + '_SUBSCRIBER'];\n                    }\n\n                    console.log('auddatata=======', Recsubiddata);\n                    if (recv_id !== '') {\n\n                      firebaseConfig.firestore().collection(\"users\").where('uid', \"==\", recv_id)\n                        .get().then(snapshot1 => {\n                          if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                            snapshot1.forEach(doc => {\n                              if (doc.data() !== undefined) {\n                                var aud_arr = doc.data();\n\n                                const audience = {\n                                  aud_id: recv_id,\n                                  aud_name: aud_arr.username,\n                                  aud_profile: aud_arr.avatarURL,\n                                }\n                                console.log('recv_id', recv_id);\n                                console.log('recver_arr', recver_arr1);\n                                if (!recver_arr1.includes(recv_id)) {\n                                  recver_arr1.push(recv_id);\n                                  audience_res.push(audience);\n                                }\n                              }\n                            })\n                          }\n                          else {\n                            if (Recsubiddata.date !== '') {\n                              var Rec_subs_date = Recsubiddata.date;\n                              var rec_checkDate = new Date();\n\n                              const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                              var rec_cloneDate = new Date(milliseconds)\n\n                              //for monthly subscription\n\n                              rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                              if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                                snapshot1.forEach(doc => {\n                                  if (doc.data() !== undefined) {\n                                    var aud_arr = doc.data();\n\n                                    const audience = {\n                                      aud_id: recv_id,\n                                      aud_name: aud_arr.username,\n                                      aud_profile: aud_arr.avatarURL,\n                                    }\n                                    console.log('recv_id', recv_id);\n                                    console.log('recver_arr', recver_arr1);\n                                    if (!recver_arr1.includes(recv_id)) {\n                                      recver_arr1.push(recv_id);\n                                      audience_res.push(audience);\n                                    }\n                                  }\n                                })\n                              }\n                            }\n                          }\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        }).catch(function (error) {\n                          i = i + 1;\n                          getAudienceDetails(i);\n                        })\n                    } else {\n                      i = i + 1;\n                      getAudienceDetails(i);\n                    }\n\n                  }\n                }\n              }\n\n            } else {\n              dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: false });\n\n        })\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_AUDIENCE_DATA_FAILURE, payload: error });\n\n  }\n};\n\nexport const getUserSubscribeStatus = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_SUBSCRIBEUSER_STATUS_REQUEST, payload: true });\n    if (data.user_id) {\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n            subscribeobj = UserData.subscribed_list;\n\n            if (Object.keys(subscribeobj).length > 0) {\n\n              if (Object.keys(subscribeobj).includes(data.subscribe_id + '_SUBSCRIBER')) {\n                var subiddata = subscribeobj[data.subscribe_id + '_SUBSCRIBER'];\n              \n                if(subiddata.subscribe_type === \"one_time_support\"){\n                  dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n\n                }else{\n\n                  if (subiddata.date !== '') {\n                    var subs_date = subiddata.date;\n                    var checkDate = new Date();\n  \n                    const milliseconds = subs_date.seconds * 1000 // 1575909015000\n                    var cloneDate = new Date(milliseconds)\n  \n                    //for monthly subscription\n  \n                    cloneDate.setDate(cloneDate.getDate() + 30);\n                    if (cloneDate.getTime() > checkDate.getTime()) {\n  \n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n                    }\n                    else {\n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: 'expired' });\n                    }\n  \n                  } else {\n                    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                  }\n                }\n               \n              } else {\n                if (Object.keys(subscribeobj).includes(data.subscribe_id + '_RECIEVER')) {\n                  var Recsubiddata = subscribeobj[data.subscribe_id + '_RECIEVER'];\n                  if(Recsubiddata.subscribe_type === \"one_time_support\"){\n                    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n  \n                  }else{\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n                        dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: true });\n                      }\n                      else {\n                        dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                      }\n\n                    } else {\n                      dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                    }\n                  }\n                } else {\n                  dispatch({ type: GET_SUBSCRIBEUSER_STATUS_SUCCESS, payload: false });\n                }\n              }\n\n            } else {\n\n              dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: false });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: false });\n\n        })\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_SUBSCRIBEUSER_STATUS_FAILURE, payload: error });\n\n  }\n};\n\n\nasync function sendNotification(to_id, from_id) {\n  try {\n\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(to_id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n        var Unread_Notification_Count = 0;\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            var fromname = '';\n            const fromres = await firebaseConfig.firestore().collection(\"users\").doc(from_id);\n            fromres.get().then((fromdoc) => {\n\n              if (!fromdoc.exists) {\n\n                fromname = \"\";\n              }\n              else {\n                fromname = fromdoc.data().username;\n              }\n            });\n            console.log(doc.data().Notification_tokens);\n            const notification_data = {\n\n              \"title\": \"Subscribed\",\n              \"body\": fromname + ' ' + SUBSCRIBED_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens,\n            }\n            if (doc.data()?.Unread_Notification) {\n              Unread_Notification_Count = doc.data().Unread_Notification + 1;\n            } else {\n              Unread_Notification_Count = 1;\n            }\n\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n            if (notification_response.status === 200) {\n\n              var notifypostdata = {};\n              var notification_id = '';\n              const notifydocRef = firebaseConfig.firestore().collection('notifications').doc()\n              console.log('datanotifyyyy', notifydocRef);\n              notification_id = notifydocRef.id;\n\n              notifypostdata[notification_id] = {\n\n                time: moment(new Date()).format(\"MM/DD/YYYY HH:mm:ss\"),\n                type: \"SUBSCRIBED_NOTIFICATION\",\n                user_id: from_id,\n                status: 'unread',\n                flag: true,\n\n              }\n              firebaseConfig.firestore().collection('notifications/').doc(to_id).set(notifypostdata, { merge: true }).then(function () {\n                firebaseConfig.firestore().collection('users/').doc(to_id).update({\n                  'Unread_Notification': Unread_Notification_Count,\n                }).then(function (docres) {\n\n                }).catch(function (error) {\n                  ERROR(error.message);\n\n                });\n              }).catch(function (error) {\n                console.log(error.message);\n              })\n\n            }\n          }\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\nexport const getUserSubscriberCount = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_SUBSCRIBEUSER_COUNT_REQUEST, payload: true });\n    if (data.user_id) {\n      var subscriberCount = 0;\n      var subscribeobj = [];\n      await firebaseConfig.firestore().collection('users').where('uid', \"==\", data.user_id)\n        .get().then(function (querySnapshot) {\n          querySnapshot.forEach(doc => {\n            var UserData = doc.data();\n\n            if (UserData?.subscribed_list) {\n              subscribeobj = UserData.subscribed_list;\n              let i = 0;\n              Object.keys(subscribeobj).map(async function (subkeyid) {\n                if (subkeyid.includes('_RECIEVER')) {\n                  var sub_id = subkeyid.replace('_RECIEVER', '');\n                  const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n                  subres.get().then(async (subdoc) => {\n\n                    if (!subdoc.exists) {\n\n                    }\n                    else {\n                      var Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n\n                      if(Recsubiddata.subscribe_type === \"one_time_support\"){\n                        subscriberCount = subscriberCount + 1;\n                        if (i >= Object.keys(subscribeobj).length - 1) {\n                          dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, payload: subscriberCount });\n                        }\n                      }else{\n                        if (Recsubiddata.date !== '') {\n                          var Rec_subs_date = Recsubiddata.date;\n                          var rec_checkDate = new Date();\n  \n                          const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                          var rec_cloneDate = new Date(milliseconds)\n  \n                          //for monthly subscription\n  \n                          rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                          if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n                            subscriberCount = subscriberCount + 1;\n                            if (i >= Object.keys(subscribeobj).length - 1) {\n                              dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_SUCCESS, payload: subscriberCount });\n                            }\n                          }\n                        }\n                      }\n                    }\n                  })\n                  i = i + 1;\n                } else {\n                  i = i + 1;\n                }\n              })\n\n            } else {\n\n              dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: subscriberCount });\n            }\n          })\n\n        }).catch(function (error) {\n          dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: false });\n        })\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_SUBSCRIBEUSER_COUNT_FAILURE, payload: error });\n\n  }\n};\n\n\n//subscription payment\nexport const CreateStripeAccount = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_CREATE_STRIPE_ACCOUNT_REQUEST, payload: true });\n      \n    if(data.type === 'Update' && data.AccountId !== ''){\n      const acc_data ={\n        account: data.AccountId,\n        refresh_url :data.refresh_url, \n        return_url :data.return_url,\n\n      }\n\n      const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK,acc_data);\n      if(response1.status === 200){\n        if(response1.data.accountLink?.url){\n          window.location = response1.data.accountLink.url;\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS, payload: response1.data});\n        }else{\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      }else{\n        dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n        console.log('false');\n        ERROR('Something went wrong');\n      }\n    }else{\n      \n    \n        const create_data={\n          email: data.userdata.email,\n        }\n        const response = await axios.post(CREATE_STRIPE_ACCOUNT,create_data);\n      \n        console.log('create account ressssss', response);\n        if (response.status === 200) {\n          \n          if(response.data.account.id){\n            \n            const acc_res_data = {\n              accountId :response.data.account.id,\n            }\n            const resp = await firebaseConfig.firestore().collection('users').doc(data.userdata.uid).update({ 'connected_account': acc_res_data })\n            .then(async function (docres) {\n              const acc_data ={\n                account: response.data.account.id,\n                refresh_url :data.refresh_url, \n                return_url :data.return_url,\n        \n              }\n        \n              const response1 = await axios.post(CREATE_STRIPE_ACCOUNT_LINK,acc_data);\n              if(response1.status === 200){\n                if(response1.data.accountLink?.url){\n                  window.location = response1.data.accountLink.url;\n                  dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_SUCCESS, payload: response1.data });\n                }else{\n                  dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n                  console.log('false');\n                  ERROR('Something went wrong');\n                }\n              }else{\n                dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n                console.log('false');\n                ERROR('Something went wrong');\n              }\n            }).catch(function (error) {\n              ERROR(error.message);\n              dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: error });\n            });\n            \n          }else {\n            dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n            console.log('false');\n            ERROR('Something went wrong');\n          }\n        } else {\n          dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n          console.log('false');\n          ERROR('Something went wrong');\n        }\n      }\n  } else {\n    dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_CREATE_STRIPE_ACCOUNT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\n//stripe account data\nexport const getUserAccountDetails = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_STRIPE_ACCOUNT_DETAILS_REQUEST, payload: true });\n  \n    const acc_data={\n      accountId: data.accountId,\n     }\n    const response = await axios.post(GET_USER_STRIPE_ACCOUNT_DETAILS,acc_data);\n   \n    console.log('get account ressssss', response);\n    if (response.status === 200) {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_SUCCESS, payload: response.data.accountData });\n      \n    } else {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_DETAILS_FAILURE, payload: error.message });\n   // ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\n\n// create stripe login link\nexport const CreateStripeAccountLoginLink = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_STRIPE_ACCOUNT_LOGIN_LINKS_REQUEST, payload: true });\n  \n    const acc_data={\n      accountId: data.AccountId,\n     }\n    const response = await axios.post(GET_USER_STRIPE_ACCOUNT_LOGIN_LINK,acc_data);\n   \n    console.log('get account login  link', response);\n    if (response.status === 200) {\n      if(response.data?.loginLink){\n        if(response.data?.loginLink.url){\n          window.location = response.data?.loginLink.url;\n        }\n      }\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_SUCCESS, payload: response.data });\n      \n    } else {\n      dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_STRIPE_ACCOUNT_LOGIN_LINKS_FAILURE, payload: error.message });\n    //ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n\nexport const RequestUserPayout = (data) => async (dispatch) => {\n\n  try {\n   \n    if(data){\n    dispatch({ type: POST_USER_PAYOUT_REQUEST, payload: true });\n  \n    const payout_data={\n      accountId: data.accountId,\n      amount :  data.amount,\n      currency: data.currency,\n      transfer_group: data.transfer_group,\n     }\n    const response = await axios.post(SEND_PAYOUT_REQUEST,payout_data);\n   \n    console.log('payout response', response);\n    if (response.status === 200) {\n      if(response.data?.transfer){\n        if(response.data?.transfer){\n\n          var transfer_res = response.data.transfer;\n          const milliseconds = transfer_res.created * 1000 ;// 1575909015000\n          var paymentDate = new Date(milliseconds);\n          var payamt = data.amount/100;\n          var totalValue = payamt + data.revenue * PayoutFees;\n          var remainingAmount = (data.revenue - totalValue);\n          var remaining_amt = parseFloat(remainingAmount.toFixed(2));\n\n          const subscriptiondata = {\n           \n            revenue_monthly: remaining_amt,\n            last_payment: paymentDate,\n           \n          }\n          var Payoutdata = {};\n          const payoutRef = firebaseConfig.firestore().collection('transaction_history').doc();\n            \n            var payoutRef_id = payoutRef.id;\n\n            Payoutdata[payoutRef_id] = {\n            user_id: data.uid,\n            transfer_id: transfer_res.id,\n            transaction_id: transfer_res.balance_transaction,\n            date: paymentDate,\n            payout_amount: payamt,\n            remaining_amount : remaining_amt,\n\n          }\n          firebaseConfig.firestore().collection('transaction_history/').doc(data.uid).set(Payoutdata, { merge: true })\n          .then(function () {\n            \n            firebaseConfig.firestore().collection('users').doc(data.uid).set({\n              subscription: subscriptiondata\n            }, {\n              merge: true\n            }).then(function (docres) {\n                dispatch({ type: GET_USER_PAYOUT_SUCCESS, payload: transfer_res.balance_transaction });\n                Success('Transfer Successfully');\n            }).catch(function (error) {\n                dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error });\n                console.log('false', error.message);\n  \n            });\n      \n          }).catch(function (error) {\n            ERROR(error.message);\n            dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error });\n      \n          })\n        }\n      }\n      \n    } else {\n      dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: false });\n      console.log('false');\n      ERROR('Something went wrong');\n    }\n  } else {\n    dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: false });\n    console.log('false');\n    ERROR('Something went wrong');\n  }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_PAYOUT_FAILURE, payload: error.message });\n    ERROR(error.message);\n    console.log('error.message', error.message);\n    // throw error;\n  }\n};\n","/home/asus/dapify/src/templates/components/encryptProfileUrl.js",["552"],"import React from \"react\";\n\n\nfunction EncryptProfileUrl(id){\n    \n    if(id !== ''){\n        \n       // const path = window.location.origin;\n        const ids = Buffer.from(id).toString('base64');\n        const url = '/userProfile/' + ids;\n        return url;\n    }\n   \n  };\n\nexport default EncryptProfileUrl;","/home/asus/dapify/src/templates/components/musicComponent.js",["553","554","555","556"],"import React, {useEffect,useState } from 'react'\n//import useState from 'react-usestateref'\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, fetchUser } from \"../../Redux/actions/auth-actions\";\nimport { MediaMusicBookmark } from \"../../Redux/actions/media-actions\";\nimport {PostedTime} from './calendar_date';\nimport MediaLike from './mediaLike';\n//import MediaShare from './mediaShare';\nimport { Button } from '@material-ui/core'\nimport MediaBookmark from './mediaBookmark';\nimport { Media, Player, controls } from 'react-media-player'\nimport {MediaDuration} from './mediaDuration';\nimport audio_img from '../../assets/images/upload-aud.png';\nimport dot_button from '../../assets/images/three-dots-vertical.svg';\nimport { confirm } from \"react-confirm-box\";\nimport ShareMediaMusic from './shareMediaMusic';\nimport CustomPlayPause from './customPlayPause';\nimport user_img from '../../assets/images/dummy_user.png';\n\nconst { PlayPause,CurrentTime,isPlaying } = controls;\n\nfunction MusicComponent(props) {\n    const options = {\n        labels: {\n            confirmable: \"Confirm\",\n            cancellable: \"Cancel\"\n        }\n    }\n\n    // To prevent multiple playing at same time\n    useEffect(() => {\n        document.addEventListener(\"play\", function(evt)\n        {\n            \n            if(window.$_currentlyPlaying && window.$_currentlyPlaying !== evt.target)\n            {\n                \n                window.$_currentlyPlaying.pause();\n            } \n            window.$_currentlyPlaying = evt.target;\n\n        }, true);\n      \n        \n    }, [props.mediaData]);\n\n    const [showShareMediaContent, setShowShareMediaContent] = useState(false);\n    \n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n   \n    useEffect(() => {\n      \n        async function fetchdata(){\n            if(props.uid)\n                await  props.getUserProfileById(props.uid);\n            }\n            fetchdata(); \n    }, [props.mediaData]);\n   \n  \n    const handleDialog = async (mediaId, uid) => {\n        if(mediaId){\n            var data ='';\n            var result = {};\n            \n            const results = await confirm(\"Are you sure you want to remove ?\",options);\n            if (results) {\n            \n                for(var i in props.mediaData.user_bookmark)\n                {\n                    if(i !== uid){   \n                        result[i] = props.mediaData.user_bookmark[i];\n                    }\n                }\n               \n                data = {\n                    id: mediaId,\n                    user_bookmark: result,\n                    type: 'remove_bookmark',\n                    by_id :uid,\n                };\n\n                await props.MediaMusicBookmark(data);\n            }\n        }\n    };\n\n    return (\n       \n        <div id={props.mediaId}>\n           \n            <div className='post-item-top'>\n                <div className='post-item-user'>\n                    <span className='item-user-img'><img src={props.mediaData.avatarurl_doc ? props.mediaData.avatarurl_doc : user_img} alt='' /></span>\n                    <span className='item-user-name'>{props.mediaData.username_doc}</span>\n                </div>\n                { props.type === \"home\" &&\n                    <div className='post-tr-bt'>\n                    <span>Released a new</span>\n                        <b>Track</b>\n                    </div>\n                }\n                { props.type === \"bookmark\" &&\n                    <div className='post-tr-bt'>\n                        {/* <span onClick={() =>  handleDialog(props.mediaData.id,authuser.uid)}><img src={dot_button} alt='' /></span> */}\n                        <Button  onClick={() =>  handleDialog(props.mediaData.id,authuser.uid)} type=\"button\" class=\"btn-close btn\" aria-label=\"Close\"></Button>\n                    {/* <span>Released a new</span>\n                        <b>Track</b> */}\n                    </div>\n                }\n            </div>\n            <div className='post-item-main'>\n                <div className='post-item-vid'>\n              \n                    {/* <div className='item-vid'><img src={props.bookmarkAvatarurl ? props.bookmarkAvatarurl: userDetailsById?.avatarURL} alt='' /></div> */}\n                    <div className='item-vid'><img src={props.mediaData?.cover_art ? props.mediaData?.cover_art : audio_img} alt='' /></div>\n                    <div className='item-vid-btn'><img src={require('../../assets/images/Play.svg').default} alt='' /></div>\n                </div>\n                <div className='post-item-cont'>\n                    <div className='post-item-dtl'>\n                        <div className='post-item-nm'>{props.mediaData.caption}</div>\n                        <div className='post-item-txt'>{props.mediaData.caption} <br />\n                        \n                        <MediaDuration mediaURL={props.mediaData.media_url} />\n                     \n                        </div>\n                        <div className='post-item-btn'>\n                            <Media>\n                           \n                                <div className=\"media\">\n                                    <div className=\"media-player\">\n                                        <Player src={props.mediaData.media_url} />\n                                    </div>\n                                   \n                                    <div className=\"media-controls\">\n                                       \n                                        <CurrentTime/>\n                                        <PlayPause/>\n                                        \n                                    </div>\n                                </div>\n                            </Media>\n                        </div>\n                    </div>\n                    <ShareMediaMusic media_id={props.mediaData.id} history={props.history} url_id={userDetailsById.uid} show={showShareMediaContent} close={() => setShowShareMediaContent(false)} /> \n                    <div className='post-item-btns'>\n                        <Button  className='btn'>\n                            <MediaBookmark user_media_id={props.userProfileId ? props.userProfileId : authuser.uid} mediaBookmarkData={props.mediaData.user_bookmark} userid={authuser.uid} media_id={props.mediaData.id} />\n                        </Button>\n                        <Button onClick={() => setShowShareMediaContent(true)} className='btn'>\n                            <img src={require('../../assets/images/icon.svg').default} alt='' />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            { props.type === \"home\" &&\n                (\n                    <div className='post-item-btm'>\n                       \n                        {/* <ShareMediaMusic history={props.history} url_id={userDetailsById.uid} show={showShareMediaMusic} close={() => setShowShareMediaMusic(false)} user_media_id={props.userProfileId ? props.userProfileId : authuser.uid} mediaSharedata={props.mediaData.user_share} userid={authuser.uid} media_id={props.mediaData.id}/> */}\n                        {/* <div className='post-item-tim'>Today</div> */}\n                        <div className='post-item-tim'><PostedTime pageName=\"music\" posted_time={props.mediaData.postedAt} /></div>\n                        <div className='post-item-lik'>\n                            <MediaLike user_media_id={props.userProfileId ? props.userProfileId : authuser.uid} postedById={props.mediaData.postedById} mediaLikedata={props.mediaData.user_likes} userid={authuser.uid} media_id={props.mediaData.id} />\n                            <span><img src={require('../../assets/images/Shape-iic.svg').default} alt='' /> {props.mediaData.share_count} shares</span>\n\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n     \n    }\n}\nconst actionCreators = {\n    getUserProfileById: getUserProfileById,\n    fetchUser: fetchUser,\n    MediaMusicBookmark:MediaMusicBookmark,\n};\n\nexport default connect(mapStateToProps, actionCreators)(MusicComponent);\n\n","/home/asus/dapify/src/templates/view/Settings/linkSetting.js",["557","558"],"import React, { useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Accordion } from 'react-bootstrap'\nimport ac_arrow_img from '../../../assets/images/ac-arrow.svg';\nimport headphone_img from '../../../assets/images/headphone.png';\nimport { Button } from '@material-ui/core'\n//Redux\n\nimport { useSelector, connect } from \"react-redux\";\nimport { updateUserProfile, getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { ERROR } from './../../../utils/errors';\nimport 'antd/dist/antd.css'\nimport Loader from './../../../utils/Loader';\n\nfunction LinkSetting(props, { history }) {\n  const [linkError_0, SetLinkError_0] = useState('');\n  const [linkError_1, SetLinkError_1] = useState('');\n  const [linkError_2, SetLinkError_2] = useState('');\n  const [linkError_3, SetLinkError_3] = useState('');\n  const [alllinkError, SetAllLinkError] = useState('');\n  const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n  const [isLoader, setLoader] = useState(false);\n\n  useEffect(() => {\n    async function fetchdata(){\n    if(authuser)\n     await props.getUserProfileById(authuser.uid);\n     setLoader(loading);\n    }\n    fetchdata();\n  },[authuser.uid]);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: \"onChange\",\n  });\n\n  useEffect(() => {\n    reset({\n      title_0: userDetailsById.links?.link_0?.title,\n      title_1: userDetailsById.links?.link_1?.title,\n      title_2: userDetailsById.links?.link_2?.title,\n      title_3: userDetailsById.links?.link_3?.title,\n      link_0: userDetailsById.links?.link_0?.url,\n      link_1: userDetailsById.links?.link_1?.url,\n      link_2: userDetailsById.links?.link_2?.url,\n      link_3: userDetailsById.links?.link_3?.url,\n      listen_now_link: userDetailsById.listen_now_link,\n    });\n\n  }, [userDetailsById, reset]);\n\n \n  const validateListenLink = (link) => {\n    if (link) {\n      const regex = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?');\n      return regex.test(link);\n    }\n    else {\n      return true;\n    }\n  };\n\n  const validateMultiTitle = (title) => {\n    if (title) {\n      return true;\n    }\n  };\n\n  const validateMultiLink = (link) => {\n    if (link) {\n      const regex = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?');\n      return regex.test(link);\n    }\n  };\n\n  const onSubmit = async (event) => {\n\n    // validation\n    var flag = 'true';\n    if (event.link_0 || event.title_0) {\n      if (event.link_0 && event.title_0) {\n        SetLinkError_0('');\n        flag = true;\n      } else {\n        SetLinkError_0('Link and title both should be required.');\n        flag = false;\n      }\n    }\n    if (event.link_1 || event.title_1) {\n      if (event.link_1 && event.title_1) {\n        SetLinkError_1('');\n        flag = true;\n      } else {\n        SetLinkError_1('Link and title both should be required.');\n        flag = false;\n      }\n    }\n    if (event.link_2 || event.title_2) {\n      if (event.link_2 && event.title_2) {\n        SetLinkError_2('');\n        flag = true;\n      } else {\n        SetLinkError_2('Link and title both should be required.');\n        flag = false;\n      }\n    }\n    if (event.link_3 || event.title_3) {\n      if (event.link_3 && event.title_3) {\n        SetLinkError_3('');\n        flag = true;\n      } else {\n        SetLinkError_3('Link and title both should be required.');\n        flag = false;\n      }\n    }\n    console.log('event.title_0',event.title_0);\n    console.log('event.link_0',event.link_0);\n    console.log('event.title_1',event.title_1);\n    console.log('event.link_1',event.link_1);\n    console.log('event.title_2',event.title_2);\n    console.log('event.link_2',event.link_2);\n    console.log('event.title_3',event.title_3);\n    console.log('event.link_3',event.link_3);\n    if((event.title_0 !== \"\" && event.link_0 !== \"\") || (event.title_1 !== \"\" && event.link_1 !== \"\" ) ||\n     (event.title_2 !== \"\" && event.link_2 !== \"\" ) || (event.title_3 !== \"\" && event.link_3 !== \"\" ))\n    {\n      SetAllLinkError('');\n      flag = true;\n    }else{\n      if(event.title_0 === \"\" && event.link_0 === \"\" && event.title_1 === \"\" && event.link_1 === \"\" &&\n      event.title_2 === \"\" && event.link_2 === \"\" && event.title_3 === \"\" && event.link_3 === \"\" && event.listen_now_link !== \"\")\n      {\n        SetAllLinkError('');\n        flag = true;\n      }else{\n        SetAllLinkError('Fill at least one field');\n        flag = false;\n      }\n    }\n\n    if (flag === true) {\n\n      var links = {};\n      if (event.title_0 !== \"\" && event.link_0 !== \"\") {\n        links['link_0'] = {\n\n          title: event.title_0,\n          url: event.link_0\n        }\n      }\n      if (event.title_1 !== \"\" && event.link_1 !== \"\") {\n        links['link_1'] = {\n\n          title: event.title_1,\n          url: event.link_1\n        }\n      }\n      if (event.title_2 !== \"\" && event.link_2 !== \"\") {\n        links['link_2'] = {\n\n          title: event.title_2,\n          url: event.link_2\n        }\n      }\n      if (event.title_3 !== \"\" && event.link_3 !== \"\") {\n        links['link_3'] = {\n\n          title: event.title_3,\n          url: event.link_3,\n        }\n      }\n     \n      const data = {\n        listen_links: event.listen_now_link,\n        update_type: 'links',\n        links,\n      }\n      await props.updateUserProfile(data);\n    }\n  };\n\n  return (\n   \n    <form onSubmit={handleSubmit(onSubmit)}>\n      {isLoader ? <Loader isLoader={true} /> : null} \n      <Accordion.Header>LISTEN NOW + LINKS <img src={ac_arrow_img} alt='' /></Accordion.Header>\n      <Accordion.Body>\n        <div className=\"tab-inner-content\">\n          <div className=\"form-row1\">\n            <label>Listen Now LINK <img src={headphone_img} alt='' /></label>\n            <input name=\"listen_now_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Preffered link to music platform URL (www.yourlink.com)\"  {...register(\"listen_now_link\", {\n              validate: validateListenLink,\n            })} />\n            {errors?.listen_now_link?.type === \"validate\" && (\n              <p className=\"errMsg\">Invalid url</p>\n            )}\n          </div>\n\n          <div className=\"form-row1 inp2\">\n            <label>LINK 1</label>\n\n            <input name=\"title_0\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link Title\" {...register(\"title_0\", {\n              validate: validateMultiTitle,\n\n            })} />\n\n            <input name=\"link_0\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link URL (http://www.yourlink.com)\"  {...register(\"link_0\", {\n              validate: validateMultiLink,\n\n            })} />\n            {errors?.link_0?.type === \"validate\" && (\n              <p className=\"errMsg\">Link should be valid</p>\n            )}\n            {linkError_0 ?\n              <p className=\"errMsg\">{linkError_0}</p> : ''\n            }\n          \n          </div>\n\n          <div className=\"form-row1 inp2\">\n            <label>LINK 2</label>\n            <input name=\"title_1\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link Title\" {...register(\"title_1\", {\n              validate: validateMultiTitle,\n\n            })} />\n\n            <input name=\"link_1\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link URL (http://www.yourlink.com)\" {...register(\"link_1\", {\n              validate: validateMultiLink,\n\n            })} />\n            {errors?.link_1?.type === \"validate\" && (\n              <p className=\"errMsg\">Link should be valid</p>\n            )}\n            {linkError_1 ?\n              <p className=\"errMsg\">{linkError_1}</p> : ''\n            }\n           \n          </div>\n\n          <div className=\"form-row1 inp2\">\n            <label>LINK 3</label>\n            <input name=\"title_2\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link Title\" {...register(\"title_2\", {\n              validate: validateMultiTitle,\n\n            })} />\n\n            <input name=\"link_2\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link URL (http://www.yourlink.com)\" {...register(\"link_2\", {\n              validate: validateMultiLink,\n\n            })} />\n            {errors?.link_2?.type === \"validate\" && (\n              <p className=\"errMsg\">Link should be valid</p>\n            )}\n            {linkError_2 ?\n              <p className=\"errMsg\">{linkError_2}</p> : ''\n            }\n           \n          </div>\n\n          <div className=\"form-row1 inp2\">\n            <label>LINK 4</label>\n            <input name=\"title_3\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link Title\" {...register(\"title_3\", {\n              validate: validateMultiTitle,\n\n            })} />\n\n            <input name=\"link_3\" type=\"text\" className=\"form-control log-inp\" placeholder=\"Link URL (http://www.yourlink.com)\" {...register(\"link_3\", {\n              validate: validateMultiLink,\n\n            })} />\n            {errors?.link_3?.type === \"validate\" && (\n              <p className=\"errMsg\">Link should be valid</p>\n            )}\n            {linkError_3 ?\n              <p className=\"errMsg\">{linkError_3}</p> : ''\n            }\n           \n          </div>\n          {alllinkError ?\n              <p className=\"errMsg\">{alllinkError}</p> : ''\n          }\n        </div>\n        <div class=\"tab-inner-content1\">\n          <div className=\"login-via\">\n            <Button  type=\"submit\" className=\"log-btn btn\">\n              Update\n            </Button>\n          </div> \n        </div>\n      </Accordion.Body>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userDetailsById: state.authReducer.userDetailsById,\n    authuser: state.authReducer.authuser,\n    loading : state.authReducer.loading\n\n  }\n}\n\nconst actionCreators = { getUserProfileById, updateUserProfile,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(LinkSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/revenueSetting.js",["559","560","561","562"],"import React, { useState, useEffect } from 'react'\nimport user_img from '../../../assets/images/dummy_user.png';\nimport { Table } from 'react-bootstrap'\nimport { Button } from '@material-ui/core'\n//Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getUserSubscriberCount } from \"../../../Redux/actions/subscriber-actions\";\nimport { CreateStripeAccount, getUserAccountDetails, CreateStripeAccountLoginLink, RequestUserPayout } from \"../../../Redux/actions/subscriber-actions\";\nimport {\n    PayoutFees\n\n} from '../../../Redux/actions/api_url';\nimport PaidContent from './paidContent';\nimport { ERROR, Success } from '../../../utils/errors';\nimport Loader from '../../../utils/Loader';\n\n\nfunction RevenueSetting(props, { history }) {\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    const { subscriberCount, stripeAccountData, userStripeAccount, payoutId, loading } = useSelector((state) => state.subscriberReducer);\n    const [MonthlyRevenue, setMonthlyRevenue] = useState(0);\n    const [showPaidContent, setShowPaidContent] = useState(false);\n    const [isLoader, setLoader] = useState(false);\n    const [AccountId, setAccountId] = useState('');\n    const [StripeFees, setStripeFees] = useState(0);\n    const [PayoutPrice, setPayoutPrice] = useState(0);\n   // const [Payout_Id, setPayoutId] = useState('');\n    const [AccountDetails, setAccountDetails] = useState({\n        code: '',\n        error: '',\n    });\n    const [ExternalAccountDetails, setExternalAccountDetails] = useState({\n        bankName: '',\n        lastFourDigitNo: '',\n        accountType: '',\n    });\n\n    useEffect(() => {\n        setLoader(loading);\n        async function fetchdata() {\n            if (authuser)\n\n\n                await props.getUserProfileById(authuser.uid);\n            const data = {\n                user_id: authuser.uid\n            }\n            await props.getUserSubscriberCount(data);\n        }\n        fetchdata();\n    }, [authuser.uid,payoutId]);\n\n    useEffect(() => {\n        setLoader(loading);\n        \n    }, [loading]);\n    // console.log('user account data before', userDetailsById);\n\n\n    useEffect(() => {\n       \n        if (userDetailsById?.subscription) {\n            if (userDetailsById?.subscription?.revenue_monthly) {\n                var revenueMonthly = userDetailsById?.subscription.revenue_monthly;\n                if (revenueMonthly !== 0) {\n                    var amount = revenueMonthly;\n                    var calculate_fees = amount * PayoutFees;\n                    setStripeFees(calculate_fees.toFixed(2));\n                    var payout_amt = amount - calculate_fees;\n                    setPayoutPrice(payout_amt.toFixed(2));\n                    setMonthlyRevenue(revenueMonthly.toFixed(2));\n                } else {\n                    setMonthlyRevenue(0);\n                    setStripeFees(0);\n                    setPayoutPrice(0);\n                }\n            }else{\n                setMonthlyRevenue(0);\n                setStripeFees(0);\n                setPayoutPrice(0);\n            }\n        }\n        if (userDetailsById?.connected_account) {\n            if (userDetailsById.connected_account?.accountId) {\n                setAccountId(userDetailsById.connected_account.accountId);\n\n                async function fetchdata() {\n                    const data = {\n                        accountId: userDetailsById.connected_account.accountId,\n                    }\n                    await props.getUserAccountDetails(data);\n                }\n                fetchdata();\n\n            }\n        }\n    }, [userDetailsById,payoutId]);\n\n\n    console.log('user account data', userDetailsById);\n    console.log('user account data', userDetailsById);\n    useEffect(() => {\n        if (userStripeAccount) {\n            if (userStripeAccount?.capabilities) {\n                var Usercapability = userStripeAccount?.capabilities;\n\n                if (Usercapability.card_payments === 'inactive' && Usercapability.transfers === 'inactive') {\n                    setAccountDetails(\n                        {\n                            error: \"Card payments, payouts and transfers are disabled for this account until missing information is updated.\",\n                            code: 5,\n                        }\n                    )\n                } else if (Usercapability.card_payments === 'inactive') {\n                    setAccountDetails(\n                        {\n                            error: \"Card payments is disabled for this account until missing information is updated.\",\n                            code: 4,\n                        }\n                    )\n                } else if (Usercapability.transfers === 'inactive') {\n                    setAccountDetails(\n                        {\n                            error: \"Transfers is disabled for this account until missing information is updated.\",\n                            code: 3,\n                        }\n                    )\n\n                } else if (Usercapability.card_payments === 'pending' || Usercapability.transfers === 'pending') {\n                    setAccountDetails(\n                        {\n                            error: \"This account is pending.\",\n                            code: 2,\n                        }\n                    )\n                } else {\n                    setAccountDetails(\n                        {\n                            error: \"\",\n                            code: 1,\n                        }\n                    )\n                }\n            }\n            if (userStripeAccount?.external_accounts) {\n                var externalAccounts = userStripeAccount?.external_accounts;\n\n                if (externalAccounts?.data?.[0]) {\n                    console.log('externalacc===data', externalAccounts?.data);\n                    var extrnl_acc = externalAccounts?.data?.[0];\n                    if (extrnl_acc !== '') {\n\n                        if (extrnl_acc.object === 'bank_account') {\n                            setExternalAccountDetails({\n                                bankName: extrnl_acc.bank_name,\n                                lastFourDigitNo: '**** **** ***** ' + extrnl_acc?.last4,\n                                accountType: 'Bank Account',\n                            })\n                        } else if (extrnl_acc.object === 'card') {\n                            setExternalAccountDetails({\n                                bankName: extrnl_acc?.bank_name,\n                                lastFourDigitNo: \"**** **** ***** \" + extrnl_acc?.last4,\n                                accountType: 'Debit Card',\n                            })\n                        } else {\n                            setExternalAccountDetails({\n                                bankName: \"\",\n                                lastFourDigitNo: \"\",\n                                accountType: \"\",\n                            })\n                        }\n                    }\n                }\n            }\n\n        }\n    }, [userStripeAccount]);\n\n    console.log('userStripeAccount', userStripeAccount);\n    const handleCreateAccount = (e) => {\n        if (userDetailsById) {\n            const data = {\n\n                refresh_url: window.location.origin+'/settings',\n                return_url: window.location.origin+'/settings',\n                userdata: userDetailsById,\n                type: 'Create',\n                AccountId: '',\n            }\n            props.CreateStripeAccount(data);\n        }\n    }\n\nconsole.log('-----window=location -',window.location.origin );\n\n    const handleRevenueProfile = (e) => {\n\n        if (userStripeAccount.details_submitted === false) {\n            const data = {\n\n                refresh_url: window.location.origin+'/settings',\n                return_url: window.location.origin+'/settings',\n                userdata: userDetailsById,\n                type: 'Update',\n                AccountId: userStripeAccount.id,\n            }\n            props.CreateStripeAccount(data);\n\n        } else {\n            const data = {\n\n                AccountId: userStripeAccount.id\n            }\n            props.CreateStripeAccountLoginLink(data);\n\n        }\n    }\n\n    const handleRequestPayout = (e) => {\n\n        if (userDetailsById.connected_account.accountId) {\n            if (PayoutPrice !== 0) {\n\n                var amount = Math.round(PayoutPrice * 100);\n                var revenue_monthly = userDetailsById.subscription.revenue_monthly;\n                const payout_data = {\n                    revenue: revenue_monthly,\n                    uid: userDetailsById.uid,\n                    accountId: userDetailsById.connected_account.accountId,\n                    amount: amount,\n                    currency: 'usd',\n                    transfer_group: 'Testing',\n                }\n\n                console.log('payout_data', payout_data);\n                props.RequestUserPayout(payout_data);\n            }\n            else {\n                ERROR(\"Insufficient Balance\");\n            }\n        }\n    }\n\n    return (\n        <div className=\"tab-inner-content social-medias\">\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <PaidContent show={showPaidContent} close={() => setShowPaidContent(false)} />\n            <div className='revenueSettingPage'>\n                <div className='top-user-sec'>\n                    <div className='top-user'>\n                        <div class=\"user-img\">\n                            <img src={userDetailsById?.avatarURL !== '' ? userDetailsById?.avatarURL : user_img} alt='' />\n                        </div>\n                    </div>\n                    <div className='accr-items'>\n                        <div className='accr-item'>\n                            <Table>\n                                <thead>\n                                    <tr>\n                                        <th>Subscribers</th>\n                                        <td>{subscriberCount}</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <th>Monthly Revenue</th>\n                                        <td>${MonthlyRevenue}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Fees</th>\n                                        <td>${StripeFees}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>Payout</th>\n                                        <td>${PayoutPrice}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </div>\n                        {\n                            AccountId !== '' && AccountDetails.code === 1 && MonthlyRevenue !== 0 ?\n                                (\n                                    <div className='accr-card-btn'>\n                                        <div className='login-via'>\n                                            <Button onClick={handleRequestPayout} className=\"log-btn btn\">Request Payout</Button>\n                                        </div>\n                                    </div>) :\n                                \n                                (AccountId !== '' && AccountDetails.code === 1 && MonthlyRevenue === 0 ) ?\n                                    (<div className='accr-item'>\n                                        <div className='accr-item-ttl'>\n                                            <h3>Revenue Profile</h3>\n                                            <Button  onClick={() => { setShowPaidContent(true) }} className='btn'>HOW DO I GET PAID?</Button>\n                                        </div>\n\n\n                                        <div className='accr-item-box'>\n                                            <div className='card'>\n                                                \n                                                { ExternalAccountDetails.bankName !== \"\" ? (\n                                                    <div className='card-body'>\n                                                        <p style={{ color: \"white\" }}>{ExternalAccountDetails.bankName}</p>\n                                                        <p style={{ color: \"white\" }}>{ExternalAccountDetails.lastFourDigitNo}</p>\n\n                                                        <Button style={{ color: \"white\", fontWeight: \"bold\" }} onClick={handleRevenueProfile}>{ExternalAccountDetails.accountType}</Button>\n                                                    </div>\n                                                    ) :\n                                                    (\n                                                    <div className='card-body'>\n                                                        <Button className=\"create-btn btn\" onClick={handleRevenueProfile}>Update Profile</Button>\n                                                    </div>\n                                                    )}\n                                                <p style={{ color: \"white\", fontSize: \"12px\", margin: \"10px\" }}>{AccountDetails.error}</p>\n                                                <div className='card-footer'>\n                                                    <img src={require('../../../assets/images/image20.png').default} alt='' />\n                                                </div>\n                                            </div>\n                                            <div className='accr-card-txt text-center'>DAPIFY TECHNOLOGIES, INC <br /> takes a 17% Fee on all transactions</div>\n                                        </div>\n                                    </div>\n                                    )\n                                    :\n                                \n                                (AccountId !== '' && AccountDetails.code !== 1 ) ?\n\n                                    (<div className='accr-item'>\n                                        <div className='accr-item-ttl'>\n                                            <h3>Revenue Profile</h3>\n                                            <Button  onClick={() => { setShowPaidContent(true) }} className='btn'>HOW DO I GET PAID?</Button>\n                                        </div>\n\n\n                                        <div className='accr-item-box'>\n                                            <div className='card'>\n                                                \n                                                { ExternalAccountDetails.bankName !== \"\" ? (\n                                                    <div className='card-body'>\n                                                        <p style={{ color: \"white\" }}>{ExternalAccountDetails.bankName}</p>\n                                                        <p style={{ color: \"white\" }}>{ExternalAccountDetails.lastFourDigitNo}</p>\n\n                                                        <Button style={{ color: \"white\", fontWeight: \"bold\" }} onClick={handleRevenueProfile}>{ExternalAccountDetails.accountType}</Button>\n                                                    </div>\n                                                    ) :\n                                                    (\n                                                    <div className='card-body'>\n                                                        <Button className=\"create-btn btn\" onClick={handleRevenueProfile}>Update Profile</Button>\n                                                    </div>\n                                                    )}\n                                                <p style={{ color: \"white\", fontSize: \"12px\", margin: \"10px\" }}>{AccountDetails.error}</p>\n                                                <div className='card-footer'>\n                                                    <img src={require('../../../assets/images/image20.png').default} alt='' />\n                                                </div>\n                                            </div>\n                                            <div className='accr-card-txt text-center'>DAPIFY TECHNOLOGIES, INC <br /> takes a 17% Fee on all transactions</div>\n                                        </div>\n                                    </div>\n                                    )\n                                    :\n                                    (<div className='accr-item'>\n                                        <div className='accr-item-ttl'>\n                                            <h3>Revenue Profile</h3>\n                                            <Button onClick={() => { setShowPaidContent(true) }} className='btn'>HOW DO I GET PAID?</Button>\n                                        </div>\n                                        <div className='accr-item-box'>\n                                            <div className='card'>\n                                                <div className='card-body'>\n                                                    <Button onClick={handleCreateAccount} className=\"create-btn btn\">CREATE PROFILE</Button>\n                                                </div>\n                                                <div className='card-footer'>\n                                                    <img src={require('../../../assets/images/image20.png').default} alt='' />\n                                                </div>\n                                            </div>\n                                            <div className='accr-card-txt text-center'>DAPIFY TECHNOLOGIES, INC <br /> takes a 17% Fee on all transactions</div>\n                                        </div>\n                                    </div>\n                                    )\n                        }\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        subscriberCount: state.subscriberReducer.subscriberCount,\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        stripeAccountData: state.subscriberReducer.stripeAccountData,\n        userStripeAccount: state.subscriberReducer.userStripeAccount,\n        payoutId: state.subscriberReducer.payoutId,\n        loading: state.subscriberReducer.loading,\n    }\n}\n// const actionCreators = { getUserProfileById,fetchUser,CreateStripeAccount,CheckStripeBalance };\nconst actionCreators = {\n    getUserProfileById, fetchUser, getUserSubscriberCount, CreateStripeAccount,\n    getUserAccountDetails, CreateStripeAccountLoginLink, RequestUserPayout\n};\n\nexport default connect(mapStateToProps, actionCreators)(RevenueSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/socialLinksSetting.js",["563"],"import React, { useState,useEffect } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@material-ui/core'\n\n//Redux\n\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, updateUserProfile,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\n\nfunction SocialLinksSetting(props, { history }) {\n    const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n    const [isLoader, setLoader] = useState(false);\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm({\n        mode: \"onChange\",\n    });\n\n    useEffect(() => {\n        async function fetchdata(){\n        if(authuser)\n         await props.getUserProfileById(authuser.uid);\n         setLoader(loading);\n        }\n        fetchdata();\n    },[authuser.uid]);\n\n\n    useEffect(() => {\n\n        reset({\n            facebook_link: userDetailsById?.social_links?.facebook,\n            instagram_link: userDetailsById?.social_links?.instagram,\n            tiktok_link: userDetailsById?.social_links?.tiktok,\n            twitter_link: userDetailsById?.social_links?.twitter,\n            youtube_link: userDetailsById?.social_links?.youtube,\n        });\n\n    }, [userDetailsById, reset]);\n\n    const validateURL = (link) => {\n        if(link){\n        const regex = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?');    \n        return regex.test(link);\n        }\n        else{\n            return true;\n        }\n       \n    };\n   \n    const onSubmit = async (event) => {\n\n        const data = {\n            update_type: 'social_links',\n            facebook: event.facebook_link,\n            instagram: event.instagram_link,\n            tiktok: event.tiktok_link,\n            twitter: event.twitter_link,\n            youtube: event.youtube_link,\n        };\n        await props.updateUserProfile(data, props.history);\n\n    };\n\n    return (\n\n        <div className=\"tab-inner-content social-medias\">\n            {isLoader ? <Loader isLoader={true} /> : null} \n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-row1\">\n                    <label>Instagram</label>\n                    <input name=\"instagram_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"PROFILE URL (http://www.Instagram.com/Username)\" \n                    {...register(\"instagram_link\", {\n                        validate: validateURL,\n                    })}/>\n                    {errors?.instagram_link?.type === \"validate\" && (\n                        <p className=\"errMsg\">Invalid url</p>\n                    )}\n                </div>\n\n                <div className=\"form-row1\">\n                    <label>Facebook</label>\n                    <input name=\"facebook_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"PROFILE URL (http://www.Facebook.com/Username)\"\n                    {...register(\"facebook_link\", {\n                       validate: validateURL,\n                    })}/>\n                    {errors?.facebook_link?.type === \"validate\" && (\n                        <p className=\"errMsg\">Invalid url</p>\n                    )}\n                </div>\n\n                <div className=\"form-row1\">\n                    <label>Twitter</label>\n                    <input name=\"twitter_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"PROFILE URL (http://www.Twitter.com/Username)\"\n                    {...register(\"twitter_link\", {\n                        validate: validateURL,\n                    })}/>\n                    {errors?.twitter_link?.type === \"validate\" && (\n                        <p className=\"errMsg\">Invalid url</p>\n                    )}\n                </div>\n\n                <div className=\"form-row1\">\n                    <label>Youtube</label>\n                    <input name=\"youtube_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"PROFILE URL (http://www.Youtube.com/Channelname\"\n                    {...register(\"youtube_link\", {\n                        validate: validateURL,\n                    })}/>\n                    {errors?.youtube_link?.type === \"validate\" && (\n                        <p className=\"errMsg\">Invalid url</p>\n                    )}\n                </div>\n\n                <div className=\"form-row1\">\n                    <label>TikTok</label>\n                    <input name=\"tiktok_link\" type=\"text\" className=\"form-control log-inp\" placeholder=\"PROFILE URL (http://www.TikTok.com/Username\"\n                    {...register(\"tiktok_link\", {\n                       validate: validateURL,\n                    })}/>\n                    {errors?.tiktok_link?.type === \"validate\" && (\n                        <p className=\"errMsg\">Invalid url</p>\n                    )}\n                </div>\n                <div class=\"tab-inner-content1\">\n                    <div className=\"login-via\">\n                        <Button type=\"submit\" className=\"log-btn btn\">\n                        Update\n                        </Button>\n                    </div> \n                </div>\n            </form>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        loading : state.authReducer.loading\n    }\n}\n\nconst actionCreators = { getUserProfileById, updateUserProfile,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(SocialLinksSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/bioSetting.js",["564"],"import React, {useState,useEffect} from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@material-ui/core'\n\n//Redux\n\nimport {  useSelector,connect } from \"react-redux\";\nimport { updateUserProfile,getUserProfileById,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\n\nfunction BioSetting(props, { history }) {\n\n  const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n  const [isLoader, setLoader] = useState(false);\n\n  useEffect(() => {\n    async function fetchdata(){\n    if(authuser)\n     await props.getUserProfileById(authuser.uid);\n      setLoader(loading);\n    }\n    fetchdata();\n},[authuser.uid]);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: \"onChange\",\n  });\n\n  useEffect( () => {\n\n    if(userDetailsById.bio){\n     var biores = userDetailsById.bio.replace(/\\\\n/g, \"\\n\");\n    }\n    reset({\n\n      bio: biores,\n      });\n   \n},[userDetailsById,reset]);\n\n  const onSubmit = async (event) => {\n    const data = {\n      update_type: 'bio',\n      bio: event.bio,\n    };\n    await props.updateUserProfile(data);\n  };\n\n  return (\n    \n    <form onSubmit={handleSubmit(onSubmit)}>\n      {isLoader ? <Loader isLoader={true} /> : null} \n     \n      <div className=\"tab-inner-content1\">\n        <div className=\"form-row1 inp2\">\n          <textarea name=\"bio\" className=\"form-control log-inp\"  placeholder={userDetailsById.bio === \"\" ? \"Enter your Bio here\" : \"\" } {...register('bio', {required: true, })} ></textarea>\n          {errors?.bio?.type === \"required\" && (\n            <p className=\"errMsg\">This field is required</p>\n          )}\n        </div>\n\n        <div className=\"login-via\">\n            <Button  type=\"submit\" className=\"log-btn btn\">\n            Update BIO\n            </Button>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userDetailsById: state.authReducer.userDetailsById,\n    authuser: state.authReducer.authuser,\n    loading : state.authReducer.loading\n  }\n}\n\nconst actionCreators = { getUserProfileById,updateUserProfile,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(BioSetting);\n\n\n","/home/asus/dapify/src/templates/view/Chat_Inbox/groupMessages.js",["565","566","567","568","569","570","571","572","573","574","575"],"import React, { useState, useEffect } from 'react';\nimport {\n    useHistory,\n\n} from \"react-router-dom\";\nimport {\n    Container,\n    Row,\n    Button,\n    Form,\n    InputGroup,\n    Input,\n    //  InputGroupAddon\n} from 'reactstrap';\nimport Moment from 'moment';\nimport { useSelector, connect } from 'react-redux';\nimport firebase from '../../../firebase';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport '../../../assets/css/chat.css';\nimport { getUserProfileById, fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { getAudience } from \"../../../Redux/actions/subscriber-actions\";\nimport { getGroupMessages, sendGroupMessage } from \"../../../Redux/actions/chat-actions\";\nimport { ERROR, Success } from '../../../utils/errors';\nimport user_img from '../../../assets/images/dummy_user.png';\n\nfunction GroupMessages(props) {\n\n    const { audienceData } = useSelector((state) => state.subscriberReducer);\n    const [GroupChats, setGroupChats] = useState([]);\n    const [nickname, setNickname] = useState('');\n    const [roomname, setRoomname] = useState('');\n    const [sender_id, setSender_id] = useState('');\n    const [newchat, setNewchat] = useState('');\n    const [rowCount, setrowCount] = useState(1);\n    const history = useHistory();\n    const { groupMessageList, sendGroupMsgStatus } = useSelector((state) => state.chatReducer);\n    const { userDetailsById, authuser } = useSelector((state) => state.authReducer);\n    console.log('props', props);\n\n\n    useEffect(() => {\n        // const data ={\n        //     user_id : authuser.uid,\n        //     type : 'all'\n        // }\n        props.getUserProfileById(authuser.uid);\n        // props.getAudience(data);\n\n    }, [authuser.uid]);\n\n\n    useEffect(() => {\n        setNewchat('');\n\n        if (props?.room_id) {\n            setRoomname(authuser.uid);\n        }\n        setSender_id(authuser.uid);\n        setNickname(userDetailsById.username);\n\n\n\n    }, [authuser.uid, props?.room_id]);\n\n    useEffect(() => {\n        if (roomname !== '') {\n            setNewchat('');\n            const fetchData = async () => {\n                setNickname(userDetailsById.username);\n\n                const data = {\n                    chat_id: roomname,\n                    uid: authuser.uid,\n                }\n                await props.getGroupMessages(data);\n\n            };\n\n            fetchData();\n        }\n    }, [roomname, sender_id]);\n\n    const onChange = (e) => {\n        e.persist();\n        if(e.target.value.length < 1 ){\n            setrowCount(1)\n        }\n        setNewchat(e.target.value);\n    }\n\n    useEffect(() => {\n        setNickname(userDetailsById.username);\n        setGroupChats(groupMessageList);\n        setNewchat('');\n    }, [groupMessageList, sendGroupMsgStatus]);\n\n\n\n    const submitMessage = async (e) => {\n        e.preventDefault();\n        var checkchat = newchat.trim();\n        if(checkchat.length > 0){\n            if (roomname !== '') {\n\n                const msgData = {\n\n                    sender_id: authuser.uid,\n                    date: Moment(new Date()).format('DD/MM/YYYY HH:mm:ss'),\n                    message: newchat,\n                    type: 'message',\n                    chat_id: roomname,\n                    allSubscriber: audienceData,\n                }\n\n                await props.sendGroupMessage(msgData);\n\n            } else {\n                ERROR(\"Please select user first\");\n            }\n        }else{\n            ERROR(\"Please type something\");\n        }\n\n    };\n\n    const onEnterPress = (e) => {\n        if(e.keyCode === 13 && e.shiftKey === false) {\n          e.preventDefault();\n          submitMessage(e);\n        }\n        else if (e.keyCode === 13 && e.shiftKey === true) {\n            if(rowCount <3){\n                setrowCount(rowCount+1)\n            }\n          \n        }\n      }\n\n    return (\n        <>\n            <div className='right-chat-head'>\n                <h6>Conversation With</h6>\n                <h5>All Subscribers and Followers</h5>\n                <div className='all-chat'>\n                    <ul>\n                        {\n                            audienceData.length > 0 ? (\n\n                                audienceData.map((audienceContent, i) => (\n                                    i < 5 && (\n                                        <li><span><img src={audienceContent?.aud_profile !== '' ? audienceContent?.aud_profile : user_img} alt='' /></span></li>\n                                    )\n                                ))\n                            ) : ''\n                        }\n                        {audienceData.length > 5 &&\n                            (<li><span><img src={require('../../../assets/images/dummy_user_more.png').default} alt='' /></span></li>)\n                        }\n                    </ul>\n                </div>\n            </div>\n            <ScrollToBottom className=\"ChatContent\">\n                <div className='ChatContentDiv'>\n                    {GroupChats.map((item, idx) => (\n                        <div key={idx} className={`${item.sender_id === sender_id ? \"MessageBox RightMessageBox\" : \"MessageBox LeftMessageBox\"}`}>\n                            {item.type === 'join' || item.type === 'exit' ?\n                                <div className=\"ChatStatus\">\n                                    <span className=\"ChatDate\">{item.date}</span>\n                                    <span className=\"ChatContentCenter\"><pre>{item.message}</pre></span>\n                                </div> :\n\n                                <div className=\"ChatMessage\">\n                                    <div className=\"RightBubble\">\n                                        <div className=\"ChatMessageDateTIme\">\n                                            {/* {item.sender_id === sender_id ? \n                                                <span className=\"MsgName\">{nickname}</span>:''\n                                            } */}\n                                            <div className=\"user-item-img\">\n                                                <span><img src={item.sender_id === sender_id ? userDetailsById?.avatarURL ? userDetailsById?.avatarURL : user_img : user_img} alt='' /></span>\n                                            </div>\n                                            {/* <span className=\"MsgDate\"> at {item.date}</span> */}\n                                        </div>\n                                        <div className=\"ChatMessageItem\"><pre>{item.message}</pre></div>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    ))}\n                </div>\n            </ScrollToBottom>\n            <footer className=\"StickyFooter\">\n                <Form className=\"MessageForm\" onSubmit={submitMessage}>\n                    <InputGroup>\n                        <textarea onKeyDown={onEnterPress} className=\"form-control log-inp\" rows={rowCount} name=\"message\" id=\"message\" onChange={onChange} value={newchat} placeholder=\"Type your message...\" />\n                        {/* <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Enter message here\" value={newchat} onChange={onChange} /> */}\n                        <div addonType=\"append\">\n                            <Button variant=\"primary\" type=\"submit\">\n                                <img src={require('../../../assets/images/send-icon.svg').default} alt='' />\n                            </Button>\n                        </div>\n                    </InputGroup>\n                </Form>\n            </footer>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        groupMessageList: state.chatReducer.groupMessageList,\n        audienceData: state.subscriberReducer.audienceData,\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        sendGroupMsgStatus: state.chatReducer.sendGroupMsgStatus,\n    }\n};\n\nconst actionCreators = { getUserProfileById, fetchUser, getAudience, getGroupMessages, sendGroupMessage };\nexport default connect(mapStateToProps, actionCreators)(GroupMessages);\n\n","/home/asus/dapify/src/templates/view/Chat_Inbox/defaultMessagesScreen.js",["576","577","578","579","580","581","582","583","584"],"import React, { useState, useEffect } from 'react';\nimport {\n    useHistory,\n    \n  } from \"react-router-dom\";\nimport {\n    Container, \n    Row, \n    Button,\n    Form,\n    InputGroup\n  //  InputGroupAddon\n} from 'react-bootstrap';\nimport Moment from 'moment';\nimport {useSelector,connect } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport '../../../assets/css/chat.css';\nimport { ERROR ,Success } from '../../../utils/errors';\nimport user_img from '../../../assets/images/dummy_user.png';\n\nfunction DefaultMessages(props) {\n    // console.log('default screen',props);\n    const [newchat, setNewchat] = useState('');\n\n    const onChange = (e) => {\n        e.persist();\n        setNewchat(e.target.value);\n        ERROR(\"Please select user first\");\n    }\n\n   \n     return (\n            <>\n               \n                \n                <ScrollToBottom className=\"ChatContent\">\n                    <div className='ChatContentDiv'>\n                      \n                    </div>\n                </ScrollToBottom>\n                <footer className=\"StickyFooter\">\n                    <Form className=\"MessageForm\" >\n                        \n                        <InputGroup>\n                        <input type=\"text\" name=\"message\" id=\"message\" rows=\"1\" placeholder=\"Type your message...\" value={newchat} onChange={onChange} />\n                            <div addonType=\"append\">\n                           \n                                <Button disabled variant=\"primary\" type=\"submit\">\n                                     <img src={require('../../../assets/images/send-icon.svg').default} alt='' />\n                                </Button>\n                            </div>\n                        </InputGroup>\n                    </Form>\n                </footer>\n            </>\n    );\n}\n\n\nexport default DefaultMessages;\n","/home/asus/dapify/src/templates/view/Chat_Inbox/messages.js",["585","586","587","588","589","590","591","592","593","594","595"],"import React, { useState, useEffect } from 'react';\nimport {\n    useHistory,\n\n} from \"react-router-dom\";\nimport {\n    Container,\n    Row,\n    Button,\n    Form,\n    InputGroup\n    //  InputGroupAddon\n} from 'react-bootstrap';\nimport Moment from 'moment';\nimport { useSelector, connect } from 'react-redux';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport '../../../assets/css/chat.css';\nimport { getUserProfileById, fetchUser, getOtherUserProfileById } from \"../../../Redux/actions/auth-actions\";\nimport { getMessages, sendMessage } from \"../../../Redux/actions/chat-actions\";\nimport { ERROR, Success } from '../../../utils/errors';\nimport user_img from '../../../assets/images/dummy_user.png';\nimport firebaseConfig from \"../../../firebase\";\n\n\nfunction Messages(props) {\n\n    const [chats, setChats] = useState([]);\n    const [nickname, setNickname] = useState('');\n    const [roomname, setRoomname] = useState('');\n    const [sender_id, setSender_id] = useState('');\n    const [reciever_id, setReciever_id] = useState('');\n    const [newchat, setNewchat] = useState('');\n    const [otherUser, setOtherUser] = useState('');\n    const [rowCount, setrowCount] = useState(1);\n\n\n    const history = useHistory();\n    // const { room_id } = useParams();\n    const { messageList, listenerData } = useSelector((state) => state.chatReducer);\n    const { userDetailsById, otherUserDetailsById, authuser } = useSelector((state) => state.authReducer);\n\n    // console.log('props---', props);\n\n    useEffect(() => {\n        setNewchat('');\n        const fetchData = async () => {\n            await props.getUserProfileById(authuser.uid);\n            if (props?.room_id) {\n                setRoomname(props?.room_id);\n            }\n            setSender_id(authuser.uid);\n            setNickname(userDetailsById.username);\n        }\n        fetchData();\n\n    }, [authuser.uid, props?.room_id]);\n\n    // console.log('checkroom', roomname);\n    \n    useEffect(() => {\n        setChats('');\n        setOtherUser('');\n        if (roomname !== '') {\n            setNewchat('');\n\n            const fetchData = async () => {\n                setNickname(userDetailsById.username);\n                var recvdata = (roomname.replace(sender_id, ''));\n                var recvid = (recvdata.replace('_', ''));\n                props.getOtherUserProfileById(recvid);\n                setReciever_id(recvid);\n                const data = {\n                    chat_id: roomname,\n                    uid: authuser.uid,\n                    recv_id: recvid,\n                    path: window.location.pathname,\n                }\n\n                console.log('alltimedata', data.chat_id);\n                await props.getMessages(data);\n\n            };\n\n            fetchData();\n        }\n    }, [roomname, sender_id]);\n\n    useEffect(() => {\n\n        // console.log(\"000000000000\", roomname);\n\n        if (roomname !== '') {\n            setNickname(userDetailsById.username);\n            setChats(messageList);\n            setNewchat('');\n\n            // -------- 1st Method --------\n            // var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n            // CurrenmsgrefListner.child(roomname).off('child_added');\n\n            // -------- 2nd Method --------\n            // firebaseConfig.database().ref(listenerData).off('child_added');\n            // firebaseConfig.database().ref('chats/').child(roomname.chat_id).off('child_added');\n\n        } else {\n\n            setChats('');\n            setNewchat('');\n        }\n        const fetchData = async () => {\n            await props.getUserProfileById(authuser.uid);\n        };\n\n        fetchData();\n    }, [messageList, roomname]);\n\n    useEffect(() => {\n        if (roomname !== '') {\n            setOtherUser(otherUserDetailsById);\n        } else {\n            setOtherUser('');\n        }\n    }, [otherUserDetailsById, roomname]);\n\n\n    const submitMessage = async (e) => {\n        e.preventDefault();\n\n        var checkchat = newchat.trim();\n\n\n        if (checkchat.length > 0) {\n            if (roomname !== '') {\n\n                var recvdata = (roomname.replace(authuser.uid, ''));\n                var recvid = (recvdata.replace('_', ''));\n                const msgData = {\n                    reciever_id: recvid,\n                    sender_id: authuser.uid,\n                    date: Moment(new Date()).format('DD/MM/YYYY HH:mm:ss'),\n                    message: newchat,\n                    type: 'message',\n                    chat_id: roomname,\n                }\n                setNewchat('');\n                await props.sendMessage(msgData);\n\n            } else {\n                ERROR(\"Please select user first\");\n            }\n        } else {\n            ERROR(\"Please type something\");\n        }\n\n    };\n\n    const onChange = (e) => {\n        e.persist();\n        if (e.target.value.length < 1) {\n            setrowCount(1)\n        }\n        // console.log('e==============',e);\n        setNewchat(e.target.value);\n    }\n\n    const onEnterPress = (e) => {\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            e.preventDefault();\n            submitMessage(e);\n        } else if (e.keyCode === 13 && e.shiftKey === true) {\n            if (rowCount < 3) {\n                setrowCount(rowCount + 1)\n            }\n        }\n    }\n    return (\n        <>\n            {otherUser !== '' ? (\n                <div className='right-chat-head'>\n                    <h6>Conversation With</h6>\n                    <div className='single-chat'>\n                        <span className='usr-name'>{otherUser.username}</span>\n                        <span className='usr-img'><img src={otherUser?.avatarURL !== '' ? otherUser?.avatarURL : user_img} alt='' /></span>\n                    </div>\n                </div>\n            ) : ''}\n\n            <ScrollToBottom className=\"ChatContent\">\n                <div className='ChatContentDiv'>\n                    {chats.length > 0 ? (\n                        chats.map((item, idx) => (\n                            <div key={idx} className={`${item.sender_id === sender_id ? \"MessageBox RightMessageBox\" : \"MessageBox LeftMessageBox\"}`}>\n                                {item.type === 'join' || item.type === 'exit' ?\n                                    <div className=\"ChatStatus\">\n                                        <span className=\"ChatDate\">{item.date}</span>\n                                        <span className=\"ChatContentCenter\"><pre>{item.message}</pre></span>\n                                    </div> :\n                                    <div className=\"ChatMessage\">\n                                        <div className={`${item.sender_id === sender_id ? \"RightBubble\" : \"LeftBubble\"}`}>\n                                            <div className=\"ChatMessageDateTIme\">\n                                                {/* {item.sender_id === sender_id ? \n                                                <span className=\"MsgName\">{nickname}</span>:<span className=\"MsgName\">{chats.receiverData.username}</span>\n                                            } */}\n                                                <div className=\"user-item-img\">\n                                                    <span><img src={item.sender_id === sender_id ? userDetailsById?.avatarURL ? userDetailsById?.avatarURL : user_img : chats?.receiverData?.avatarURL ? chats?.receiverData?.avatarURL : user_img} alt='' /></span>\n                                                </div>\n                                                {/* <span className=\"MsgDate\"> at {item.date}</span> */}\n                                            </div>\n                                            <div className=\"ChatMessageItem\"><pre>{item.message}</pre></div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        ))) : ''}\n                </div>\n            </ScrollToBottom>\n            <footer className=\"StickyFooter\">\n                <Form className=\"MessageForm\" onSubmit={submitMessage}>\n\n                    <InputGroup>\n                        <textarea onKeyDown={onEnterPress} className=\"form-control log-inp\" rows={rowCount} name=\"message\" id=\"message\" onChange={onChange} value={newchat} placeholder=\"Type your message...\" />\n                        {/* <input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Enter message here\" value={newchat} onChange={onChange} />  */}\n                        <div addonType=\"append\">\n\n                            <Button variant=\"primary\" type=\"submit\">\n                                <img src={require('../../../assets/images/send-icon.svg').default} alt='' />\n                            </Button>\n\n                            {/* <Button variant=\"primary\" type=\"submit\">\n                                     <img src={require('../../../assets/images/send-icon.svg').default} alt='' />\n                                </Button> */}\n                        </div>\n                    </InputGroup>\n                </Form>\n            </footer>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\n        userDetailsById: state.authReducer.userDetailsById,\n        OtherUserDetailsById: state.authReducer.OtherUserDetailsById,\n        authuser: state.authReducer.authuser,\n        messageList: state.chatReducer.messageList,\n\n    }\n};\n\nconst actionCreators = { getUserProfileById, getOtherUserProfileById, fetchUser, getMessages, sendMessage };\nexport default connect(mapStateToProps, actionCreators)(Messages);\n","/home/asus/dapify/src/templates/components/readMore.js",[],"/home/asus/dapify/src/templates/components/subscriptionExpiryDate.js",["596"],"import React from \"react\";\n\n\nfunction ExpiryDate(date){\n    \n    if(date !== ''){\n        var checkDate = new Date();\n       \n        const milliseconds = date.seconds * 1000 // 1575909015000\n        var cloneDate  = new Date(milliseconds)\n      \n        //for monthly subscription\n       \n        cloneDate.setDate(cloneDate.getDate() + 30);\n        if(cloneDate.getTime() > checkDate.getTime()){\n\n            return cloneDate;\n        }\n        else{\n            return '';\n        }\n    }\n   \n}\nexport default ExpiryDate;","/home/asus/dapify/src/Redux/actions/chat-actions.js",["597","598","599"],"import {\n  POST_CONVERSATION_REQUEST, GET_CONVERSATION_SUCCESS, GET_CONVERSATION_FAILURE,\n  POST_MESSAGES_REQUEST, GET_MESSAGES_SUCCESS, GET_MESSAGES_FAILURE,\n  POST_ADD_CONVERSATION_REQUEST, GET_ADD_CONVERSATION_SUCCESS, GET_ADD_CONVERSATION_FAILURE,\n  SEND_MESSAGE_REQUEST, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE,\n  POST_GROUP_MESSAGES_REQUEST, GET_GROUP_MESSAGES_SUCCESS, GET_GROUP_MESSAGES_FAILURE,\n  SEND_GROUP_MESSAGE_REQUEST, SEND_GROUP_MESSAGE_SUCCESS, SEND_GROUP_MESSAGE_FAILURE,\n  UNREAD_MESSAGE_COUNT_REQUEST, UNREAD_MESSAGE_COUNT_SUCCESS, UNREAD_MESSAGE_COUNT_FAILURE,\n  MESSAGE_NOTIFICATION\n} from './type';\nimport * as moment from 'moment';\nimport firebaseConfig from \"../../firebase\";\nimport { auth } from \"../auth-service\";\nimport { ERROR, Success } from '../../utils/errors';\nimport {\n  USER_NOTIFICATION\n\n} from './api_url';\nimport axios from 'axios';\n\n// ------------------------------FOR GET MESSAGE\n\nvar CurrentChatId = '';\n\n\nexport const getConversation = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_CONVERSATION_REQUEST, payload: true });\n\n    // ============ FOR BAck Button Condition ===========\n\n    // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n    // console.log(\"CHatIdData====\", CHatIdData)\n\n    // const CurrenmsgrefListner = firebaseConfig.database().ref('conversations/')\n\n    // if(CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined){\n    //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n    // } else {\n    // }\n\n    await firebaseConfig.database().ref('conversations/').on('value', resp => {\n      var returnArr = [];\n\n      resp.forEach((childSnapshot) => {\n        var unreadCount = 0;\n        var chatarr = childSnapshot.val();\n        var lastChat = '';\n\n        if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n          var other_uid = '';\n          if (chatarr.reciever_id === data.uid) {\n            other_uid = chatarr.sender_id;\n          }\n          else {\n            other_uid = chatarr.reciever_id\n          }\n\n          var Readingcount = 0;\n          if (chatarr[`${other_uid}`]) {\n            if (chatarr[`${data.uid}_receive_By`]) {\n              Readingcount = chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n            }\n            else {\n              Readingcount = chatarr[`${other_uid}`];\n            }\n          }\n\n          firebaseConfig.database().ref('chats/').child(childSnapshot.key).limitToLast(1).on('value', resp => {\n\n            resp.forEach((chatSnapshot) => {\n              lastChat = chatSnapshot.val();\n            })\n          })\n\n          // console.log('unreadCount-----+++', unreadCount);\n\n          const res = firebaseConfig.firestore().collection(\"users\").doc(other_uid);\n          res.get().then((doc) => {\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n                const item = chatarr;\n                item.receiverDetails = doc.data();\n                item.lastConversation = lastChat;\n                item.unread_msg = unreadCount;\n                item.key = childSnapshot.key;\n                item.Readingcount = Readingcount;\n                returnArr.push(item);\n                dispatch({ type: GET_CONVERSATION_SUCCESS, payload: returnArr });\n              }\n            }\n          })\n        }\n      })\n\n    }).catch(function (error) {\n      dispatch({ type: GET_CONVERSATION_FAILURE, payload: false });\n    })\n  } catch (error) {\n    dispatch({ type: GET_CONVERSATION_FAILURE, payload: error });\n  }\n};\n\n\nexport const getUnreadMessageCount = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: UNREAD_MESSAGE_COUNT_REQUEST, payload: true });\n\n      // const CHatIdData = localStorage.getItem(\"lestener_Chat_id\");\n\n      var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n      CurrentChatId = data.chat_id;\n\n      if(CurrentChatId){\n        CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      } else {\n         await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n        if (resp.exists()) {\n          const usrUnreadCount = resp.val();\n          if (usrUnreadCount !== undefined) {\n            console.log('-----check unread message----', usrUnreadCount);\n            dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n          }\n        } else {\n          dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: false });\n        }\n      })\n      };\n\n      \n      // if (CHatIdData === \"\" || CHatIdData === null || CHatIdData === undefined) {\n      //   CurrenmsgrefListner.child(data.chat_id).off('child_added');\n      // } else {\n      //   await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n      //     if (resp.exists()) {\n      //       const usrUnreadCount = resp.val();\n      //       if (usrUnreadCount !== undefined) {\n      //         console.log('-----check unread message----', usrUnreadCount);\n      //         dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n      //       }\n      //     } else {\n      //       dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: false });\n      //     }\n      //   })\n      // }\n\n     \n\n      await firebaseConfig.database().ref('conversations/').on('value', resp => {\n\n        var Readingcount = 0;\n        resp.forEach((childSnapshot) => {\n\n          var chatarr = childSnapshot.val();\n\n          if (chatarr.reciever_id === data.uid || chatarr.sender_id === data.uid) {\n            var other_uid = '';\n            if (chatarr.reciever_id === data.uid) {\n              other_uid = chatarr.sender_id;\n            }\n            else {\n              other_uid = chatarr.reciever_id\n            }\n\n            if (chatarr[`${other_uid}`]) {\n              if (chatarr[`${data.uid}_receive_By`]) {\n                Readingcount += chatarr[`${other_uid}`] - chatarr[`${data.uid}_receive_By`];\n              }\n              else {\n                Readingcount += chatarr[`${other_uid}`];\n              }\n            }\n          }\n\n          console.log('Readingcount', Readingcount);\n          dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: Readingcount });\n\n        })\n\n      })\n    }\n  } catch (error) {\n    dispatch({ type: UNREAD_MESSAGE_COUNT_FAILURE, payload: error });\n  }\n};\n\n\nexport const getMessages = (data) => async dispatch => {\n\n  try {\n    var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n    CurrentChatId = data.chat_id;\n\n    localStorage.setItem(\"lestener_Chat_id\", data.chat_id);\n\n\n    dispatch({ type: POST_MESSAGES_REQUEST, payload: true });\n\n    // console.log('########## CurrentChatId', CurrentChatId);\n    // console.log('########## Chatid', data.chat_id);\n    // console.log('data get outer', data);\n\n    if (data !== \"\") {\n\n      var reciever_uid = '';\n      if (data.chat_id !== undefined) {\n        var returnArr = [];\n        var unreadcount = 0;\n\n        await CurrenmsgrefListner.child(data.chat_id).on('child_added', async (snapshot) => {\n\n          // console.log('resp_recent', snapshot.val());\n          // console.log('resp_recentssss', snapshot.key);\n          // console.log('datachat_id', data.chat_id);\n          // console.log('########## inner CurrentChatId', CurrentChatId);\n          // console.log('data get inner', data);\n\n          var msgarr_1 = '';\n          msgarr_1 = snapshot.val();\n          const item = msgarr_1;\n          item.key = snapshot.key;\n          returnArr.push(item);\n\n          if (item.status === 'unread') {\n            unreadcount = unreadcount + 1;\n          }\n\n          if (CurrentChatId === data.chat_id) {\n\n            await firebaseConfig.database().ref('chats/').child(CurrentChatId)\n              .orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n                var recieveCount = snapshot.numChildren();\n\n                // console.log('recieveCount CurrentChatId', CurrentChatId);\n                // console.log('data.uid', data.uid);\n                // console.log('data get', data);\n\n                var updatedata = {\n\n                  [`${data.uid}_receive_By`]: recieveCount,\n                };\n                // console.log('chatchat-id', data.chat_id);\n                await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n              })\n          }\n\n          // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n\n        });\n\n        if (data.recv_id !== \"\") {\n          reciever_uid = data.recv_id;\n          const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n          recv.get().then(async (doc) => {\n\n            if (doc.exists) {\n              if (doc.data().user_active === true) {\n\n                dispatch({ type: GET_MESSAGES_SUCCESS, payload: returnArr, listenerData: CurrenmsgrefListner });\n\n              }\n            }\n          })\n\n        } else {\n          dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n        }\n      }\n\n    } else {\n      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_MESSAGES_FAILURE, payload: error });\n  }\n};\n\n\nexport const getMessages_original = (data) => async dispatch => {\n\n\n  try {\n\n    dispatch({ type: POST_MESSAGES_REQUEST, payload: true });\n    console.log('##########chatid', data.chat_id);\n    if (data !== \"\") {\n\n      var reciever_uid = '';\n      if (data.chat_id !== undefined) {\n\n        await firebaseConfig.database().ref('chats/').child(data.chat_id).on('value', resp => {\n          var returnArr = [];\n          var unreadcount = 0;\n\n          resp.forEach((msgSnapshot) => {\n            var msgarr = '';\n            msgarr = msgSnapshot.val();\n\n            const item = msgarr;\n            console.log('itemis', item);\n            item.key = msgSnapshot.key;\n\n            returnArr.push(item);\n\n            if (item.status === 'unread') {\n              unreadcount = unreadcount + 1;\n            }\n\n          })\n\n          console.log('checkreturn------', returnArr);\n          if (data.recv_id !== \"\") {\n            reciever_uid = data.recv_id;\n            const recv = firebaseConfig.firestore().collection(\"users\").doc(reciever_uid);\n            recv.get().then(async (doc) => {\n              if (doc.exists) {\n                if (doc.data().user_active === true) {\n                  returnArr['receiverData'] = doc.data();\n                  console.log('check-chat-id', data.chat_id);\n\n\n                  await updateUnreadStatus(data.chat_id, data.uid, unreadcount)\n                    .then(async function () {\n\n                      // await firebaseConfig.database().ref('UserUnreadCount/').child(data.uid).on(\"child_added\", resp => {\n                      //   if (resp.exists()) {\n                      //     const usrUnreadCount = resp.val();\n                      //     if (usrUnreadCount !== undefined) {\n                      //       console.log('-----check unread message----',usrUnreadCount);\n                      //       dispatch({ type: UNREAD_MESSAGE_COUNT_SUCCESS, payload: usrUnreadCount });\n                      //     }\n                      //   }\n                      // })\n\n                      await firebaseConfig.database().ref('chats/').child(data.chat_id)\n                        .orderByChild('reciever_id').equalTo(data.uid).once('value', async function (snapshot) {\n                          var recieveCount = snapshot.numChildren();\n                          var updatedata = {\n\n                            [`${data.uid}_receive_By`]: recieveCount,\n                          };\n\n                          await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n                        })\n\n                      dispatch({ type: GET_MESSAGES_SUCCESS, payload: returnArr });\n\n                    }).catch(function (error) {\n                      ERROR(error.message);\n                      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n                    })\n                }\n              }\n            })\n          } else {\n            dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n          }\n\n\n        }).catch(function (error) {\n          dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n        })\n\n      }\n\n\n    } else {\n      dispatch({ type: GET_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_MESSAGES_FAILURE, payload: error });\n  }\n};\n\n\nexport const getGroupMessages = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_GROUP_MESSAGES_REQUEST, payload: true });\n\n    if (data !== \"\") {\n\n      await firebaseConfig.database().ref('GroupChats/').child(data.chat_id).on('value', resp => {\n        var returnArr = [];\n        resp.forEach((msgSnapshot) => {\n          var msgarr = '';\n          msgarr = msgSnapshot.val();\n\n          const item = msgarr;\n          item.key = msgSnapshot.key;\n          returnArr.push(item);\n          dispatch({ type: GET_GROUP_MESSAGES_SUCCESS, payload: returnArr });\n        })\n\n      }).catch(function (error) {\n        dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_GROUP_MESSAGES_FAILURE, payload: error });\n  }\n};\n\nasync function updateUnreadStatus(chatid, uid, unreadcount) {\n\n  try {\n\n    var list = 0;\n\n    await firebaseConfig.database().ref('chats/').child(chatid)\n      .orderByChild('reciever_id').equalTo(uid).once('value', async function (snapshot) {\n        snapshot.forEach(function (child) {\n\n          if (child.val().status === 'unread') {\n\n            //unreadCount = unreadCount +1;\n            child.ref.update({ status: 'read' });\n\n            list = list + 1;\n          }\n        });\n\n        await DecreementUnreadCountByUser(uid, unreadcount)\n        console.log('decreement', unreadcount);\n\n      });\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// ------------------------------FOR ADD MESSAGE\n\nexport const addConversation = (data) => async dispatch => {\n\n  try {\n\n    dispatch({ type: POST_ADD_CONVERSATION_REQUEST, payload: true });\n    var room_id = data.recvid + '_' + data.uid;\n    var room_id2 = data.uid + '_' + data.recvid;\n\n    await firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n      if (snapshot.exists()) {\n\n        dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id });\n      } else {\n        firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot => {\n          if (snapshot.exists()) {\n\n            dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id2 });\n          } else {\n            firebaseConfig.database().ref('conversations/').child(room_id).set({\n              reciever_id: data.recvid,\n              sender_id: data.uid,\n              time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n\n            }).then(() => {\n\n            }).catch(function (error) {\n              ERROR(error.message);\n\n            })\n            dispatch({ type: GET_ADD_CONVERSATION_SUCCESS, payload: room_id });\n          }\n        }, (errorObject) => {\n\n          dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: false });\n          console.log('errorObject', errorObject);\n        });\n      }\n    }, (errorObject) => {\n\n      dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: false });\n\n    });\n  } catch (error) {\n\n    dispatch({ type: GET_ADD_CONVERSATION_FAILURE, payload: error });\n  }\n};\n\n\n// ------------------------------FOR SEND MESSAGE\n\nexport const sendMessage = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: SEND_MESSAGE_REQUEST, payload: true });\n      var senderid = data.sender_id;\n      const msgData = {\n        reciever_id: data.reciever_id,\n        sender_id: data.sender_id,\n        date: data.date,\n        time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n        message: data.message,\n        type: data.type,\n        status: 'unread',\n      }\n\n      await firebaseConfig.database().ref('chats/' + data.chat_id).push(msgData).then(async () => {\n\n        var updatedata = {\n\n          [`${senderid}`]: firebaseConfig.database.ServerValue.increment(1),\n          \"messageCount\": firebaseConfig.database.ServerValue.increment(1),\n        };\n\n        await firebaseConfig.database().ref('conversations/' + data.chat_id).update(updatedata);\n\n        await IncreementUnreadCountByUser(data.reciever_id).then(async function () {\n          await sendMessageNotification(data.reciever_id);\n          dispatch({ type: SEND_MESSAGE_SUCCESS, payload: true });\n        }).catch(function (error) {\n          ERROR(error.message);\n          dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n        })\n\n      }).catch(function (error) {\n        dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n        ERROR(error.message);\n      })\n    }\n\n  } catch (error) {\n    dispatch({ type: SEND_MESSAGE_FAILURE, payload: error });\n  }\n\n  // await firebaseConfig.database().ref('chats/' + data.chat_id).on('child_added');\n\n  // var CurrenmsgrefListner = firebaseConfig.database().ref('chats/');\n  // CurrentChatId = data.chat_id;\n  // CurrenmsgrefListner.child(data.chat_id).on('child_added','');\n\n  // CurrenmsgrefListner.child(data.chat_id).off('child_added');\n\n  // getMessages(data);\n\n};\n\n\nexport const sendGroupMessage = (data) => async dispatch => {\n\n  try {\n    if (data) {\n      dispatch({ type: SEND_GROUP_MESSAGE_REQUEST, payload: true });\n      console.log('groupmsg-----', data);\n      var subs_id = [];\n      if (data.allSubscriber.length > 0) {\n\n        data.allSubscriber.forEach((user, indx) => {\n\n          subs_id.push(user.aud_id);\n          var room_id = user.aud_id + '_' + data.sender_id;\n          var room_id2 = data.sender_id + '_' + user.aud_id;\n\n\n          firebaseConfig.database().ref('conversations/').child(room_id).once('value', snapshot => {\n            if (snapshot.exists()) {\n\n              const msgData = {\n                reciever_id: user.aud_id,\n                sender_id: data.sender_id,\n                date: data.date,\n                time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                message: data.message,\n                type: data.type,\n                status: 'unread',\n              }\n              firebaseConfig.database().ref('chats/' + room_id).push(msgData)\n              IncreementUnreadCountByUser(user.aud_id).then(function () {\n                return true;\n              })\n\n            } else {\n              firebaseConfig.database().ref('conversations/').child(room_id2).once('value', snapshot2 => {\n                if (snapshot2.exists()) {\n                  const msgData = {\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    date: data.date,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                    message: data.message,\n                    type: data.type,\n                    status: 'unread',\n                  }\n                  firebaseConfig.database().ref('chats/' + room_id2).push(msgData)\n                  IncreementUnreadCountByUser(user.aud_id).then(function () {\n                    return true;\n                  })\n                } else {\n\n                  firebaseConfig.database().ref('conversations/').child(room_id).set({\n                    reciever_id: user.aud_id,\n                    sender_id: data.sender_id,\n                    time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n\n                  }).then(() => {\n                    const msgData = {\n                      reciever_id: user.aud_id,\n                      sender_id: data.sender_id,\n                      date: data.date,\n                      time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n                      message: data.message,\n                      type: data.type,\n                      status: 'unread',\n                    }\n                    firebaseConfig.database().ref('chats/' + room_id).push(msgData)\n                    IncreementUnreadCountByUser(user.aud_id).then(function () {\n                      return true;\n                    })\n\n                  }).catch(function (error) {\n                    dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n                    ERROR(error.message);\n                  })\n                }\n\n              }, (errorObject) => {\n\n                dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: false });\n\n              });\n            }\n          }, (errorObject) => {\n\n            dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: false });\n\n          });\n\n        })\n\n        if (subs_id.length > 0) {\n          const msggroupData = {\n\n            sender_id: data.sender_id,\n            date: data.date,\n            time: firebaseConfig.firestore.FieldValue.serverTimestamp(),\n            message: data.message,\n            type: data.type,\n            subscriberId: subs_id,\n\n          }\n          await firebaseConfig.database().ref('GroupChats/' + data.sender_id).push(msggroupData).then(async () => {\n            await sendMessageNotificationAllSubscriber(data.sender_id);\n            dispatch({ type: SEND_GROUP_MESSAGE_SUCCESS, payload: true });\n          }).catch(function (error) {\n            dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n            ERROR(error.message);\n          })\n        }\n      }\n    }\n  } catch (error) {\n    dispatch({ type: SEND_GROUP_MESSAGE_FAILURE, payload: error });\n  }\n};\n\n\nasync function sendMessageNotification(id) {\n\n  try {\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(id);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n        //dispatch({ type: GET_OTHER_USER_PROFILE_BY_ID_FAILURE, payload: false });\n      }\n      else {\n\n        if (doc.data()?.Notification_tokens) {\n          if (doc.data().Notification_tokens.length > 0) {\n\n            const notification_data = {\n\n              \"title\": \"Message\",\n              \"body\": MESSAGE_NOTIFICATION,\n              \"to\": doc.data().Notification_tokens,\n            }\n            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n            console.log('notification_response', notification_response);\n            if (notification_response.status === 200) {\n            }\n          }\n\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nasync function sendMessageNotificationAllSubscriber(uid) {\n\n  try {\n    var subscribeobj = [];\n    const res = await firebaseConfig.firestore().collection(\"users\").doc(uid);\n    res.get().then(async (doc) => {\n\n      if (!doc.exists) {\n\n      }\n      else {\n\n        var UserData = doc.data();\n        subscribeobj = UserData.subscribed_list;\n        if (subscribeobj !== '') {\n\n          let i = 0;\n          Object.keys(subscribeobj).map(async function (subkeyid) {\n\n            var sub_id = '';\n            var Recsubiddata = '';\n            if (subkeyid.includes('_RECIEVER')) {\n              sub_id = subkeyid.replace('_RECIEVER', '');\n              Recsubiddata = subscribeobj[sub_id + '_RECIEVER'];\n            }\n            if (subkeyid.includes('_SUBSCRIBER')) {\n              sub_id = subkeyid.replace('_SUBSCRIBER', '');\n              Recsubiddata = subscribeobj[sub_id + '_SUBSCRIBER'];\n            }\n\n            if (sub_id !== '') {\n\n              const subres = await firebaseConfig.firestore().collection(\"users\").doc(sub_id);\n              subres.get().then(async (subdoc) => {\n\n                if (!subdoc.exists) {\n\n                }\n                else {\n                  if (Recsubiddata.subscribe_type === \"one_time_support\") {\n                    if (subdoc.data()?.Notification_tokens) {\n                      if (subdoc.data().Notification_tokens.length > 0) {\n\n                        console.log(subdoc.data().Notification_tokens);\n                        const notification_data = {\n\n                          \"title\": \"Message\",\n                          \"body\": MESSAGE_NOTIFICATION,\n                          \"to\": subdoc.data().Notification_tokens,\n                        }\n\n\n                        const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                        console.log('notification_response', notification_response);\n                        if (notification_response.status === 200) {\n                        }\n                      }\n                    }\n                  } else {\n                    if (Recsubiddata.date !== '') {\n                      var Rec_subs_date = Recsubiddata.date;\n                      var rec_checkDate = new Date();\n\n                      const milliseconds = Rec_subs_date.seconds * 1000 // 1575909015000\n                      var rec_cloneDate = new Date(milliseconds)\n\n                      //for monthly subscription\n\n                      rec_cloneDate.setDate(rec_cloneDate.getDate() + 30);\n                      if (rec_cloneDate.getTime() > rec_checkDate.getTime()) {\n\n\n                        if (subdoc.data()?.Notification_tokens) {\n                          if (subdoc.data().Notification_tokens.length > 0) {\n\n                            console.log(subdoc.data().Notification_tokens);\n                            const notification_data = {\n\n                              \"title\": \"Message\",\n                              \"body\": MESSAGE_NOTIFICATION,\n                              \"to\": subdoc.data().Notification_tokens,\n                            }\n\n\n                            const notification_response = await axios.post(USER_NOTIFICATION, notification_data);\n                            console.log('notification_response', notification_response);\n                            if (notification_response.status === 200) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              })\n            }\n\n            i = i + 1;\n            return true;\n          });\n        }\n      }\n    })\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n// ------------------------------FOR INCREMENt & DECREMENT MESSAGE\n\nasync function IncreementUnreadCountByUser(recv_id) {\n\n  try {\n    var unreadCountVal = 0;\n\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n        const usrUnreadCount = resp.val();\n\n        if (usrUnreadCount !== undefined) {\n          unreadCountVal = usrUnreadCount.unreadCount + 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal,\n\n          })\n        }\n        else {\n          unreadCountVal = 1;\n          firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n            unreadCount: unreadCountVal,\n\n          })\n        }\n      } else {\n        unreadCountVal = 1;\n        firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n          unreadCount: unreadCountVal,\n\n        })\n      }\n    })\n\n    // await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).on('value', resp => {\n\n    //   resp.forEach((msgSnapshot) => {\n    //     var msgarr ='';\n    //     msgarr = msgSnapshot.val();\n\n    //     console.log('msgarr',msgarr);\n    //   })\n\n    // })\n\n\n    // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n\n    //   if (doc.exists) {\n    //     var unreadMsg = 0;\n    //     var usrData = doc.data()\n    //     if(usrData?.unreadMsgCount){\n    //       unreadMsg = usrData?.unreadMsgCount +1;\n    //     }\n    //     else{\n    //       unreadMsg =1;\n    //     }\n\n    //     const updatedata = {\n    //       unreadMsgCount: unreadMsg,\n    //     };\n    //     firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //     .then(function (docres) {\n    //     return true;\n    //     })\n    //   }\n    // })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\nasync function DecreementUnreadCountByUser(recv_id, count) {\n\n  try {\n    console.log('checkcount', count);\n    await firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).once('value', resp => {\n      if (resp.exists()) {\n\n        const usrUnreadCount = resp.val();\n        if (usrUnreadCount !== undefined) {\n\n          if (usrUnreadCount.unreadCount >= count) {\n            var unreadCountVal = usrUnreadCount.unreadCount - count;\n            firebaseConfig.database().ref('UserUnreadCount/').child(recv_id).set({\n              unreadCount: unreadCountVal,\n\n            })\n          }\n        }\n      }\n    })\n\n    // const res = await firebaseConfig.firestore().collection(\"users\").doc(recv_id);\n    // res.get().then((doc) => {\n\n    //   if (doc.exists) {\n    //     console.log('dfdfgdfgdf',count);\n    //     if(count !== 0){\n    //       var unreadMsg = 0;\n    //       var usrData = doc.data()\n    //       if(usrData?.unreadMsgCount){\n    //         if(usrData?.unreadMsgCount >= count){\n    //           unreadMsg = usrData?.unreadMsgCount - count;\n    //           const updatedata = {\n    //             unreadMsgCount: unreadMsg,\n    //           };\n\n    //           firebaseConfig.firestore().collection('users').doc(recv_id).update(updatedata)\n    //           .then(function (docres) {\n    //           return true;\n    //           })\n    //         }\n    //       }\n    //     }else{\n    //       return true;\n    //     }\n    //   }\n    // })\n\n  } catch (e) {\n    console.log(e)\n    return false;\n  }\n}\n\n\n\n\n\n\n","/home/asus/dapify/src/templates/view/Home/shareMediaContent.js",["600"],"import React, { useState, useEffect } from 'react'\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from '@material-ui/core'\nimport {\n  EmailShareButton,\n  FacebookShareButton,\n  WhatsappShareButton,\n  FacebookIcon,\n  EmailIcon,\n  WhatsappIcon,\n} from \"react-share\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n//import { Success } from './../../../utils/errors';\nimport 'antd/dist/antd.css'\nimport EncryptProfileUrl from '../../components/encryptProfileUrl';\n\nfunction ShareMediaContent(props, { history }) {\n  const [copy, setCopy] = useState();\n  const [shareUrl, setShareUrl] = useState();\n  useEffect(() => {\n\n    async function fetchdata() {\n      if (props.url_id) {\n\n        var url_val = EncryptProfileUrl(props.url_id);\n        const path = window.location.origin;\n        // const ids = Buffer.from(props.url_id).toString('base64');\n        const url = path + url_val;\n        setShareUrl(url);\n\n      }\n    }\n    fetchdata();\n  }, [props.url_id]);\n\n  const handleCopy = (event) => {\n    setCopy(true);\n    toast.success('copied');\n  };\n  \n  return (\n\n    <Modal\n      onHide={props.close}\n      show={props.show}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">Share with</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <EmailShareButton\n          url={shareUrl}\n\n        >\n          <EmailIcon size={40} round />\n        </EmailShareButton>\n        &nbsp;\n        <FacebookShareButton url={shareUrl}>\n          <FacebookIcon size={40} round />\n        </FacebookShareButton>\n        &nbsp;\n        <WhatsappShareButton url={shareUrl}>\n          <WhatsappIcon size={40} round />\n        </WhatsappShareButton>\n        &nbsp;\n        <CopyToClipboard text={shareUrl} onCopy={handleCopy}>\n          <span className=\"btn btn-primary\">Copy</span>\n        </CopyToClipboard>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button className=\"can-btn btn\" onClick={props.close}>Cancel</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default ShareMediaContent;\n\n\n","/home/asus/dapify/src/Redux/actions/notification-actions.js",["601","602","603"],"import {\n  POST_USER_NOTIFICATION_REQUEST,GET_USER_NOTIFICATION_SUCCESS,GET_USER_NOTIFICATION_FAILURE,\n  UNREAD_NOTIFICATION_COUNT_REQUEST, UNREAD_NOTIFICATION_COUNT_SUCCESS, UNREAD_NOTIFICATION_COUNT_FAILURE,\n  REMOVE_NOTIFICATION_REQUEST,REMOVE_NOTIFICATION_SUCCESS,REMOVE_NOTIFICATION_FAILURE,\n} from './type';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\nimport dummy_img from '../../assets/images/dummy_user.png';\n\n// For get user media content \n\nexport const getUserNotification = (data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_NOTIFICATION_REQUEST, payload: true });\n    if (data.user_id) {\n\n      var notificationPost = [];\n      var notificationarr = [];\n      let query = '';\n      var totalrecord = 0;\n      \n      await firebaseConfig.firestore().collection('notifications').doc(data.user_id).get()\n      .then(async querySnapshot => {\n          var notification_obj = querySnapshot.data();\n\n          if(notification_obj)\n          {\n            Object.keys(notification_obj).map(async function(notifyid){ \n              if(notification_obj[notifyid].flag === true){\n                totalrecord =totalrecord +1;\n                notification_obj[notifyid].id = notifyid;\n                notificationPost.push(notification_obj[notifyid]); \n              }\n             \n            })\n          }\n          function sortByDate( a, b ) {\n            if ( a.time > b.time ){\n              return -1;\n            }\n            if ( a.time < b.time ){\n              return 1;\n            }\n            return 0;\n          }\n          notificationPost.sort(sortByDate);\n\n\n        var notifycount = 0;\n        for (let j = 0; j < notificationPost.length && j < data.limit; j++) {\n         \n          const subres = await firebaseConfig.firestore().collection(\"users\").doc(notificationPost[j].user_id);\n            subres.get().then(async (userdoc) => {\n              var username= \"\";\n              var userimage = dummy_img;\n              if (!userdoc.exists) {\n              } else {\n               \n                var NotificationReadid=  \"\";\n                var NotificationReadStatus=  \"\";\n                if(userdoc.data().username !== ''){\n                  username = userdoc.data().username;\n                }\n                if(userdoc.data().avatarURL !== ''){\n                  userimage = userdoc.data().avatarURL;\n                }\n\n                \n                notificationPost[j].userimage = userimage;\n                notificationPost[j].username = username;\n                \n                notificationarr.push(notificationPost[j]);\n               \n                NotificationReadid= notificationPost[j].id;\n                NotificationReadStatus= notificationPost[j].status;\n\n                //Read Notification---------\n                var updatedata ={};\n                \n                if(NotificationReadStatus === 'unread'){\n                  notifycount = notifycount+1;\n                  \n                  updatedata[`${NotificationReadid}.status`] = \"read\";\n                  await firebaseConfig.firestore()\n                    .collection('notifications')\n                    .doc(data.user_id).update(updatedata).then(async () => {    \n                    \n                  }).catch(function (_error) {\n                  \n                  })\n                }\n                if(j<= notificationPost.length -1 || j <= data.length){\n                  dispatchNotification(notificationarr,data.user_id,notifycount);\n                }\n              }\n            })\n          }\n\n          async function dispatchNotification(notificationres,u_id,notifycount){\n            const res = await firebaseConfig.firestore().collection(\"users\").doc(u_id);\n            res.get().then(async (userdoc) => {\n              let notificaton_Count =0;\n              if (!userdoc.exists) {\n              }\n              else {\n                  if(userdoc.data()?.Unread_Notification){\n                    notificaton_Count = userdoc.data().Unread_Notification -notifycount;\n                  }else{\n                    notificaton_Count = 0;\n                  }\n                  await firebaseConfig.firestore().collection('users/').doc(u_id).update({\n                    'Unread_Notification': notificaton_Count,\n                  }).then(async function (docres) {\n\n                    dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: notificaton_Count });\n                  \n                  }).catch(function (error) {\n                    ERROR(error.message);\n                    console.log('error recieveeeeeeee',error.message);\n                  });\n                }\n            })\n\n            dispatch({ type: GET_USER_NOTIFICATION_SUCCESS, payload: notificationres, notificationTotal: totalrecord });\n          }\n          \n      }).catch(function (error) {\n\n        dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: false });\n      })\n        \n    } else {\n      dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_NOTIFICATION_FAILURE, payload: error });\n  }\n};\n\nexport const getUnreadNotificationCount = (data) => async dispatch => {\n  try {\n    if (data) {\n      dispatch({ type: UNREAD_NOTIFICATION_COUNT_REQUEST, payload: true });\n      const res = await firebaseConfig.firestore().collection(\"users\").doc(data.uid);\n      res.get().then((doc) => {\n        \n        if (!doc.exists) {\n        \n          dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n        }\n        else {\n          const usrUnreadNotfcn = doc.data();\n          if (usrUnreadNotfcn.Unread_Notification !== undefined) {\n            console.log('checknotify',usrUnreadNotfcn.Unread_Notification);\n            dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: usrUnreadNotfcn.Unread_Notification });\n          }\n         else {\n\n            dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n\n          }\n        }\n      }).catch(function (error) {\n        dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n      })\n    } else {\n      dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: UNREAD_NOTIFICATION_COUNT_FAILURE, payload: error });\n  }\n};\n\nexport const RemoveNotification = (data) => async dispatch => {\n  try {\n\n    if (data) {\n      dispatch({ type: REMOVE_NOTIFICATION_REQUEST, payload: true });\n      var updatedata ={};\n      var notifyid =data.notification_id;\n     \n      updatedata[`${notifyid}.flag`] = false;\n    \n      await firebaseConfig.firestore()\n        .collection('notifications')\n        .doc(data.user_id).update(updatedata).then(function (docres) {\n        Success(\"Deleted successfully\");\n        dispatch({ type: REMOVE_NOTIFICATION_SUCCESS, payload: notifyid });\n        \n      }).catch(function (error) {\n       \n        dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: false });\n        ERROR('Something went wrong');\n      })\n    } else {\n      dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: false });\n    }\n  } catch (error) {\n    dispatch({ type: REMOVE_NOTIFICATION_FAILURE, payload: error });\n  }\n};\n\n//not in use-----------------\n// async function ReadNotification(notification_id,NotificationReadStatus,user_id,dispatch) {\n//   try {\n//     var notificaton_Count =0;\n//     const res = await firebaseConfig.firestore().collection(\"users\").doc(user_id);\n//     res.get().then(async (userdoc) => {\n     \n//       if (!userdoc.exists) {\n//       }\n//       else {\n//         console.log('usrdetailssss',userdoc.data());\n//         console.log('checkcountuserrrr',userdoc.data().Unread_Notification);\n//         if(userdoc.data()?.Unread_Notification){\n//           notificaton_Count = userdoc.data().Unread_Notification -1;\n//         }else{\n//           notificaton_Count = 0;\n//         }\n//         console.log('checkcount',notificaton_Count);\n//         var updatedata ={};\n//         var notifyid =notification_id;\n//         var notifyStatus = NotificationReadStatus;\n//         console.log('notification_id=====',notification_id);\n//         console.log('Unread_Notification=====',userdoc.data()?.Unread_Notification);\n//         console.log('notifyStatus==========',notifyStatus);\n//         console.log('notificaton_Count==========',notificaton_Count);\n//         if(notifyStatus === 'unread'){\n\n         \n//           updatedata[`${notifyid}.status`] = \"read\";\n//           await firebaseConfig.firestore()\n//             .collection('notifications')\n//             .doc(user_id).update(updatedata).then(async function(docres) {\n\n//               await UpdateNotificationCount(user_id,notificaton_Count);\n//               // await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//               //   'Unread_Notification': notificaton_Count,\n//               // }).then(function (docres) {\n//               //   // const data = {\n//               //   //   uid : user_id,\n//               //   // }\n//               //   //await getUnreadNotificationCount(data);\n//               //   console.log('hellooooooooooooooo updateeeeeeeee');\n//               //   //dispatch({ type: UNREAD_NOTIFICATION_COUNT_SUCCESS, payload: notificaton_Count });\n               \n//               // }).catch(function (error) {\n//               //   ERROR(error.message);\n//               //   console.log('error recieveeeeeeee',error.message);\n      \n//               // });\n//           }).catch(function (error) {\n          \n//           })\n//         }\n        \n//       }\n//     })\n    \n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }\n\n\n// async function UpdateNotificationCount(user_id,notificaton_Count) {\n//   try {\n \n//       await firebaseConfig.firestore().collection('users/').doc(user_id).update({\n//         'Unread_Notification': notificaton_Count,\n//       }).then(function (docres) {\n        \n//         console.log('hellooooooooooooooo updateeeeeeeee');\n      \n        \n//       }).catch(function (error) {\n//         ERROR(error.message);\n//         console.log('error recieveeeeeeee',error.message);\n\n//       }); \n\n//   } catch (e) {\n//     console.log(e)\n//     return false;\n//   }\n// }\n","/home/asus/dapify/src/templates/view/Navhead.js",[],"/home/asus/dapify/src/templates/view/Settings/subscriptionSetting.js",["604"],"import React, { useState,useEffect } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@material-ui/core'\n\n//Redux\n\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, userSubscription,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\n\nfunction SubscriptionSetting(props, { history }) {\n  const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n  const [isLoader, setLoader] = useState(false);\n\n  const {\n      register,\n      reset,\n      handleSubmit,\n      formState: { errors },\n    } = useForm({\n      mode: \"onChange\",\n    });\n\n    useEffect(() => {\n        async function fetchdata(){\n        if(authuser)\n        await props.getUserProfileById(authuser.uid);\n        setLoader(loading);\n        }\n        fetchdata();\n    },[authuser.uid]);\n\n    useEffect( () => {\n\n        reset({\n          subscription_info: userDetailsById?.subscription?.info,\n          });\n      \n    },[userDetailsById,reset]);\n \n    const onSubmit = async (event) => {\n        \n          const data = {\n              info: event.subscription_info,\n              price: 3.99,\n            \n          };\n        await props.userSubscription(data);\n    };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {isLoader ? <Loader isLoader={true} /> : null} \n      <div className=\"tab-inner-content account-settings scubcriptions\">\n        <div className=\"form-row1\">\n          <label>Monthly Subscription rate</label>\n          <div className=\"month-susj\">\n          <input type=\"text\" disabled=\"true\" className=\"form-control log-inp\" name=\"price\" value=\"$3.99 (Customize Pricing at 100 Subscribers)\" />\n            {/* <span>$3.99</span> (Customize Pricing at 100 Subscribers) */}\n          </div>\n          <div className=\"lma\">Learn more about our fees</div>\n        </div>\n\n        <div className=\"form-row1\">\n          <label>Subscription Info</label>\n          <div className=\"month-sus1ss\">\n            <textarea name=\"subscription_info\" className=\"form-control log-inp text-tag\" {...register('subscription_info', {\n                        required: true,\n                      })} >Tell your fans why they should subscribe and support you monthly! Make sure you tell them things that are important like upcoming shows, any new projects your working on and even if you want to list out your monthly expenses.\n            \"Make it Good! Its your pitch to your paying fans!\"</textarea>\n          </div>\n          {errors?.subscription_info?.type === \"required\" && (\n            <p className=\"errMsg\">This field is required</p>\n          )}\n        </div>\n\n        <div className=\"cancel-logout-sec\">\n          <div className=\"login-via create-ac\">\n                <Button  type=\"submit\" className=\"log-btn btn\">\n                  Update\n                </Button>\n          </div>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userDetailsById: state.authReducer.userDetailsById,\n    authuser: state.authReducer.authuser,\n    loading : state.authReducer.loading\n\n  }\n}\nconst actionCreators = { getUserProfileById, userSubscription,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(SubscriptionSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/accountSetting.js",["605"],"import React, {useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@material-ui/core'\n\n//Redux\n\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById, changePassword,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\nimport eye_img from '../../../assets/images/eye.png';\nimport eye_slash_img from '../../../assets/images/eyeslash.png';\n\nfunction AccountSetting(props, { history }) {\n    const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n    const [isLoader, setLoader] = useState(false);\n    const [passwordShown, setPasswordShown] = useState(false);\n    const [newpasswordShown, setNewPasswordShown] = useState(false);\n    const [ChangePassState, setChangePassState] = useState(true);\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n      } = useForm({\n        mode: \"onChange\",\n      });\n\n    useEffect(() => {\n\n      if(authuser.providerData !== undefined){\n        authuser.providerData.forEach((authInfo) => { \n          if(authInfo.providerId === 'password'){\n            setChangePassState(false);\n          }\n               \n        })\n    \n      }\n        async function fetchdata(){\n        if(authuser)\n         await props.getUserProfileById(authuser.uid);\n         setLoader(loading);\n        }\n        fetchdata();\n    },[authuser.uid]);\n   console.log('auth user for chang password',authuser);\n    const onSubmit = async (event) => {\n       \n          const data = {\n           \n            password: event.password,\n            new_password: event.new_password,\n            \n    \n          };\n        await props.changePassword(data);\n        \n    };\n\n    const togglePassword = (pass_type) => {\n      if (pass_type === 'pass') {\n        setPasswordShown(!passwordShown);\n      }\n      if (pass_type === 'new_pass') {\n        setNewPasswordShown(!newpasswordShown);\n      }\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n        {isLoader ? <Loader isLoader={true} /> : null} \n        <div className=\"tab-inner-content account-settings\">\n            <div className=\"form-row1\">\n                <label>EMAIL</label>\n                <input type=\"text\" className=\"form-control log-inp\" disabled={true} value={userDetailsById.email}></input>\n            </div>\n\n            <div className=\"form-row1\">\n                <label>PASSWORD</label>\n                <input disabled={ChangePassState} type={passwordShown ? \"text\" : \"password\"} className=\"form-control log-inp\"  placeholder=\"Password\" name=\"password\" {...register(\"password\", {\n                    required: true,\n                  })} />\n                   <div onClick={() => togglePassword('pass')} className=\"rd-img\"><img src={passwordShown ? eye_img : eye_slash_img} alt='' /></div>\n                  {errors?.password?.type === \"required\" && (\n                    <p className=\"errMsg\">This field is required</p>\n                  )}\n                \n                {/* <FontAwesome className=\"pass-show-hide\" name=\"eye\"/> */}\n                <div className=\"should-you change-pass\">\n                    To change your password enter your current password\n                </div>\n            </div>\n\n            <div className=\"form-row1\">\n                <label>NEW PASSWORD</label>\n                <input disabled={ChangePassState} type={newpasswordShown ? \"text\" : \"password\"} className=\"form-control log-inp\" name=\"new_password\" placeholder=\"New password\" {...register(\"new_password\", {\n                    required: true,\n                    pattern:\n                      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/i,\n                  })} />\n                   <div onClick={() => togglePassword('new_pass')} className=\"rd-img\"><img src={newpasswordShown ? eye_img : eye_slash_img} alt='' /></div>\n                  {errors?.new_password?.type === \"required\" && (\n                    <p className=\"errMsg\">This field is required</p>\n                  )}\n                  {errors?.new_password?.type === \"pattern\" && (\n                    <p className=\"errMsg\">Password should be strong</p>\n                  )}\n                {/* <FontAwesome className=\"pass-show-hide\" name=\"eye\"/> */}\n            </div>\n\n            <div className=\"cancel-logout-sec\">\n                <div className=\"login-via create-ac\">\n                    <Button  disabled={ChangePassState} type=\"submit\" className=\"log-btn btn\">\n                        Update\n                    </Button>\n                </div>\n            </div>\n        </div>\n        </form>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        loading : state.authReducer.loading\n    }\n}\nconst actionCreators = { getUserProfileById, changePassword,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(AccountSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/infoSetting.js",["606","607"],"import React, {useState, useEffect } from 'react'\nimport calendar_img from '../../../assets/images/Calendar.png';\nimport { DateDropDown, MonthDropDown, YearDropDown } from '../../components/calendar_date';\nimport { useForm } from 'react-hook-form';\nimport * as moment from 'moment';\nimport { Button } from '@material-ui/core'\n\n//Redux\n\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById,updateUserProfile,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport Loader from './../../../utils/Loader';\n\nfunction InfoSetting(props,{history}) {\n    const { userDetailsById,authuser,loading } = useSelector((state) => state.authReducer);\n    const [isLoader, setLoader] = useState(false);\n    const [bday_set,setBDay] = useState('');\n    const [bmonth_set,setBMonth] = useState('');\n    const [byear_set,setBYear] = useState('');\n\n    const iconRemove = {\n        backgroundImage : 'none',\n    }\n    const iconAdd = {\n        backgroundImage : '',\n    }\n    const {\n      register,\n      handleSubmit,\n      getValue,\n      reset,\n      formState: { errors },\n    } = useForm({\n      mode: \"onChange\",\n    });\n    \n    useEffect(() => {\n        async function fetchdata(){\n        if(authuser)\n         await props.getUserProfileById(authuser.uid);\n         setLoader(loading);\n        }\n        fetchdata();\n       \n    },[authuser.uid]);\n\n    \n      // age validation\n    const isAgeGreater = (birth_year) => {\n\n        var age = 0;\n        var currentDate = new Date();\n        var currentYear = currentDate.getFullYear();\n        age = currentYear - birth_year;\n        if (age > 14) {\n        return true;\n        }\n        else {\n        return false;\n        }\n    }\n    \n    useEffect( () => {\n       \n        reset({\n            user_name: userDetailsById.username,\n            user_type: userDetailsById.user_type,\n            birth_day:  moment(userDetailsById.dob).format('D'),\n            birth_month:  moment(userDetailsById.dob).format('M'),\n            birth_year:  moment(userDetailsById.dob).format('YYYY'),\n           \n          });\n         console.log('---------',userDetailsById);\n    },[userDetailsById,reset]);\n    \n    // console.log('birth_day',birth_day);\n  \n    const onSubmit = async (event) => {\n       \n        const birthdate = moment( event.birth_month + '/' +  event.birth_day+ '/' + event.birth_year).format('MM/DD/YYYY');\n        const data = {\n        update_type: 'info',\n        //user_type: event.user_type,\n        username: event.user_name,\n        dob: birthdate,//new Date(birthdate).toLocaleDateString(),\n        };\n        await props.updateUserProfile(data, props.history);\n        \n    };\n    const ValidateSpacesFields =  (value) => !!value.trim();\n    return (\n       \n        <div className=\"tab-inner-content account-settings\">\n            {isLoader ? <Loader isLoader={true} /> : null} \n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-row1\">\n                    <label>USER NAME</label>\n                    <input type=\"text\" name=\"user_name\" className=\"form-control log-inp\" {...register(\"user_name\", {\n                        required: true,\n                        maxLength: 20,\n                        validate: ValidateSpacesFields\n                       \n                    })}/>\n                    {errors?.user_name?.type === \"required\" && (\n                        <p className=\"errMsg\">This field is required</p>\n                    )}\n                    {errors?.user_name?.type === \"maxLength\" && (\n                        <p className=\"errMsg\">\n                        User name cannot exceed 20 characters\n                        </p>\n                    )}\n                    {errors?.user_name?.type === \"validate\" &&\n                        <p className=\"errMsg\">Space should not be allowed.</p>\n                    }\n                </div>\n\n                {/* <div className=\"form-row1\">\n                    <label>USER TYPE</label>\n                    <select name=\"user_type\" className=\"form-control log-inp\" {...register(\"user_type\", { required: true, })}>\n                        <option selected={userDetailsById.user_type === \"Creator\" ? 'selected': ''} value=\"Creator\">Creator</option>\n                        <option selected={userDetailsById.user_type === \"Subscriber\" ? 'selected' : ''} value=\"Subscriber\">Subscriber</option>\n                    </select>\n                    {errors?.user_type?.type === \"required\" && (\n                        <p className=\"errMsg\">This field is required</p>\n                    )}\n                    <div className=\"lm\">Learn more about Creators and Supporters</div>\n                </div>  */}\n\n                <div className=\"your-birth\">\n                <div className=\"your-bith-head\">\n                <img src={calendar_img} alt='' /> your birthday\n                </div>\n\n                <div className=\"your-birth-time\">\n                    <select style={bday_set !== '' ? iconRemove : userDetailsById.dob !== '' ? iconRemove : iconAdd } onClick={e => setBDay(e.target.value)}  name=\"birth_day\" className=\"form-control log-inp\"  {...register(\"birth_day\", { required: true, })}>\n                        <DateDropDown selectedDate={userDetailsById.dob}/>\n                    </select>\n\n                    <select style={bmonth_set !== '' ? iconRemove : userDetailsById.dob !== '' ? iconRemove : iconAdd } onClick={e => setBMonth(e.target.value)} name=\"birth_month\" className=\"form-control log-inp\"  {...register(\"birth_month\", { required: true, })}>\n                        <MonthDropDown selectedMonth={userDetailsById.dob}/>\n                    </select>\n\n                    <select style={byear_set !== '' ? iconRemove : userDetailsById.dob !== '' ? iconRemove : iconAdd } onClick={e => setBYear(e.target.value)} name=\"birth_year\" className=\"form-control log-inp\" {...register(\"birth_year\", { required: true, validate: isAgeGreater })}>\n                        <YearDropDown selectedYear={userDetailsById.dob}/>\n                    </select> \n                   \n                </div> \n                {(errors?.birth_day?.type === \"required\" || errors?.birth_year?.type === \"required\" || errors?.birth_month?.type === \"required\") && <p className=\"errMsg\">This field is required</p>}\n                {errors?.birth_year?.type === \"validate\" &&\n                <p className=\"errMsg\">You must be 14 years old or above.</p>\n                }\n               \n                <div className=\"cancel-logout-sec\">\n                    <div className=\"login-via create-ac\">\n                        <Button  type=\"submit\" className=\"log-btn btn\">\n                            Update\n                        </Button>\n                    </div>\n                </div> \n\n            </div>\n            </form>\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        authuser: state.authReducer.authuser,\n        loading : state.authReducer.loading\n    }\n}\n\nconst actionCreators = { getUserProfileById,updateUserProfile,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(InfoSetting);\n\n\n","/home/asus/dapify/src/templates/view/Settings/helpSetting.js",["608","609","610","611","612","613"],"import React, { useState, useEffect,useLayoutEffect } from 'react'\nimport { Link } from \"react-router-dom\";\nimport FAQ from './FAQ';\nimport Support from './support';\n//import PrivacyPolicy from './privacyPolicy';\nimport { Button } from '@material-ui/core'\n// Redux\nimport { connect,useSelector } from \"react-redux\";\nimport { logout,DisableUser } from \"../../../Redux/actions/auth-actions\";\nimport { getAuthenticationStatus } from \"../../../Redux/auth-service\";\nimport Loader from './../../../utils/Loader';\nimport {auth } from \"../../../Redux/auth-service\";\nimport { confirm } from \"react-confirm-box\";\n\nfunction HelpSetting(props, { history }) {\n    const options = {\n        labels: {\n            confirmable: \"Confirm\",\n            cancellable: \"Cancel\"\n        }\n    }\n    const { disableUserData,authuser } = useSelector((state) => state.authReducer);\n\n    const [showFAQ, setShowFAQ] = useState(false);\n    const [showSupport, setShowSupport] = useState(false);\n    const [showPrivacyPolicy, setShowPrivacyPolicy] = useState(false);\n\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\n    const [isLoader, setLoader] = useState(false);\n\n    useLayoutEffect(() => {\n\n        setLoader(false);\n        setIsAuthenticated(getAuthenticationStatus());\n    });\n\n    const handleLogout = async (event) => {\n        await props.logout(props.pageHistory);\n    };\n\n    const handleCancelAccount = async (event) => {\n        const results = await confirm(\"Are you sure you want to cancel your account?\",options);\n        if (results) {\n            var user = auth.currentUser;\n            const data = {\n                uid: user.uid, \n            };\n            await props.DisableUser(data, props.pageHistory); \n        }\n    };\n   \n    return (\n        <>\n            {isLoader ? <Loader isLoader={true} /> : null}\n            <div className=\"help-sec\">\n                <FAQ show={showFAQ} close={() => setShowFAQ(false)} />\n                <Support show={showSupport} close={() => setShowSupport(false)} />\n                {/* <PrivacyPolicy show={showPrivacyPolicy} close={() => setShowPrivacyPolicy(false)} /> */}\n\n                <h3>Help</h3>\n                <ul>\n                    <li>\n                        <Button  className='btn' onClick={() => { setShowFAQ(true); setLoader(true); }}>Frequently Asked Questions (FAQ) <img src={require('../../../assets/images/redShape.png').default} alt='' /></Button>\n                    </li>\n\n                    <li>\n                        <Link className='MuiButtonBase-root MuiButton-root MuiButton-text btn' to=\"/privacyPolicy\">\n                            <span class=\"MuiButton-label\">Privacy Policy\n                                <img src={require('../../../assets/images/redShape.png').default} alt='' />\n                            </span>\n                        </Link>\n                        {/* <Button  className='btn' onClick={() => { setShowPrivacyPolicy(true); setLoader(true); }}>Privacy Policy <img src={require('../../../assets/images/redShape.png').default} alt='' /></Button> */}\n                    </li>\n\n                    <li>\n                        <Button  className='btn' onClick={() => { setShowSupport(true); setLoader(true); }}>Support <img src={require('../../../assets/images/redShape.png').default} alt='' /></Button>\n                    </li>\n                </ul>\n            </div>\n\n            <div className=\"cancel-logout-sec\">\n                <div className=\"login-via create-ac\">\n                    {isAuthenticated &&\n                        <Button className=\"log-btn btn\" type=\"button\" onClick={handleLogout}>LOG OUT</Button>\n                    }\n                   <div className=\"ald\"> <Button className='log-btn btn' type=\"button\" onClick={handleCancelAccount}> Cancel Account</Button></div>\n                    {/* <div className=\"ald\"> <a href=\"#\">Cancel Account</a></div> */}\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst mapState = (state) => ({\n    authuser: state.authReducer.authuser,\n    disableUserData:state.authReducer.disableUserData\n});\nconst actionCreators = { logout,DisableUser };\nexport default connect(mapState, actionCreators)(HelpSetting);\n","/home/asus/dapify/src/templates/view/Settings/imageSetting.js",["614"],"import React, { useState, useEffect } from 'react'\nimport user_cover_img from '../../../assets/images/user-cover-image.png';\nimport user_img from '../../../assets/images/dummy_user.png';\n\n//Redux\nimport { useSelector, connect } from \"react-redux\";\nimport { getUserProfileById,updateUserProfileOrCoverImage,fetchUser } from \"../../../Redux/actions/auth-actions\";\nimport { ERROR } from './../../../utils/errors';\nimport 'antd/dist/antd.css'\n\nfunction ImageSetting(props,{history}) {\n    \n    const [currentTab, setCurrentTab ] = useState('');\n    const [UserViewImage, setUserViewImage] = useState(null);\n    const [UserCoverViewImage, setCoverViewImage] = useState(null);\n    const { userDetailsById,authuser,imagePath } = useSelector((state) => state.authReducer);\n\n   \n    useEffect(() => { \n        if(props.activeTab)\n        {\n            setCurrentTab(props.activeTab);\n        }\n\n        console.log('typeeeeeeeeeee',imagePath.type);\n        if(imagePath !== ''){\n            if(imagePath.type === \"user image\"){\n                setUserViewImage(imagePath.name) \n            }\n            if(imagePath.type === \"cover image\"){\n                setCoverViewImage(imagePath.name) \n            }\n        }\n    },[imagePath,UserViewImage,props.activeTab]);\n    \n    useEffect(() => {\n     \n        async function fetchdata(){\n            if(authuser)\n                await props.getUserProfileById(authuser.uid);\n            }\n            fetchdata();\n    },[authuser,imagePath,currentTab]);\n\n  \n    const UserImageChange =  async (e) => {\n       \n        const imageFile = e.target.files[0];\n      \n        if (imageFile) {\n            let fileExtension = imageFile.name.split('.').pop();\n            let allowFiles = ['png', 'jpg', 'jpeg'];\n            if(allowFiles.includes(fileExtension)){\n                setUserViewImage(URL.createObjectURL(e.target.files[0]));\n                const data = {\n                    image: imageFile,\n                    type: \"user image\",\n                    name: URL.createObjectURL(e.target.files[0]),\n                };\n                await props.updateUserProfileOrCoverImage(data,props.pagehistory);\n            }else {\n                ERROR(\"Please select only PNG, JPG & JPEG file\");\n            }\n        }\n    }\n\n    const CoverImageChange = async (e) => {\n      \n        const imageFile = e.target.files[0];\n        if (imageFile) {\n            let fileExtension = imageFile.name.split('.').pop();\n            let allowFiles = ['png', 'jpg', 'jpeg'];\n            if(allowFiles.includes(fileExtension)){\n                setCoverViewImage(URL.createObjectURL(e.target.files[0])); \n                const data = {\n                    image: imageFile,\n                    type: \"cover image\",\n                    name: URL.createObjectURL(e.target.files[0]),\n                };\n\n                 await props.updateUserProfileOrCoverImage(data,props.pagehistory);\n            }\n            else {\n                ERROR(\"Please select only PNG, JPG & JPEG file\");\n            }\n        }\n    }\n    \n    return (\n      \n        <div className=\"profile-cover-photos\">\n             \n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <div className=\"user-img\">\n                        <img src={UserViewImage ? UserViewImage : userDetailsById.avatarURL ? userDetailsById.avatarURL :user_img} alt='' />\n                    </div>\n                    <div className=\"change-photo\">                       \n                        <div className=\"change-photo-inner\">\n                            <label for=\"file\">change-photo</label>\n                            <input className=\"foo\" name=\"user_image\" type=\"file\" id=\"file\" onChange={UserImageChange} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-6\">\n                    <div className=\"cover-img\">\n                        <img src={UserCoverViewImage ? UserCoverViewImage : userDetailsById.coverURL ? userDetailsById.coverURL  : user_cover_img} alt='' />\n                    </div>\n                    <div className=\"change-photo\">\n                        <div className=\"change-photo-inner\">\n                            <label for=\"cover_file\">Change COVER</label> \n                            <input className=\"coverimg\" name=\"user_cover_image\" type=\"file\" id=\"cover_file\" onChange={CoverImageChange} />\n                        </div>                        \n                    </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetailsById: state.authReducer.userDetailsById,\n        imagePath: state.authReducer.imagePath,\n        authuser: state.authReducer.authuser,\n    }\n}\n\nconst actionCreators = { getUserProfileById, updateUserProfileOrCoverImage,fetchUser };\nexport default connect(mapStateToProps, actionCreators)(ImageSetting);\n\n","/home/asus/dapify/src/templates/components/numberToAbbreviated.js",["615"],"import React from \"react\";\n\n\nfunction NumberToAbbreviate(follower_number){\n    \n    var number = follower_number;\n  \n    var s = [\"\", \"k\", \"m\", \"b\", \"t\"];\n  \n    // dividing the value by 3.\n    var sNum = Math.floor((\"\" + number).length / 3);\n\n    // calculating the precised value.\n    var sVal = parseFloat((\n      sNum !== 0 ? (number / Math.pow(1000, sNum)) : number).toPrecision(2));\n    \n    if (sVal % 1 !== 0) {\n        sVal = sVal.toFixed(1);\n    }\n\n    // appending the letter to precised val.\n    return sVal + s[sNum];\n  };\n\nexport default NumberToAbbreviate;\n","/home/asus/dapify/src/Redux/actions/insights-Instagram-actions.js",["616","617","618"],"import {\n  POST_USER_INSTAGRAM_INSIGHTS_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_SUCCESS,\n  POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST, GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS,\n  POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST, GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS,\n  POST_INSTAGRAM_FOLLOWERS_REQUEST, GET_INSTAGRAM_FOLLOWERS_FAILURE, GET_INSTAGRAM_FOLLOWERS_SUCCESS,\n  POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST,GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE,GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS,\n} from './type';\n\nimport {\n  LongLiveAccessToken, InstagramBusinessAccount, getInstaUserMediaPost, getInstaUserMediaInsights, getInstaUserFollower,\n  InstaTopCityAudience,InstaFollowerGrowth\n\n} from './api_url';\nimport { facebookProvider, auth } from \"../auth-service\";\nimport axios from 'axios';\nimport firebaseConfig from \"../../firebase\";\nimport { ERROR, RedirectModal, Success } from './../../utils/errors';\nimport 'antd/dist/antd.css'\nimport * as moment from 'moment';\n\n// For get instagram user\nexport const getInstgramInsightsUser = (uid,accountLinked) => async dispatch => {\n  try {\n\n    var provider_type = facebookProvider;\n    var responseToken = '';\n    dispatch({ type: POST_USER_INSTAGRAM_INSIGHTS_REQUEST, payload: true });\n\n    if(accountLinked === true){\n      responseToken = await auth.signInWithPopup(provider_type)\n    }else{\n      alert(accountLinked)\n      responseToken = await auth.currentUser.linkWithPopup(provider_type)\n    }\n    \n    console.log('fbresp', responseToken);\n    if (responseToken.user) {\n\n      console.log('social login response', responseToken);\n      console.log('accesstokennnn', responseToken.credential.accessToken)\n\n      if (responseToken?.credential.accessToken) {\n        const tkn_data = {\n          token: responseToken.credential.accessToken\n        }\n\n        const response = await axios.post(LongLiveAccessToken, tkn_data);\n        console.log('insresponse', response);\n        if (response.status === 200) {\n          if (response.data?.access_token) {\n            const expiredate = new Date();\n            expiredate.setDate(expiredate.getDate() + 59);\n            var newexpiredate = moment(expiredate).format('MM/DD/YYYY HH:mm:ss')\n\n            const accData = {\n              token: response.data.access_token,\n            }\n            console.log('accData', accData);\n            const Accountresponse = await axios.post(InstagramBusinessAccount, accData);\n            console.log('Accountresponse', Accountresponse);\n            if (Accountresponse.status === 200) {\n\n              if (Accountresponse.data.data.length !== 0) {\n\n                const Tokendata =\n                {\n                  'InsightsTokenData': {\n                    'token': response.data.access_token,\n                    'date': newexpiredate,\n                  },\n\n                  'InsightsUserData': {\n                    'username': Accountresponse.data.data[0].instagram_business_account.username,\n                    'account_id': Accountresponse.data.data[0].instagram_business_account.id,\n                    'name': Accountresponse.data.data[0].name,\n                    'id': Accountresponse.data.data[0].id,\n                  }\n                }\n\n                const resp = await firebaseConfig.firestore().collection('users').doc(uid).update(Tokendata).then(async function (docres) {\n                  dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_SUCCESS, payload: true });\n\n                }).catch(function (error) {\n                  dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n                  ERROR('Please try again..');\n                })\n              } else {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n                ERROR('Add business Page');\n              }\n\n\n            } else {\n              dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Business Account not found' });\n              ERROR('Business Account not found');\n            }\n\n          } else {\n            dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n            ERROR('Please try again..');\n          }\n        } else {\n          dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: 'Please try again..' });\n      ERROR('Please try again..');\n    }\n\n  } catch (error) {\n    dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_FAILURE, payload: error });\n    if (error.code === 'auth/credential-already-in-use') {\n    ERROR('Already exists, Please try with another credential');\n    }\n  }\n};\n\n// get instagram media post\nexport const getInstaMediaPost = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_USER_INSTAGRAM_INSIGHTS_POST_REQUEST, payload: true });\n    if (post_data) {\n      var media_arr = [];\n      var user_follower_count = 0;\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          since: post_data.since,\n          until: post_data.until,\n\n        }\n        const response = await axios.post(getInstaUserMediaPost, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            var i = 0;\n            media_arr = response.data.data;\n            var media_insights_arr = [];\n            const followpostdata = {\n              token: userdata.InsightsTokenData.token,\n              account_id: userdata.InsightsUserData.account_id,\n            }\n            const follower_response = await axios.post(getInstaUserFollower, followpostdata);\n            console.log('follower_response', follower_response);\n            if (follower_response.status === 200) {\n              user_follower_count = follower_response.data.followers_count\n              media_insights_arr['follower_count'] = user_follower_count;\n            } else {\n              user_follower_count = 0;\n              media_insights_arr['follower_count'] = user_follower_count;\n            }\n\n            getInsights(media_arr[i]);\n\n            async function getInsights(media_val) {\n\n              if (media_arr.length > i) {\n                var postInsights = {\n                  token: userdata.InsightsTokenData.token,\n                  post_id: media_val.id,\n\n                }\n                const insights_response = await axios.post(getInstaUserMediaInsights, postInsights);\n\n                if (insights_response.status === 200) {\n\n                  media_val['insight_data'] = insights_response.data\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n\n                } else {\n                  media_val['insight_data'] = {}\n                  media_insights_arr.push(media_val);\n                  i = i + 1;\n                  getInsights(media_arr[i]);\n                }\n\n              }\n              if (media_arr.length === media_insights_arr.length) {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS, payload: media_insights_arr });\n              } else {\n                dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_SUCCESS, payload: [] });\n              }\n            }\n\n          } else {\n            dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: false });\n\n          }\n        } else {\n          dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n          ERROR('Please try again..');\n        }\n      } else {\n        dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n        ERROR('Please try again..');\n      }\n    } else {\n      dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: 'Please try again..' });\n      ERROR('Please try again..');\n    }\n  } catch (error) {\n    dispatch({ type: GET_USER_INSTAGRAM_INSIGHTS_POST_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n// get instagram top city audience\nexport const getInstaTopCityAudience = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_TOP_CITY_AUDIENCE_REQUEST, payload: true });\n    if (post_data) {\n      //var media_arr = [];\n\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"lifetime\",\n        }\n        const response = await axios.post(InstaTopCityAudience, postdata);\n\n        if (response.status === 200) {\n          if (response.data) {\n            \n            dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_SUCCESS, payload: response.data });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_TOP_CITY_AUDIENCE_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n\nexport const getInstaFollowers = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_FOLLOWERS_REQUEST, payload: true });\n    if (post_data) {\n\n      var userdata = post_data.userData;\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n        }\n        const response = await axios.post(getInstaUserFollower, postdata);\n\n        if (response.status === 200) {\n          console.log('follower_res', response.data);\n          if (response.data) {\n            response.data.type = 'instagram';\n            dispatch({ type: GET_INSTAGRAM_FOLLOWERS_SUCCESS, payload: response.data });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_FOLLOWERS_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};\n\n\n\n// get instagram follower growth\nexport const getFollowersGrowth = (post_data) => async dispatch => {\n  try {\n\n    dispatch({ type: POST_INSTAGRAM_FOLLOWER_GROWTH_REQUEST, payload: true });\n    if (post_data) {\n      //var media_arr = [];\n\n      var userdata = post_data.userData;\n\n      if (userdata?.InsightsTokenData.token) {\n\n        const postdata = {\n          token: userdata.InsightsTokenData.token,\n          account_id: userdata.InsightsUserData.account_id,\n          period: \"day\",\n          since : post_data.since,\n          until: post_data.until,\n        }\n        const response = await axios.post(InstaFollowerGrowth, postdata);\n        console.log('followercount---growth',response.data);\n        if (response.status === 200) {\n          if (response.data) {\n            var rescount = 0;\n            if(response.data.data[0]?.values){\n            var followerres = response.data.data[0].values;\n              for (let i = 0; i < followerres.length; i++) {\n                rescount = rescount + followerres[i]['value'];\n              }\n          }\n              \n            dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_SUCCESS, payload: rescount });\n          } else {\n            dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found' });\n\n          }\n        } else {\n          dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n        }\n      } else {\n        dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n      }\n    } else {\n      dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: 'No record Found.' });\n\n    }\n  } catch (error) {\n    dispatch({ type: GET_INSTAGRAM_FOLLOWER_GROWTH_FAILURE, payload: error });\n    console.log('sociallogin', error.message);\n    //ERROR(error.message);\n  }\n};","/home/asus/dapify/src/templates/components/mediaLike.js",[],"/home/asus/dapify/src/templates/components/mediaBookmark.js",[],"/home/asus/dapify/src/templates/components/mediaDuration.js",[],"/home/asus/dapify/src/templates/components/shareMediaMusic.js",["619","620"],"import React, { useState, useEffect } from 'react'\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from '@material-ui/core'\nimport {\n  EmailShareButton,\n  \n  FacebookShareButton,\n\n  WhatsappShareButton,\n  FacebookIcon,\n  EmailIcon,\n  WhatsappIcon,\n  FacebookShareCount,\n} from \"react-share\";\n\n\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n//import { Success } from './../../../utils/errors';\nimport 'antd/dist/antd.css'\nimport EncryptProfileUrl from './encryptProfileUrl';\nimport EncryptShareUrl from './encryptShareUrl';\n\nfunction ShareMediaMusic(props, { history }) {\n \n  const [FBshareUrl, setFBShareUrl] = useState('');\n  const [EmailshareUrl, setEmailShareUrl] = useState('');\n  const [WhatsappshareUrl, setWhatsappShareUrl] = useState('');\n  //const [shareUrl, setShareUrl] = useState('');\nconsole.log('shrare all propsss',props);\n\n\n  useEffect(() => {\n\n    \n      if (props.url_id) {\n        var pathurl = 'app.dapify.io';// window.location.origin;\n        var url_val = EncryptProfileUrl(props.url_id);\n        var fb_shareType = EncryptShareUrl('Facebook');\n        var watsapp_shareType = EncryptShareUrl('Watsapp');\n        var email_shareType = EncryptShareUrl('Email');\n\n        var mediaId = EncryptShareUrl(props.media_id);\n      \n        var fburl = pathurl +(url_val) +'/'+fb_shareType+'/'+mediaId;\n        var watsappurl = pathurl +(url_val) +'/'+watsapp_shareType+'/'+mediaId;\n        var emailurl = pathurl +(url_val) +'/'+email_shareType+'/'+mediaId; \n        setWhatsappShareUrl(watsappurl);\n        console.log('wp',watsappurl);\n        setFBShareUrl(fburl);\n        setEmailShareUrl(emailurl);\n      }\n    \n   \n  },[props.url_id,props.media_id]);\n\nconsole.log('currenturl',window.location.origin);\n  return (\n\n    <Modal\n      onHide={props.close}\n      show={props.show}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">Share with</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <EmailShareButton\n          url={EmailshareUrl}  \n         >\n          <EmailIcon size={40} round />\n        </EmailShareButton>\n       \n        &nbsp;\n\n           <FacebookShareButton  url={FBshareUrl} >\n          <FacebookIcon size={40} round />\n        \n        \n        </FacebookShareButton> \n        <FacebookShareCount url={FBshareUrl}/>\n         \n \n              \n        &nbsp;\n       \n        <WhatsappShareButton url={WhatsappshareUrl}>\n          <WhatsappIcon size={40} round />\n        </WhatsappShareButton>\n        &nbsp;\n       \n      </Modal.Body>\n      <Modal.Footer>\n        <Button className=\"can-btn btn\" onClick={props.close}>Cancel</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default ShareMediaMusic;\n\n\n","/home/asus/dapify/src/templates/components/customPlayPause.js",[],"/home/asus/dapify/src/templates/view/Settings/paidContent.js",[],"/home/asus/dapify/src/templates/view/Settings/support.js",[],"/home/asus/dapify/src/templates/view/Settings/FAQ.js",[],"/home/asus/dapify/src/templates/components/encryptShareUrl.js",["621"],"import React from \"react\";\n\n\nfunction EncryptShareUrl(data){\n    \n    if(data !== ''){\n        \n       // const path = window.location.origin;\n        const data_enc = Buffer.from(data).toString('base64');\n        const enc_res =  data_enc;\n        return enc_res;\n    }\n   \n  };\n\nexport default EncryptShareUrl;",{"ruleId":"622","replacedBy":"623"},{"ruleId":"624","replacedBy":"625"},{"ruleId":"626","severity":1,"message":"627","line":1,"column":31,"nodeType":"628","messageId":"629","endLine":1,"endColumn":40},{"ruleId":"630","severity":1,"message":"631","line":37,"column":8,"nodeType":"632","endLine":37,"endColumn":10,"suggestions":"633"},{"ruleId":"626","severity":1,"message":"634","line":7,"column":38,"nodeType":"628","messageId":"629","endLine":7,"endColumn":66},{"ruleId":"626","severity":1,"message":"635","line":14,"column":11,"nodeType":"628","messageId":"629","endLine":14,"endColumn":26},{"ruleId":"626","severity":1,"message":"636","line":16,"column":10,"nodeType":"628","messageId":"629","endLine":16,"endColumn":25},{"ruleId":"630","severity":1,"message":"637","line":67,"column":6,"nodeType":"632","endLine":67,"endColumn":20,"suggestions":"638"},{"ruleId":"626","severity":1,"message":"639","line":25,"column":17,"nodeType":"628","messageId":"629","endLine":25,"endColumn":30},{"ruleId":"626","severity":1,"message":"640","line":28,"column":10,"nodeType":"628","messageId":"629","endLine":28,"endColumn":18},{"ruleId":"626","severity":1,"message":"641","line":112,"column":15,"nodeType":"628","messageId":"629","endLine":112,"endColumn":23},{"ruleId":"626","severity":1,"message":"642","line":240,"column":27,"nodeType":"628","messageId":"629","endLine":240,"endColumn":31},{"ruleId":"626","severity":1,"message":"642","line":296,"column":25,"nodeType":"628","messageId":"629","endLine":296,"endColumn":29},{"ruleId":"626","severity":1,"message":"643","line":560,"column":16,"nodeType":"628","messageId":"629","endLine":560,"endColumn":32},{"ruleId":"626","severity":1,"message":"644","line":607,"column":15,"nodeType":"628","messageId":"629","endLine":607,"endColumn":23},{"ruleId":"626","severity":1,"message":"644","line":618,"column":15,"nodeType":"628","messageId":"629","endLine":618,"endColumn":23},{"ruleId":"626","severity":1,"message":"642","line":717,"column":11,"nodeType":"628","messageId":"629","endLine":717,"endColumn":15},{"ruleId":"626","severity":1,"message":"642","line":788,"column":11,"nodeType":"628","messageId":"629","endLine":788,"endColumn":15},{"ruleId":"645","severity":1,"message":"646","line":184,"column":148,"nodeType":"647","messageId":"648","endLine":184,"endColumn":246,"fix":"649"},{"ruleId":"645","severity":1,"message":"646","line":194,"column":113,"nodeType":"647","messageId":"648","endLine":194,"endColumn":209,"fix":"650"},{"ruleId":"645","severity":1,"message":"646","line":203,"column":56,"nodeType":"647","messageId":"648","endLine":203,"endColumn":158,"fix":"651"},{"ruleId":"645","severity":1,"message":"646","line":207,"column":56,"nodeType":"647","messageId":"648","endLine":207,"endColumn":145,"fix":"652"},{"ruleId":"626","severity":1,"message":"653","line":19,"column":10,"nodeType":"628","messageId":"629","endLine":19,"endColumn":17},{"ruleId":"630","severity":1,"message":"654","line":40,"column":8,"nodeType":"632","endLine":40,"endColumn":10,"suggestions":"655"},{"ruleId":"630","severity":1,"message":"654","line":31,"column":8,"nodeType":"632","endLine":31,"endColumn":10,"suggestions":"656"},{"ruleId":"630","severity":1,"message":"654","line":40,"column":8,"nodeType":"632","endLine":40,"endColumn":10,"suggestions":"657"},{"ruleId":"630","severity":1,"message":"658","line":59,"column":7,"nodeType":"632","endLine":59,"endColumn":21,"suggestions":"659"},{"ruleId":"630","severity":1,"message":"660","line":72,"column":7,"nodeType":"632","endLine":72,"endColumn":24,"suggestions":"661"},{"ruleId":"626","severity":1,"message":"662","line":4,"column":8,"nodeType":"628","messageId":"629","endLine":4,"endColumn":16},{"ruleId":"630","severity":1,"message":"663","line":26,"column":7,"nodeType":"632","endLine":26,"endColumn":9,"suggestions":"664"},{"ruleId":"630","severity":1,"message":"660","line":39,"column":7,"nodeType":"632","endLine":39,"endColumn":24,"suggestions":"665"},{"ruleId":"630","severity":1,"message":"666","line":21,"column":5,"nodeType":"632","endLine":21,"endColumn":7,"suggestions":"667"},{"ruleId":"626","severity":1,"message":"627","line":1,"column":17,"nodeType":"628","messageId":"629","endLine":1,"endColumn":26},{"ruleId":"626","severity":1,"message":"668","line":10,"column":8,"nodeType":"628","messageId":"629","endLine":10,"endColumn":22},{"ruleId":"626","severity":1,"message":"669","line":23,"column":11,"nodeType":"628","messageId":"629","endLine":23,"endColumn":20},{"ruleId":"670","severity":1,"message":"671","line":290,"column":21,"nodeType":"647","endLine":290,"endColumn":24},{"ruleId":"670","severity":1,"message":"671","line":304,"column":21,"nodeType":"647","endLine":304,"endColumn":24},{"ruleId":"626","severity":1,"message":"627","line":1,"column":15,"nodeType":"628","messageId":"629","endLine":1,"endColumn":24},{"ruleId":"626","severity":1,"message":"672","line":1,"column":26,"nodeType":"628","messageId":"629","endLine":1,"endColumn":34},{"ruleId":"626","severity":1,"message":"673","line":18,"column":23,"nodeType":"628","messageId":"629","endLine":18,"endColumn":31},{"ruleId":"626","severity":1,"message":"674","line":18,"column":32,"nodeType":"628","messageId":"629","endLine":18,"endColumn":40},{"ruleId":"626","severity":1,"message":"675","line":12,"column":18,"nodeType":"628","messageId":"629","endLine":12,"endColumn":34},{"ruleId":"626","severity":1,"message":"676","line":20,"column":26,"nodeType":"628","messageId":"629","endLine":20,"endColumn":41},{"ruleId":"630","severity":1,"message":"654","line":32,"column":7,"nodeType":"632","endLine":32,"endColumn":54,"suggestions":"677"},{"ruleId":"626","severity":1,"message":"635","line":21,"column":13,"nodeType":"628","messageId":"629","endLine":21,"endColumn":28},{"ruleId":"630","severity":1,"message":"678","line":33,"column":8,"nodeType":"632","endLine":33,"endColumn":22,"suggestions":"679"},{"ruleId":"626","severity":1,"message":"680","line":4,"column":8,"nodeType":"628","messageId":"629","endLine":4,"endColumn":16},{"ruleId":"626","severity":1,"message":"635","line":17,"column":13,"nodeType":"628","messageId":"629","endLine":17,"endColumn":28},{"ruleId":"630","severity":1,"message":"678","line":29,"column":7,"nodeType":"632","endLine":29,"endColumn":21,"suggestions":"681"},{"ruleId":"626","severity":1,"message":"680","line":3,"column":8,"nodeType":"628","messageId":"629","endLine":3,"endColumn":16},{"ruleId":"626","severity":1,"message":"682","line":4,"column":10,"nodeType":"628","messageId":"629","endLine":4,"endColumn":14},{"ruleId":"626","severity":1,"message":"683","line":4,"column":16,"nodeType":"628","messageId":"629","endLine":4,"endColumn":19},{"ruleId":"626","severity":1,"message":"684","line":4,"column":21,"nodeType":"628","messageId":"629","endLine":4,"endColumn":30},{"ruleId":"626","severity":1,"message":"673","line":23,"column":29,"nodeType":"628","messageId":"629","endLine":23,"endColumn":37},{"ruleId":"626","severity":1,"message":"685","line":10,"column":8,"nodeType":"628","messageId":"629","endLine":10,"endColumn":15},{"ruleId":"626","severity":1,"message":"686","line":16,"column":33,"nodeType":"628","messageId":"629","endLine":16,"endColumn":44},{"ruleId":"626","severity":1,"message":"687","line":19,"column":41,"nodeType":"628","messageId":"629","endLine":19,"endColumn":55},{"ruleId":"630","severity":1,"message":"688","line":39,"column":8,"nodeType":"632","endLine":39,"endColumn":41,"suggestions":"689"},{"ruleId":"626","severity":1,"message":"642","line":247,"column":13,"nodeType":"628","messageId":"629","endLine":247,"endColumn":17},{"ruleId":"626","severity":1,"message":"642","line":263,"column":13,"nodeType":"628","messageId":"629","endLine":263,"endColumn":17},{"ruleId":"626","severity":1,"message":"642","line":284,"column":13,"nodeType":"628","messageId":"629","endLine":284,"endColumn":17},{"ruleId":"626","severity":1,"message":"642","line":295,"column":13,"nodeType":"628","messageId":"629","endLine":295,"endColumn":17},{"ruleId":"690","severity":1,"message":"691","line":846,"column":35,"nodeType":"628","messageId":"692","endLine":846,"endColumn":49},{"ruleId":"690","severity":1,"message":"693","line":847,"column":35,"nodeType":"628","messageId":"692","endLine":847,"endColumn":50},{"ruleId":"626","severity":1,"message":"694","line":3,"column":8,"nodeType":"628","messageId":"629","endLine":3,"endColumn":14},{"ruleId":"626","severity":1,"message":"695","line":6,"column":27,"nodeType":"628","messageId":"629","endLine":6,"endColumn":48},{"ruleId":"626","severity":1,"message":"653","line":13,"column":17,"nodeType":"628","messageId":"629","endLine":13,"endColumn":24},{"ruleId":"626","severity":1,"message":"696","line":17,"column":10,"nodeType":"628","messageId":"629","endLine":17,"endColumn":14},{"ruleId":"626","severity":1,"message":"697","line":27,"column":12,"nodeType":"628","messageId":"629","endLine":27,"endColumn":20},{"ruleId":"630","severity":1,"message":"698","line":104,"column":8,"nodeType":"632","endLine":104,"endColumn":91,"suggestions":"699"},{"ruleId":"630","severity":1,"message":"700","line":124,"column":8,"nodeType":"632","endLine":124,"endColumn":16,"suggestions":"701"},{"ruleId":"630","severity":1,"message":"678","line":133,"column":8,"nodeType":"632","endLine":133,"endColumn":22,"suggestions":"702"},{"ruleId":"626","severity":1,"message":"675","line":7,"column":18,"nodeType":"628","messageId":"629","endLine":7,"endColumn":34},{"ruleId":"626","severity":1,"message":"635","line":22,"column":13,"nodeType":"628","messageId":"629","endLine":22,"endColumn":28},{"ruleId":"626","severity":1,"message":"703","line":23,"column":36,"nodeType":"628","messageId":"629","endLine":23,"endColumn":43},{"ruleId":"626","severity":1,"message":"676","line":26,"column":26,"nodeType":"628","messageId":"629","endLine":26,"endColumn":41},{"ruleId":"626","severity":1,"message":"704","line":29,"column":12,"nodeType":"628","messageId":"629","endLine":29,"endColumn":23},{"ruleId":"630","severity":1,"message":"705","line":55,"column":8,"nodeType":"632","endLine":55,"endColumn":26,"suggestions":"706"},{"ruleId":"630","severity":1,"message":"707","line":82,"column":8,"nodeType":"632","endLine":82,"endColumn":43,"suggestions":"708"},{"ruleId":"626","severity":1,"message":"675","line":6,"column":18,"nodeType":"628","messageId":"629","endLine":6,"endColumn":34},{"ruleId":"626","severity":1,"message":"635","line":13,"column":13,"nodeType":"628","messageId":"629","endLine":13,"endColumn":28},{"ruleId":"626","severity":1,"message":"703","line":14,"column":76,"nodeType":"628","messageId":"629","endLine":14,"endColumn":83},{"ruleId":"626","severity":1,"message":"676","line":16,"column":26,"nodeType":"628","messageId":"629","endLine":16,"endColumn":41},{"ruleId":"626","severity":1,"message":"704","line":19,"column":12,"nodeType":"628","messageId":"629","endLine":19,"endColumn":23},{"ruleId":"630","severity":1,"message":"709","line":49,"column":8,"nodeType":"632","endLine":49,"endColumn":83,"suggestions":"710"},{"ruleId":"630","severity":1,"message":"711","line":73,"column":7,"nodeType":"632","endLine":73,"endColumn":35,"suggestions":"712"},{"ruleId":"630","severity":1,"message":"678","line":26,"column":8,"nodeType":"632","endLine":26,"endColumn":30,"suggestions":"713"},{"ruleId":"626","severity":1,"message":"703","line":29,"column":34,"nodeType":"628","messageId":"629","endLine":29,"endColumn":41},{"ruleId":"626","severity":1,"message":"704","line":32,"column":12,"nodeType":"628","messageId":"629","endLine":32,"endColumn":23},{"ruleId":"630","severity":1,"message":"678","line":59,"column":7,"nodeType":"632","endLine":59,"endColumn":41,"suggestions":"714"},{"ruleId":"630","severity":1,"message":"715","line":126,"column":7,"nodeType":"632","endLine":126,"endColumn":25,"suggestions":"716"},{"ruleId":"626","severity":1,"message":"717","line":9,"column":8,"nodeType":"628","messageId":"629","endLine":9,"endColumn":17},{"ruleId":"626","severity":1,"message":"683","line":10,"column":10,"nodeType":"628","messageId":"629","endLine":10,"endColumn":13},{"ruleId":"626","severity":1,"message":"682","line":10,"column":15,"nodeType":"628","messageId":"629","endLine":10,"endColumn":19},{"ruleId":"626","severity":1,"message":"718","line":10,"column":21,"nodeType":"628","messageId":"629","endLine":10,"endColumn":28},{"ruleId":"626","severity":1,"message":"719","line":10,"column":30,"nodeType":"628","messageId":"629","endLine":10,"endColumn":38},{"ruleId":"626","severity":1,"message":"720","line":11,"column":8,"nodeType":"628","messageId":"629","endLine":11,"endColumn":17},{"ruleId":"626","severity":1,"message":"721","line":12,"column":8,"nodeType":"628","messageId":"629","endLine":12,"endColumn":22},{"ruleId":"626","severity":1,"message":"722","line":13,"column":13,"nodeType":"628","messageId":"629","endLine":13,"endColumn":19},{"ruleId":"630","severity":1,"message":"678","line":44,"column":7,"nodeType":"632","endLine":44,"endColumn":21,"suggestions":"723"},{"ruleId":"630","severity":1,"message":"724","line":13,"column":8,"nodeType":"632","endLine":13,"endColumn":10,"suggestions":"725"},{"ruleId":"630","severity":1,"message":"726","line":34,"column":7,"nodeType":"632","endLine":34,"endColumn":15,"suggestions":"727"},{"ruleId":"626","severity":1,"message":"635","line":25,"column":13,"nodeType":"628","messageId":"629","endLine":25,"endColumn":28},{"ruleId":"626","severity":1,"message":"673","line":25,"column":29,"nodeType":"628","messageId":"629","endLine":25,"endColumn":37},{"ruleId":"626","severity":1,"message":"728","line":56,"column":11,"nodeType":"628","messageId":"629","endLine":56,"endColumn":25},{"ruleId":"630","severity":1,"message":"729","line":100,"column":5,"nodeType":"632","endLine":100,"endColumn":28,"suggestions":"730"},{"ruleId":"731","severity":1,"message":"732","line":40,"column":54,"nodeType":"733","messageId":"734","endLine":40,"endColumn":56},{"ruleId":"731","severity":1,"message":"732","line":96,"column":62,"nodeType":"733","messageId":"734","endLine":96,"endColumn":64},{"ruleId":"731","severity":1,"message":"732","line":130,"column":55,"nodeType":"733","messageId":"734","endLine":130,"endColumn":57},{"ruleId":"690","severity":1,"message":"735","line":157,"column":21,"nodeType":"628","messageId":"692","endLine":157,"endColumn":29},{"ruleId":"626","severity":1,"message":"736","line":8,"column":10,"nodeType":"628","messageId":"629","endLine":8,"endColumn":16},{"ruleId":"626","severity":1,"message":"737","line":11,"column":10,"nodeType":"628","messageId":"629","endLine":11,"endColumn":13},{"ruleId":"626","severity":1,"message":"738","line":29,"column":12,"nodeType":"628","messageId":"629","endLine":29,"endColumn":23},{"ruleId":"626","severity":1,"message":"739","line":31,"column":12,"nodeType":"628","messageId":"629","endLine":31,"endColumn":26},{"ruleId":"630","severity":1,"message":"740","line":60,"column":8,"nodeType":"632","endLine":60,"endColumn":30,"suggestions":"741"},{"ruleId":"630","severity":1,"message":"742","line":114,"column":8,"nodeType":"632","endLine":114,"endColumn":28,"suggestions":"743"},{"ruleId":"626","severity":1,"message":"744","line":219,"column":21,"nodeType":"628","messageId":"629","endLine":219,"endColumn":28},{"ruleId":"626","severity":1,"message":"745","line":221,"column":21,"nodeType":"628","messageId":"629","endLine":221,"endColumn":29},{"ruleId":"626","severity":1,"message":"746","line":222,"column":21,"nodeType":"628","messageId":"629","endLine":222,"endColumn":30},{"ruleId":"626","severity":1,"message":"747","line":2,"column":8,"nodeType":"628","messageId":"629","endLine":2,"endColumn":14},{"ruleId":"626","severity":1,"message":"680","line":3,"column":8,"nodeType":"628","messageId":"629","endLine":3,"endColumn":16},{"ruleId":"626","severity":1,"message":"682","line":4,"column":10,"nodeType":"628","messageId":"629","endLine":4,"endColumn":14},{"ruleId":"626","severity":1,"message":"683","line":4,"column":16,"nodeType":"628","messageId":"629","endLine":4,"endColumn":19},{"ruleId":"626","severity":1,"message":"684","line":4,"column":21,"nodeType":"628","messageId":"629","endLine":4,"endColumn":30},{"ruleId":"626","severity":1,"message":"748","line":5,"column":8,"nodeType":"628","messageId":"629","endLine":5,"endColumn":19},{"ruleId":"626","severity":1,"message":"749","line":9,"column":8,"nodeType":"628","messageId":"629","endLine":9,"endColumn":21},{"ruleId":"630","severity":1,"message":"678","line":26,"column":7,"nodeType":"632","endLine":26,"endColumn":21,"suggestions":"750"},{"ruleId":"626","severity":1,"message":"635","line":14,"column":13,"nodeType":"628","messageId":"629","endLine":14,"endColumn":28},{"ruleId":"626","severity":1,"message":"676","line":15,"column":26,"nodeType":"628","messageId":"629","endLine":15,"endColumn":41},{"ruleId":"630","severity":1,"message":"678","line":30,"column":7,"nodeType":"632","endLine":30,"endColumn":46,"suggestions":"751"},{"ruleId":"630","severity":1,"message":"752","line":50,"column":7,"nodeType":"632","endLine":50,"endColumn":16,"suggestions":"753"},{"ruleId":"626","severity":1,"message":"754","line":133,"column":17,"nodeType":"628","messageId":"629","endLine":133,"endColumn":26},{"ruleId":"626","severity":1,"message":"755","line":136,"column":21,"nodeType":"628","messageId":"629","endLine":136,"endColumn":36},{"ruleId":"626","severity":1,"message":"756","line":369,"column":11,"nodeType":"628","messageId":"629","endLine":369,"endColumn":16},{"ruleId":"626","severity":1,"message":"642","line":1014,"column":19,"nodeType":"628","messageId":"629","endLine":1014,"endColumn":23},{"ruleId":"626","severity":1,"message":"757","line":1,"column":8,"nodeType":"628","messageId":"629","endLine":1,"endColumn":13},{"ruleId":"626","severity":1,"message":"758","line":14,"column":8,"nodeType":"628","messageId":"629","endLine":14,"endColumn":18},{"ruleId":"626","severity":1,"message":"759","line":17,"column":8,"nodeType":"628","messageId":"629","endLine":17,"endColumn":23},{"ruleId":"626","severity":1,"message":"760","line":20,"column":31,"nodeType":"628","messageId":"629","endLine":20,"endColumn":40},{"ruleId":"630","severity":1,"message":"678","line":58,"column":8,"nodeType":"632","endLine":58,"endColumn":25,"suggestions":"761"},{"ruleId":"626","severity":1,"message":"762","line":11,"column":10,"nodeType":"628","messageId":"629","endLine":11,"endColumn":15},{"ruleId":"630","severity":1,"message":"654","line":31,"column":5,"nodeType":"632","endLine":31,"endColumn":19,"suggestions":"763"},{"ruleId":"626","severity":1,"message":"653","line":15,"column":17,"nodeType":"628","messageId":"629","endLine":15,"endColumn":24},{"ruleId":"626","severity":1,"message":"764","line":21,"column":30,"nodeType":"628","messageId":"629","endLine":21,"endColumn":47},{"ruleId":"630","severity":1,"message":"654","line":52,"column":8,"nodeType":"632","endLine":52,"endColumn":31,"suggestions":"765"},{"ruleId":"630","severity":1,"message":"678","line":98,"column":8,"nodeType":"632","endLine":98,"endColumn":34,"suggestions":"766"},{"ruleId":"630","severity":1,"message":"654","line":31,"column":7,"nodeType":"632","endLine":31,"endColumn":21,"suggestions":"767"},{"ruleId":"630","severity":1,"message":"654","line":23,"column":3,"nodeType":"632","endLine":23,"endColumn":17,"suggestions":"768"},{"ruleId":"626","severity":1,"message":"769","line":7,"column":5,"nodeType":"628","messageId":"629","endLine":7,"endColumn":14},{"ruleId":"626","severity":1,"message":"770","line":8,"column":5,"nodeType":"628","messageId":"629","endLine":8,"endColumn":8},{"ruleId":"626","severity":1,"message":"771","line":12,"column":5,"nodeType":"628","messageId":"629","endLine":12,"endColumn":10},{"ruleId":"626","severity":1,"message":"772","line":17,"column":8,"nodeType":"628","messageId":"629","endLine":17,"endColumn":16},{"ruleId":"626","severity":1,"message":"653","line":23,"column":17,"nodeType":"628","messageId":"629","endLine":23,"endColumn":24},{"ruleId":"626","severity":1,"message":"697","line":30,"column":12,"nodeType":"628","messageId":"629","endLine":30,"endColumn":20},{"ruleId":"626","severity":1,"message":"773","line":35,"column":11,"nodeType":"628","messageId":"629","endLine":35,"endColumn":18},{"ruleId":"630","severity":1,"message":"678","line":49,"column":8,"nodeType":"632","endLine":49,"endColumn":22,"suggestions":"774"},{"ruleId":"630","severity":1,"message":"775","line":63,"column":8,"nodeType":"632","endLine":63,"endColumn":38,"suggestions":"776"},{"ruleId":"630","severity":1,"message":"777","line":81,"column":8,"nodeType":"632","endLine":81,"endColumn":29,"suggestions":"778"},{"ruleId":"630","severity":1,"message":"775","line":95,"column":8,"nodeType":"632","endLine":95,"endColumn":46,"suggestions":"779"},{"ruleId":"626","severity":1,"message":"627","line":1,"column":27,"nodeType":"628","messageId":"629","endLine":1,"endColumn":36},{"ruleId":"626","severity":1,"message":"780","line":3,"column":5,"nodeType":"628","messageId":"629","endLine":3,"endColumn":15},{"ruleId":"626","severity":1,"message":"769","line":7,"column":5,"nodeType":"628","messageId":"629","endLine":7,"endColumn":14},{"ruleId":"626","severity":1,"message":"770","line":8,"column":5,"nodeType":"628","messageId":"629","endLine":8,"endColumn":8},{"ruleId":"626","severity":1,"message":"694","line":14,"column":8,"nodeType":"628","messageId":"629","endLine":14,"endColumn":14},{"ruleId":"626","severity":1,"message":"781","line":15,"column":9,"nodeType":"628","messageId":"629","endLine":15,"endColumn":20},{"ruleId":"626","severity":1,"message":"782","line":15,"column":21,"nodeType":"628","messageId":"629","endLine":15,"endColumn":28},{"ruleId":"626","severity":1,"message":"653","line":18,"column":17,"nodeType":"628","messageId":"629","endLine":18,"endColumn":24},{"ruleId":"626","severity":1,"message":"783","line":19,"column":8,"nodeType":"628","messageId":"629","endLine":19,"endColumn":16},{"ruleId":"626","severity":1,"message":"769","line":7,"column":5,"nodeType":"628","messageId":"629","endLine":7,"endColumn":14},{"ruleId":"626","severity":1,"message":"770","line":8,"column":5,"nodeType":"628","messageId":"629","endLine":8,"endColumn":8},{"ruleId":"626","severity":1,"message":"653","line":20,"column":17,"nodeType":"628","messageId":"629","endLine":20,"endColumn":24},{"ruleId":"626","severity":1,"message":"784","line":22,"column":8,"nodeType":"628","messageId":"629","endLine":22,"endColumn":22},{"ruleId":"626","severity":1,"message":"697","line":28,"column":12,"nodeType":"628","messageId":"629","endLine":28,"endColumn":20},{"ruleId":"626","severity":1,"message":"785","line":31,"column":12,"nodeType":"628","messageId":"629","endLine":31,"endColumn":23},{"ruleId":"626","severity":1,"message":"773","line":37,"column":11,"nodeType":"628","messageId":"629","endLine":37,"endColumn":18},{"ruleId":"626","severity":1,"message":"786","line":39,"column":26,"nodeType":"628","messageId":"629","endLine":39,"endColumn":38},{"ruleId":"630","severity":1,"message":"698","line":56,"column":8,"nodeType":"632","endLine":56,"endColumn":38,"suggestions":"787"},{"ruleId":"630","severity":1,"message":"777","line":86,"column":8,"nodeType":"632","endLine":86,"endColumn":29,"suggestions":"788"},{"ruleId":"630","severity":1,"message":"777","line":115,"column":8,"nodeType":"632","endLine":115,"endColumn":31,"suggestions":"789"},{"ruleId":"626","severity":1,"message":"757","line":1,"column":8,"nodeType":"628","messageId":"629","endLine":1,"endColumn":13},{"ruleId":"626","severity":1,"message":"722","line":11,"column":13,"nodeType":"628","messageId":"629","endLine":11,"endColumn":19},{"ruleId":"626","severity":1,"message":"696","line":13,"column":10,"nodeType":"628","messageId":"629","endLine":13,"endColumn":14},{"ruleId":"626","severity":1,"message":"653","line":14,"column":17,"nodeType":"628","messageId":"629","endLine":14,"endColumn":24},{"ruleId":"626","severity":1,"message":"790","line":19,"column":10,"nodeType":"628","messageId":"629","endLine":19,"endColumn":14},{"ruleId":"626","severity":1,"message":"722","line":9,"column":13,"nodeType":"628","messageId":"629","endLine":9,"endColumn":19},{"ruleId":"626","severity":1,"message":"756","line":22,"column":11,"nodeType":"628","messageId":"629","endLine":22,"endColumn":16},{"ruleId":"791","severity":1,"message":"792","line":56,"column":31,"nodeType":"793","messageId":"794","endLine":99,"endColumn":14},{"ruleId":"630","severity":1,"message":"654","line":31,"column":7,"nodeType":"632","endLine":31,"endColumn":21,"suggestions":"795"},{"ruleId":"630","severity":1,"message":"654","line":45,"column":7,"nodeType":"632","endLine":45,"endColumn":21,"suggestions":"796"},{"ruleId":"626","severity":1,"message":"797","line":30,"column":7,"nodeType":"628","messageId":"629","endLine":30,"endColumn":15},{"ruleId":"630","severity":1,"message":"654","line":45,"column":7,"nodeType":"632","endLine":45,"endColumn":21,"suggestions":"798"},{"ruleId":"626","severity":1,"message":"627","line":1,"column":27,"nodeType":"628","messageId":"629","endLine":1,"endColumn":36},{"ruleId":"626","severity":1,"message":"799","line":22,"column":13,"nodeType":"628","messageId":"629","endLine":22,"endColumn":28},{"ruleId":"626","severity":1,"message":"673","line":22,"column":29,"nodeType":"628","messageId":"629","endLine":22,"endColumn":37},{"ruleId":"626","severity":1,"message":"800","line":26,"column":12,"nodeType":"628","messageId":"629","endLine":26,"endColumn":29},{"ruleId":"626","severity":1,"message":"801","line":26,"column":31,"nodeType":"628","messageId":"629","endLine":26,"endColumn":51},{"ruleId":"630","severity":1,"message":"802","line":31,"column":5,"nodeType":"628","endLine":31,"endColumn":20,"suggestions":"803"},{"ruleId":"630","severity":1,"message":"678","line":43,"column":7,"nodeType":"632","endLine":43,"endColumn":38,"suggestions":"804"},{"ruleId":"626","severity":1,"message":"757","line":1,"column":8,"nodeType":"628","messageId":"629","endLine":1,"endColumn":13},{"ruleId":"626","severity":1,"message":"639","line":17,"column":17,"nodeType":"628","messageId":"629","endLine":17,"endColumn":30},{"ruleId":"626","severity":1,"message":"653","line":17,"column":32,"nodeType":"628","messageId":"629","endLine":17,"endColumn":39},{"ruleId":"626","severity":1,"message":"642","line":80,"column":23,"nodeType":"628","messageId":"629","endLine":80,"endColumn":27},{"ruleId":"626","severity":1,"message":"805","line":17,"column":10,"nodeType":"628","messageId":"629","endLine":17,"endColumn":25},{"ruleId":"626","severity":1,"message":"806","line":18,"column":10,"nodeType":"628","messageId":"629","endLine":18,"endColumn":15},{"ruleId":"626","severity":1,"message":"757","line":1,"column":8,"nodeType":"628","messageId":"629","endLine":1,"endColumn":13},"no-native-reassign",["807"],"no-negated-in-lhs",["808"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array. If 'fetchUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["809"],"'UNREAD_MESSAGE_COUNT_SUCCESS' is defined but never used.","'userDetailsById' is assigned a value but never used.","'msgNotification' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authuser.uid' and 'dispatch'. Either include them or remove the dependency array.",["810"],"'RedirectModal' is defined but never used.","'Redirect' is defined but never used.","'rescheck' is assigned a value but never used.","'resp' is assigned a value but never used.","'isUsernameUnique' is defined but never used.","'response' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"811","text":"812"},{"range":"813","text":"812"},{"range":"814","text":"812"},{"range":"815","text":"812"},"'Success' is defined but never used.","React Hook useEffect has missing dependencies: 'authuser', 'loading', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["816"],["817"],["818"],"React Hook useEffect has missing dependencies: 'dispatch', 'params', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["819"],"React Hook useEffect has a missing dependency: 'modalStatus'. Either include it or remove the dependency array.",["820"],"'HomePage' is defined but never used.","React Hook useEffect has a missing dependency: 'params.subscibe_user_id'. Either include it or remove the dependency array.",["821"],["822"],"React Hook useEffect has missing dependencies: 'props.history' and 'props.location'. Either include them or remove the dependency array. If 'setCheckoutData' needs the current value of 'props.location', you can also switch to useReducer instead of useState and read 'props.location' in the reducer.",["823"],"'arrow_left_img' is defined but never used.","'registers' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'authuser' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'CircularProgress' is defined but never used.","'setInitialLimit' is assigned a value but never used.",["824"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["825"],"'Dropdown' is defined but never used.",["826"],"'Tabs' is defined but never used.","'Tab' is defined but never used.","'Accordion' is defined but never used.","'Tooltip' is defined but never used.","'messageList' is assigned a value but never used.","'UnreadCountRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'listenerData' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["827"],"no-redeclare","'notifypostdata' is already defined.","redeclared","'notification_id' is already defined.","'Moment' is defined but never used.","'getUnreadMessageCount' is defined but never used.","'auth' is defined but never used.","'nickname' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props' and 'userDetailsById.username'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["828"],"React Hook useEffect has a missing dependency: 'enterChatRoom'. Either include it or remove the dependency array.",["829"],["830"],"'loading' is assigned a value but never used.","'expiredDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authuser.uid' and 'profileId'. Either include them or remove the dependency array.",["831"],"React Hook useEffect has missing dependencies: 'profileId' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["832"],"React Hook useEffect has missing dependencies: 'profileId' and 'props'. Either include them or remove the dependency array.",["833"],"React Hook useEffect has a missing dependency: 'authuser.uid'. Either include it or remove the dependency array.",["834"],["835"],["836"],"React Hook useEffect has a missing dependency: 'props?.props.history'. Either include it or remove the dependency array.",["837"],"'HomeAbout' is defined but never used.","'TabList' is defined but never used.","'TabPanel' is defined but never used.","'HomeAudio' is defined but never used.","'HomeVideoImage' is defined but never used.","'moment' is defined but never used.",["838"],"React Hook useEffect has missing dependencies: 'authuser' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["839"],"React Hook useEffect has missing dependencies: 'authuser.uid' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["840"],"'subscribe_type' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CheckoutReqData.state.subscribeId' and 'props.props.history'. Either include them or remove the dependency array.",["841"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'time_val' is already defined.","'Button' is defined but never used.","'set' is defined but never used.","'FollowerRes' is assigned a value but never used.","'FollowerColour' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'endDate', 'props', 'startDate', and 'userDetailsById'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["842"],"React Hook useEffect has missing dependencies: 'props' and 'userDetailsById'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["843"],"'imp_val' is assigned a value but never used.","'reac_val' is assigned a value but never used.","'saves_val' is assigned a value but never used.","'Navbar' is defined but never used.","'UserProfile' is defined but never used.","'facebook_icon' is defined but never used.",["844"],["845"],"React Hook useEffect has a missing dependency: 'notification_data'. Either include it or remove the dependency array.",["846"],"'transData' is assigned a value but never used.","'responseRevenue' is assigned a value but never used.","'query' is assigned a value but never used.","'React' is defined but never used.","'dot_button' is defined but never used.","'CustomPlayPause' is defined but never used.","'isPlaying' is assigned a value but never used.",["847"],"'ERROR' is defined but never used.",["848"],"'stripeAccountData' is assigned a value but never used.",["849"],["850"],["851"],["852"],"'Container' is defined but never used.","'Row' is defined but never used.","'Input' is defined but never used.","'firebase' is defined but never used.","'history' is assigned a value but never used.",["853"],"React Hook useEffect has a missing dependency: 'userDetailsById.username'. Either include it or remove the dependency array.",["854"],"React Hook useEffect has missing dependencies: 'authuser.uid', 'props', and 'userDetailsById.username'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["855"],["856"],"'useHistory' is defined but never used.","'useSelector' is defined but never used.","'connect' is defined but never used.","'user_img' is defined but never used.","'firebaseConfig' is defined but never used.","'reciever_id' is assigned a value but never used.","'listenerData' is assigned a value but never used.",["857"],["858"],["859"],"'copy' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'notifycount', 'notifycount', 'notifycount'.","ArrowFunctionExpression","unsafeRefs",["860"],["861"],"'getValue' is assigned a value but never used.",["862"],"'disableUserData' is assigned a value but never used.","'showPrivacyPolicy' is assigned a value but never used.","'setShowPrivacyPolicy' is assigned a value but never used.","React Hook useLayoutEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useLayoutEffect Hook.",["863"],["864"],"'CopyToClipboard' is defined but never used.","'toast' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},[17286,17314],"\"external nofollow noopener noreferrer\"",[18241,18269],[19285,19313],[19560,19588],{"desc":"869","fix":"870"},{"desc":"869","fix":"871"},{"desc":"869","fix":"872"},{"desc":"873","fix":"874"},{"desc":"875","fix":"876"},{"desc":"877","fix":"878"},{"desc":"875","fix":"879"},{"desc":"880","fix":"881"},{"desc":"882","fix":"883"},{"desc":"884","fix":"885"},{"desc":"884","fix":"886"},{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"884","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"894","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"884","fix":"907"},{"desc":"908","fix":"909"},{"desc":"910","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"884","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"925","fix":"931"},{"desc":"925","fix":"932"},{"desc":"884","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"940","fix":"941"},{"desc":"936","fix":"942"},{"desc":"943","fix":"944"},{"desc":"925","fix":"945"},{"desc":"925","fix":"946"},{"desc":"925","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},"Update the dependencies array to be: [fetchUser]",{"range":"952","text":"953"},"Update the dependencies array to be: [authuser.uid, dispatch, notification]",{"range":"954","text":"955"},"Update the dependencies array to be: [authuser, loading, props]",{"range":"956","text":"957"},{"range":"958","text":"957"},{"range":"959","text":"957"},"Update the dependencies array to be: [authuser.uid, dispatch, params, props]",{"range":"960","text":"961"},"Update the dependencies array to be: [modalStatus, userDetailsById]",{"range":"962","text":"963"},"Update the dependencies array to be: [params.subscibe_user_id]",{"range":"964","text":"965"},{"range":"966","text":"963"},"Update the dependencies array to be: [props.history, props.location]",{"range":"967","text":"968"},"Update the dependencies array to be: [authuser.uid, music_content_bookmark, dataLimit, authuser, props, loading]",{"range":"969","text":"970"},"Update the dependencies array to be: [authuser.uid, props]",{"range":"971","text":"972"},{"range":"973","text":"972"},"Update the dependencies array to be: [authuser.uid, listenerData, notification_data, props]",{"range":"974","text":"975"},"Update the dependencies array to be: [authuser.uid, audienceData, sendGroupMsgStatus, sendMsgStatus, UserUnreadMSGCount, props, userDetailsById.username]",{"range":"976","text":"977"},"Update the dependencies array to be: [ChatId, enterChatRoom]",{"range":"978","text":"979"},{"range":"980","text":"972"},"Update the dependencies array to be: [authuser.uid, profileId, subscribeExpired]",{"range":"981","text":"982"},"Update the dependencies array to be: [authuser.uid, dataLimit, isLoader, profileId, props]",{"range":"983","text":"984"},"Update the dependencies array to be: [authuser.uid, music_content_like, music_content_bookmark, dataLimit, isLoader, props, profileId]",{"range":"985","text":"986"},{"range":"987","text":"982"},"Update the dependencies array to be: [authuser.uid, bioval, props]",{"range":"988","text":"989"},"Update the dependencies array to be: [authuser.uid, props, props.userProfileId]",{"range":"990","text":"991"},"Update the dependencies array to be: [ChatId, OtherUser, props?.props.history]",{"range":"992","text":"993"},{"range":"994","text":"972"},"Update the dependencies array to be: [authuser, props]",{"range":"995","text":"996"},"Update the dependencies array to be: [authuser.uid, props, subsId]",{"range":"997","text":"998"},"Update the dependencies array to be: [subscribeData, loading, CheckoutReqData.state.subscribeId, props.props.history]",{"range":"999","text":"1000"},"Update the dependencies array to be: [authuser.uid, endDate, period, props, startDate, userDetailsById]",{"range":"1001","text":"1002"},"Update the dependencies array to be: [InstaFollowerCount, props, userDetailsById]",{"range":"1003","text":"1004"},{"range":"1005","text":"972"},"Update the dependencies array to be: [authuser.uid, dataLimit, props, removeIdStatus]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [loading, notification_data]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [props, props.mediaData]",{"range":"1010","text":"1011"},"Update the dependencies array to be: [authuser, authuser.uid, loading, props]",{"range":"1012","text":"1013"},"Update the dependencies array to be: [authuser, authuser.uid, loading, payoutId, props]",{"range":"1014","text":"1015"},"Update the dependencies array to be: [userDetailsById, payoutId, props]",{"range":"1016","text":"1017"},{"range":"1018","text":"1013"},{"range":"1019","text":"1013"},{"range":"1020","text":"972"},"Update the dependencies array to be: [authuser.uid, props?.room_id, userDetailsById.username]",{"range":"1021","text":"1022"},"Update the dependencies array to be: [authuser.uid, props, roomname, sender_id, userDetailsById.username]",{"range":"1023","text":"1024"},"Update the dependencies array to be: [groupMessageList, sendGroupMsgStatus, userDetailsById.username]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [authuser.uid, props, props?.room_id, userDetailsById.username]",{"range":"1027","text":"1028"},{"range":"1029","text":"1024"},"Update the dependencies array to be: [authuser.uid, messageList, props, roomname, userDetailsById.username]",{"range":"1030","text":"1031"},{"range":"1032","text":"1013"},{"range":"1033","text":"1013"},{"range":"1034","text":"1013"},"Add dependencies array: []",{"range":"1035","text":"1036"},"Update the dependencies array to be: [authuser, imagePath, currentTab, props]",{"range":"1037","text":"1038"},[1681,1683],"[fetchUser]",[2336,2350],"[authuser.uid, dispatch, notification]",[1729,1731],"[authuser, loading, props]",[1367,1369],[1783,1785],[2281,2295],"[authuser.uid, dispatch, params, props]",[2630,2647],"[modalStatus, userDetailsById]",[881,883],"[params.subscibe_user_id]",[1205,1222],[554,556],"[props.history, props.location]",[1364,1411],"[authuser.uid, music_content_bookmark, dataLimit, authuser, props, loading]",[1361,1375],"[authuser.uid, props]",[1226,1240],[1761,1794],"[authuser.uid, listenerData, notification_data, props]",[3604,3687],"[authuser.uid, audienceData, sendGroupMsgStatus, sendMsgStatus, UserUnreadMSGCount, props, userDetailsById.username]",[4025,4033],"[ChatId, enterChatRoom]",[4228,4242],[2366,2384],"[authuser.uid, profileId, subscribeExpired]",[3409,3444],"[authuser.uid, dataLimit, isLoader, profileId, props]",[2222,2297],"[authuser.uid, music_content_like, music_content_bookmark, dataLimit, isLoader, props, profileId]",[3052,3080],[968,990],"[authuser.uid, bioval, props]",[2917,2951],"[authuser.uid, props, props.userProfileId]",[4667,4685],"[ChatId, OtherUser, props?.props.history]",[1387,1401],[449,451],"[authuser, props]",[1314,1322],"[authuser.uid, props, subsId]",[3087,3110],"[subscribeData, loading, CheckoutReqData.state.subscribeId, props.props.history]",[2798,2820],"[authuser.uid, endDate, period, props, startDate, userDetailsById]",[4598,4618],"[InstaFollowerCount, props, userDetailsById]",[1000,1014],[1187,1226],"[authuser.uid, dataLimit, props, removeIdStatus]",[1784,1793],"[loading, notification_data]",[1982,1999],"[props, props.mediaData]",[1226,1240],"[authuser, authuser.uid, loading, props]",[2060,2083],"[authuser, authuser.uid, loading, payoutId, props]",[3685,3711],"[userDetailsById, payoutId, props]",[893,907],[699,713],[1697,1711],[1935,1965],"[authuser.uid, props?.room_id, userDetailsById.username]",[2388,2409],"[authuser.uid, props, roomname, sender_id, userDetailsById.username]",[2725,2763],"[groupMessageList, sendGroupMsgStatus, userDetailsById.username]",[1861,1891],"[authuser.uid, props, props?.room_id, userDetailsById.username]",[2772,2793],[3658,3681],"[authuser.uid, messageList, props, roomname, userDetailsById.username]",[875,889],[1436,1450],[1354,1368],[1273,1273],", []",[1459,1490],"[authuser, imagePath, currentTab, props]"]